/*
 * @(#) FonteReceita.java
 * Copyright (c) 2010 Ci&T Software S/A.
 * All Rights Reserved.
 */
package com.ciandt.pms.model;

import java.util.ArrayList;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

/**
 * Entity gerado a partir da tabela FONTE_RECEITA.
 *
 * @author Generated by Hibernate Tools 3.2.4.GA
 * @since 03/02/2010 16:15:55
 * @version 09/01/19 1.1 10:08:00
 */
@Entity
@Table(name = "FONTE_RECEITA")
@NamedQueries({
    
    @NamedQuery(name = "FonteReceita.findAll", query = "SELECT fr FROM FonteReceita fr "
            + " WHERE fr.indicadorAtivo = 'A' " +
    		// excluindo fontes do forecast
            " AND fr.codigoFonteReceita not in (7, 8, 9, 10, 11) ")

})
public class FonteReceita implements java.io.Serializable {

    /**
     * Valor do CODIGO DE SERVICES.
     */
    public static final long SERVICES = 1L;
    /**
     * Valor do CODIGO DE LICENSES.
     */
    public static final long LICENSES = 4L;

    /**
     * Valor do serialVersionUID.
     */
    private static final long serialVersionUID = 1L;

    /** 
     * Constante para NamedQuery "FonteReceita.findAll".
     */
    public static final String FIND_ALL = "FonteReceita.findAll";

    /**
     * Atributo gerado a partir da coluna FORE_CD_FONTE_RECEITA.
     */
    @Id
    @GeneratedValue(generator = "FonteReceitaSeq")
    @SequenceGenerator(name = "FonteReceitaSeq", sequenceName = "SQ_FORE_CD_FONTE_RECEITA", allocationSize = 1)
    @Column(name = "FORE_CD_FONTE_RECEITA", unique = true, nullable = false, precision = 18, scale = 0)
    private Long codigoFonteReceita;

    /**
     * Atributo gerado a partir da coluna FORE_NM_FONTE_RECEITA.
     */

    @Column(name = "FORE_NM_FONTE_RECEITA", length = 100)
    private String nomeFonteReceita;

    /**
     * Atributo gerado a partir da coluna FORE_IN_ATIVO.
     */

    @Column(name = "FORE_IN_ATIVO", length = 1)
    private String indicadorAtivo;

    /**
     * Atributo gerado a partir da coluna FORE_IN_CONTABILIZA.
     */
    @Column(name = "FORE_IN_TIPO", length = 1)
    private String indicadorTipo;

    @Column(name = "FORE_TX_ERP", length = 250)
    private String textoErp;

    /**
     * Set de item das faturas.
     */
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "fonteReceita")
    private List<ItemFatura> itemFaturas = new ArrayList<ItemFatura>(0);

    /**
     * Construtor default.
     */
    public FonteReceita() {
    }

    /**
     * Construtor com preenchimento da entidade.
     * @param codigoFonteReceita Valor do atributo codigoFonteReceita;
     */
    public FonteReceita(final Long codigoFonteReceita) {
        this.codigoFonteReceita = codigoFonteReceita;
    }

    /**
     * Construtor com preenchimento da entidade.
     * @param codigoFonteReceita Valor do atributo codigoFonteReceita;
     * @param nomeFonteReceita Valor do atributo nomeFonteReceita;
     * @param indicadorAtivo Valor do atributo indicadorAtivo;
     * @param indicadorContabiliza Valor do atributo indicadorContabiliza;
     * @param itemFaturas Valor do atributo itemFaturas;
     */
    public FonteReceita(final Long codigoFonteReceita, final String nomeFonteReceita,
            final String indicadorAtivo, final String indicadorContabiliza,
            final List<ItemFatura> itemFaturas) {
        this.codigoFonteReceita = codigoFonteReceita;
        this.nomeFonteReceita = nomeFonteReceita;
        this.indicadorAtivo = indicadorAtivo;
        this.indicadorTipo = indicadorContabiliza;
        this.itemFaturas = itemFaturas;
    }

    /**
     * Obtem o valor do atributo codigoFonteReceita.<BR>
     * Atributo gerado a partir da coluna FORE_CD_FONTE_RECEITA.
     * @return Valor do atributo codigoFonteReceita.
     */
    public Long getCodigoFonteReceita() {
        return this.codigoFonteReceita;
    }

    /**
     * Atualiza o valor do atributo codigoFonteReceita.<BR>
     * Atributo gerado a partir da coluna FORE_CD_FONTE_RECEITA.
     * @param codigoFonteReceita Novo valor para o atributo codigoFonteReceita.
     */
    public void setCodigoFonteReceita(final Long codigoFonteReceita) {
        this.codigoFonteReceita = codigoFonteReceita;
    }

    /**
     * Obtem o valor do atributo nomeFonteReceita.<BR>
     * Atributo gerado a partir da coluna FORE_NM_FONTE_RECEITA.
     * @return Valor do atributo nomeFonteReceita.
     */
    public String getNomeFonteReceita() {
        return this.nomeFonteReceita;
    }

    /**
     * Atualiza o valor do atributo nomeFonteReceita.<BR>
     * Atributo gerado a partir da coluna FORE_NM_FONTE_RECEITA.
     * @param nomeFonteReceita Novo valor para o atributo nomeFonteReceita.
     */
    public void setNomeFonteReceita(final String nomeFonteReceita) {
        this.nomeFonteReceita = nomeFonteReceita;
    }

    /**
     * Obtem o valor do atributo indicadorAtivo.<BR>
     * Atributo gerado a partir da coluna FORE_IN_ATIVO.
     * @return Valor do atributo indicadorAtivo.
     */
    public String getIndicadorAtivo() {
        return this.indicadorAtivo;
    }

    /**
     * Atualiza o valor do atributo indicadorAtivo.<BR>
     * Atributo gerado a partir da coluna FORE_IN_ATIVO.
     * @param indicadorAtivo Novo valor para o atributo indicadorAtivo.
     */
    public void setIndicadorAtivo(final String indicadorAtivo) {
        this.indicadorAtivo = indicadorAtivo;
    }

    /**
     * Obtem o valor do atributo indicadorContabiliza.<BR>
     * Atributo gerado a partir da coluna FORE_IN_CONTABILIZA.
     * @return Valor do atributo indicadorContabiliza.
     */
    public String getIndicadorTipo() {
        return this.indicadorTipo;
    }

    /**
     * Atualiza o valor do atributo indicadorContabiliza.<BR>
     * Atributo gerado a partir da coluna FORE_IN_CONTABILIZA.
     * @param indicadorContabiliza Novo valor para o atributo indicadorContabiliza.
     */
    public void setIndicadorTipo(final String indicadorContabiliza) {
        this.indicadorTipo = indicadorContabiliza;
    }

    public String getTextoErp() {
        return this.textoErp;
    }

    public void setTextoErp(final String textoErp) {
        this.textoErp = textoErp;
    }

    /**
     * Obtem o valor do atributo itemFaturas.<BR>

     * @return Valor do atributo itemFaturas.
     */
    public List<ItemFatura> getItemFaturas() {
        return this.itemFaturas;
    }

    /**
     * Atualiza o valor do atributo itemFaturas.<BR>

     * @param itemFaturas Novo valor para o atributo itemFaturas.
     */
    public void setItemFaturas(final List<ItemFatura> itemFaturas) {
        this.itemFaturas = itemFaturas;
    }

    /**
     * @see Object#toString()
     * 
     * @return retorna a entidade no formato de string
     */
    @Override
    public String toString() {
        StringBuffer buffer = new StringBuffer();

        buffer.append(getClass().getName()).append("@").append(
                Integer.toHexString(hashCode())).append(" [");
        buffer.append("codigoFonteReceita").append("='").append(
                getCodigoFonteReceita()).append("' ");
        buffer.append("nomeFonteReceita").append("='").append(
                getNomeFonteReceita()).append("' ");
        buffer.append("indicadorAtivo").append("='")
                .append(getIndicadorAtivo()).append("' ");
        buffer.append("indicadorContabiliza").append("='").append(
                getIndicadorTipo()).append("' ");
        buffer.append("]");

        return buffer.toString();
    }

}

