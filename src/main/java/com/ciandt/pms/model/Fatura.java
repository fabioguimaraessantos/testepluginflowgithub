/*
 * @(#) Fatura.java
 * Copyright (c) 2008 Ci&T Software S/A.
 * All Rights Reserved.
 */
package com.ciandt.pms.model;

import com.ciandt.pms.enums.XeroLineIntegration;
import org.hibernate.annotations.Type;

import javax.persistence.*;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * Entity gerado a partir da tabela FATURA.
 * 
 * @author Generated by Hibernate Tools 3.2.4.GA
 * @since 30/10/2009 10:42:58
 * @version 09/01/19 1.1 10:08:00
 */
@Entity
@Table(name = "FATURA")
@SqlResultSetMappings(@SqlResultSetMapping(name = "scalarFatura"))
@NamedNativeQueries(@NamedNativeQuery(name = "Fatura.integrateFatura", query = "{ ? = call pms20.ufc_pms_integracao_fatura(:param1, :param2) }", hints = { @QueryHint(name = "org.hibernate.callable", value = "true") }, resultClass = Integer.class, resultSetMapping = "scalarFatura"))
@NamedQueries({
		@NamedQuery(name = "Fatura.findAll", query = "SELECT f FROM Fatura f "),

		@NamedQuery(name = "Fatura.findInvoicePendingByDeal", query = "SELECT distinct f FROM Fatura f "
				+ " JOIN FETCH f.itemFaturas if "
				+ " WHERE (f.dealFiscal.codigoDealFiscal = ?) "
				+ "   AND (f.codigoFatura NOT IN "
				+ "             (SELECT fr.fatura.codigoFatura "
				+ "              FROM FaturaReceita fr"
				+ "              WHERE fr.receitaDealFiscal.codigoReceitaDfiscal = ?) ) "
				+ "   AND ((SELECT SUM(item.valorItem) FROM f.itemFaturas item) > "
				+ "             (SELECT coalesce(SUM(fatr.valorReceitaAssociada), 0D) "
				+ "              FROM FaturaReceita fatr "
				+ "              WHERE fatr.fatura.codigoFatura = f.codigoFatura))"
				+ "   AND f.indicadorStatus = 'SB' "
				+ "   AND if.fonteReceita.codigoFonteReceita IN (SELECT fore FROM FonteReceita fore WHERE fore.indicadorTipo = 'SV') "
				+ " ORDER BY f.dataPrevisao"),

		@NamedQuery(name = "Fatura.findByMonthDate", query = "SELECT fatu FROM Fatura fatu "
				+ "WHERE TRUNC(fatu.dataPrevisao,'MONTH') = TRUNC(?,'MONTH') "),

		@NamedQuery(name = "Fatura.findAllNotClosed", query = "SELECT fatu FROM Fatura fatu "
				+ "WHERE to_char(fatu.dataPrevisao,'mm/yyyy') = to_char(?,'mm/yyyy') "
				+ "AND ( UPPER(fatu.indicadorStatus) IN ('OP','AP') ) "
				+ "ORDER BY fatu.codigoFatura ASC "),

		@NamedQuery(name = "Fatura.findByFilter", query = "SELECT fatu FROM Fatura fatu "
				+ "JOIN FETCH fatu.dealFiscal defi "
				+ "JOIN FETCH defi.msa msa "
				+ "WHERE TRUNC(fatu.dataPrevisao) >= TRUNC(?) "
				+ "AND TRUNC(fatu.dataPrevisao) <= TRUNC(?) "
				+ "AND ( (msa.cliente.codigoCliente = ?) OR (? = 0L) ) "
				+ "AND ( (defi.codigoDealFiscal = ?) OR (? = 0L) ) "
				+ "AND ( (fatu.moeda.codigoMoeda = ?) OR (? = 0L) ) "
				+ "AND ( (fatu.numeroDoc = ?) OR (? is null) ) "
				+ "AND ( UPPER(fatu.indicadorStatus) like '%'||TRIM(UPPER(?))||'%' OR (? is null) ) "
				+ "AND ( (msa.codigoMsa = ?) OR (? = 0L) ) "
				+ "AND ( UPPER(fatu.codigoLoginAe) like '%'||TRIM(UPPER(?))||'%' or (? is null))"
				+ "ORDER BY defi.cliente.nomeCliente ASC, "
				+ "defi.nomeDealFiscal ASC, fatu.dataPrevisao ASC "),

		@NamedQuery(name = "Fatura.findDelayed", query = "SELECT fatu FROM Fatura fatu "
				+ " JOIN FETCH fatu.dealFiscal defi "
				+ " JOIN FETCH defi.cliente "
				+ " WHERE TRUNC(fatu.dataPrevisao) <= TRUNC(sysdate) "
				+ " AND fatu.indicadorStatus = 'OP' ORDER BY fatu.codigoLoginAe "),

		@NamedQuery(name = "Fatura.findToBeSubmitted", query = "SELECT fatu FROM Fatura fatu "
				+ " JOIN FETCH fatu.dealFiscal defi "
				+ " JOIN FETCH defi.cliente "
				+ " JOIN FETCH defi.cpraticaDfiscals cpdf "
				+ " WHERE TRUNC(fatu.dataPrevisao) between TRUNC(sysdate) and TRUNC(sysdate+7)"
				+ " AND fatu.indicadorStatus = 'OP' ORDER BY fatu.codigoLoginAe ") })
public class Fatura implements java.io.Serializable, Cloneable {

	// ========================================================================
	// BEGIN - Coloque aqui o codigo manual
	// ========================================================================

	/** Constante para NamedQuery "Fatura.findByFilter". */
	public static final String FIND_BY_FILTER = "Fatura.findByFilter";

	/** Constante para NamedQuery "Fatura.findByDealNotInFaturaReceita". */
	public static final String FIND_INVOICE_PENDING_BY_DEAL = "Fatura.findInvoicePendingByDeal";

	/** Constante para NamedQuery "Fatura.findAllNotClosed". */
	public static final String FIND_ALL_NOT_CLOSED = "Fatura.findAllNotClosed";

	/** Constante para NamedQuery "Fatura.findDelayed". */
	public static final String FIND_DELAYED = "Fatura.findDelayed";

	/** Constante para NamedQuery "Fatura.findToBeSubmitted". */
	public static final String FIND_TO_BE_SUBMITTED = "Fatura.findToBeSubmitted";

	/** Constante para NamedQuery "Fatura.findByMonthDate". */
	public static final String FIND_BY_MONTH_DATE = "Fatura.findByMonthDate";

	/** Constante para NamedQuery "Fatura.integrateFatura". */
	public static final String INTEGRATE_FATURA = "Fatura.integrateFatura";

	/**
	 * Lista de itens da fatura.
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "fatura", cascade = CascadeType.ALL)
	@OrderBy("codigoItemFatura ASC")
	private List<ItemFatura> itemFaturas = new ArrayList<ItemFatura>(0);

	/**
	 * Lista de FaturaReceita.
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "fatura")
	private List<FaturaReceita> faturaReceitas = new ArrayList<FaturaReceita>(0);

	/**
	 * Lista de HistoricoFatura.
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "fatura")
	private List<HistoricoFatura> historicoFaturas = new ArrayList<HistoricoFatura>(
			0);

	/**
	 * Realiza uma copia do objeto, porem com uma referencia diferente.
	 * 
	 * @return a cï¿½pia da Fatura
	 */
	public Fatura getClone() {
		try {
			return (Fatura) super.clone();
		} catch (CloneNotSupportedException e) {
			e.printStackTrace();
			return null;
		}
	}

	// ========================================================================
	// END
	// ========================================================================

	/**
	 * Valor do serialVersionUID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * Constante para NamedQuery "Fatura.findAll".
	 */
	public static final String FIND_ALL = "Fatura.findAll";

	/**
	 * Atributo gerado a partir da coluna FATU_CD_FATURA.
	 */
	@Id
	@GeneratedValue(generator = "FaturaSeq")
	@SequenceGenerator(name = "FaturaSeq", sequenceName = "SQ_FATU_CD_FATURA", allocationSize = 1)
	@Column(name = "FATU_CD_FATURA", unique = true, nullable = false, precision = 18, scale = 0)
	private Long codigoFatura;

	/**
	 * Atributo gerado a partir da coluna MOED_CD_MOEDA.
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "MOED_CD_MOEDA", nullable = false)
	private Moeda moeda;

	/**
	 * Atributo gerado a partir da coluna DEFI_CD_DEAL_FISCAL.
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "DEFI_CD_DEAL_FISCAL")
	private DealFiscal dealFiscal;

	/**
	 * Atributo gerado a partir da coluna FATU_DT_PREVISAO.
	 */
	@Temporal(TemporalType.DATE)
	@Column(name = "FATU_DT_PREVISAO", length = 7)
	private Date dataPrevisao;

	/**
	 * Atributo gerado a partir da coluna FATU_NR_DOC.
	 */
	@Column(name = "FATU_NR_DOC", length = 50)
	private String numeroDoc;

	/**
	 * Atributo gerado a partir da coluna FATU_TX_OBSERVACAO.
	 */
	@Column(name = "FATU_TX_OBSERVACAO", length = 1000)
	private String textoObservacao;

	/**
	 * Atributo gerado a partir da coluna FATU_IN_STATUS.
	 */
	@Column(name = "FATU_IN_STATUS", length = 2)
	private String indicadorStatus;

	/**
	 * Atributo gerado a partir da coluna FATU_CD_LOGIN_AE.
	 */
	@Column(name = "FATU_CD_LOGIN_AE", length = 50)
	private String codigoLoginAe;

	/**
	 * Atributo gerado a partir da coluna FATU_CD_ERP_PEDIDO.
	 */
	@Column(name = "FATU_CD_ERP_PEDIDO", precision = 18, scale = 0)
	private Long codigoErpPedido;

	/**
	 * Atributo gerado a partir da coluna FATU_TX_ERROR.
	 */
	@Column(name = "FATU_TX_ERROR", length = 250)
	private String textoError;

	/**
	 * Atributo gerado a partir da coluna FATU_DT_CANCELAMENTO.
	 */
	@Temporal(TemporalType.DATE)
	@Column(name = "FATU_DT_CANCELAMENTO", length = 7)
	private Date dataCancelamento;

	/**
	 * Atributo gerado a partir da coluna FATU_TX_RAZAO_CANCELAMENTO.
	 */

	@Column(name = "FATU_TX_RAZAO_CANCELAMENTO", length = 500)
	private String textoRazaoCancelamento;

	/**
	 * Atributo gerado a partir da coluna FATU_DT_VENCIMENTO.
	 */
	@Temporal(TemporalType.DATE)
	@Column(name = "FATU_DT_VENCIMENTO", length = 7)
	private Date dataVencimento;

	/** Atributo gerado a partir da coluna FATU_CD_COTACAO_MOEDA. */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "COMO_CD_COTACAO_MOEDA")
	private CotacaoMoeda cotacaoMoeda;

	/**
	 * Atributo gerado a partir da coluna CELU_CD_CENTRO_LUCRO_SSO.
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "CELU_CD_CENTRO_LUCRO_SSO")
	private CentroLucro centroLucroSso;

	/**
	 * Atributo gerado a partir da coluna CELU_CD_CENTRO_LUCRO_UMKT.
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "CELU_CD_CENTRO_LUCRO_UMKT")
	private CentroLucro centroLucroUmkt;

    @Column(name = "FATU_IN_INTEG_EXTERNAL_ERP", length = 1)
    @Type(type="yes_no")
    private Boolean integratedIndicatorExternalERP;

	@Column(name = "FATU_TX_XERO_LINE_INTEGRATION", length = 10)
	@Enumerated(EnumType.STRING)
	private XeroLineIntegration xeroLineIntegration;

	/**
	 * Construtor default.
	 */
	public Fatura() {
	}

	public Fatura(FaturaApagada faturaApagada) {

		this.codigoFatura = faturaApagada.getCodigoFatura();
		this.dataPrevisao = faturaApagada.getDataPrevisao();
		this.numeroDoc = faturaApagada.getNumeroDoc();
		this.textoObservacao = faturaApagada.getTextoObservacao();
		this.indicadorStatus = faturaApagada.getIndicadorStatus();
		this.moeda = faturaApagada.getMoeda();
		this.dealFiscal = faturaApagada.getDealFiscal();
		this.codigoLoginAe = faturaApagada.getCodigoLoginAe();
		this.codigoErpPedido = faturaApagada.getCodigoErpPedido();
		this.textoError = faturaApagada.getTextoError();
		this.dataCancelamento = faturaApagada.getDataCancelamento();
		this.textoRazaoCancelamento = faturaApagada.getTextoRazaoCancelamento();
		this.cotacaoMoeda = faturaApagada.getCotacaoMoeda();
		this.dataVencimento = faturaApagada.getDataVencimento();
		this.centroLucroSso = faturaApagada.getCentroLucroSso();
		this.centroLucroUmkt = faturaApagada.getCentroLucroUmkt();
	}

	/**
	 * @return the itemFaturas
	 */
	public List<ItemFatura> getItemFaturas() {
		return itemFaturas;
	}

	/**
	 * @param itemFaturas
	 *            the itemFaturas to set
	 */
	public void setItemFaturas(final List<ItemFatura> itemFaturas) {
		this.itemFaturas = itemFaturas;
	}

	/**
	 * @return the faturaReceitas
	 */
	public List<FaturaReceita> getFaturaReceitas() {
		return faturaReceitas;
	}

	/**
	 * @param faturaReceitas
	 *            the faturaReceitas to set
	 */
	public void setFaturaReceitas(final List<FaturaReceita> faturaReceitas) {
		this.faturaReceitas = faturaReceitas;
	}

	/**
	 * @return the historicoFaturas
	 */
	public List<HistoricoFatura> getHistoricoFaturas() {
		return historicoFaturas;
	}

	/**
	 * @param historicoFaturas
	 *            the historicoFaturas to set
	 */
	public void setHistoricoFaturas(final List<HistoricoFatura> historicoFaturas) {
		this.historicoFaturas = historicoFaturas;
	}

	/**
	 * @return the codigoFatura
	 */
	public Long getCodigoFatura() {
		return codigoFatura;
	}

	/**
	 * @param codigoFatura
	 *            the codigoFatura to set
	 */
	public void setCodigoFatura(final Long codigoFatura) {
		this.codigoFatura = codigoFatura;
	}

	/**
	 * @return the moeda
	 */
	public Moeda getMoeda() {
		return moeda;
	}

	/**
	 * @param moeda
	 *            the moeda to set
	 */
	public void setMoeda(final Moeda moeda) {
		this.moeda = moeda;
	}

	/**
	 * @return the dealFiscal
	 */
	public DealFiscal getDealFiscal() {
		return dealFiscal;
	}

	/**
	 * @param dealFiscal
	 *            the dealFiscal to set
	 */
	public void setDealFiscal(final DealFiscal dealFiscal) {
		this.dealFiscal = dealFiscal;
	}

	/**
	 * @return the dataPrevisao
	 */
	public Date getDataPrevisao() {
		return dataPrevisao;
	}

	/**
	 * @param dataPrevisao
	 *            the dataPrevisao to set
	 */
	public void setDataPrevisao(final Date dataPrevisao) {
		this.dataPrevisao = dataPrevisao;
	}

	/**
	 * @return the numeroDoc
	 */
	public String getNumeroDoc() {
		return numeroDoc;
	}

	/**
	 * @param numeroDoc
	 *            the numeroDoc to set
	 */
	public void setNumeroDoc(final String numeroDoc) {
		this.numeroDoc = numeroDoc;
	}

	/**
	 * @return the textoObservacao
	 */
	public String getTextoObservacao() {
		return textoObservacao;
	}

	/**
	 * @param textoObservacao
	 *            the textoObservacao to set
	 */
	public void setTextoObservacao(final String textoObservacao) {
		this.textoObservacao = textoObservacao;
	}

	/**
	 * @return the indicadorStatus
	 */
	public String getIndicadorStatus() {
		return indicadorStatus;
	}

	/**
	 * @param indicadorStatus
	 *            the indicadorStatus to set
	 */
	public void setIndicadorStatus(final String indicadorStatus) {
		this.indicadorStatus = indicadorStatus;
	}

	/**
	 * @return the codigoLoginAe
	 */
	public String getCodigoLoginAe() {
		return codigoLoginAe;
	}

	/**
	 * @param codigoLoginAe
	 *            the codigoLoginAe to set
	 */
	public void setCodigoLoginAe(final String codigoLoginAe) {
		this.codigoLoginAe = codigoLoginAe;
	}

	/**
	 * @return the codigoErpPedido
	 */
	public Long getCodigoErpPedido() {
		return codigoErpPedido;
	}

	/**
	 * @param codigoErpPedido
	 *            the codigoErpPedido to set
	 */
	public void setCodigoErpPedido(final Long codigoErpPedido) {
		this.codigoErpPedido = codigoErpPedido;
	}

	/**
	 * @return the textoError
	 */
	public String getTextoError() {
		return textoError;
	}

	/**
	 * @param textoError
	 *            the textoError to set
	 */
	public void setTextoError(final String textoError) {
		this.textoError = textoError;
	}

	/**
	 * @return the dataCancelamento
	 */
	public Date getDataCancelamento() {
		return dataCancelamento;
	}

	/**
	 * @param dataCancelamento
	 *            the dataCancelamento to set
	 */
	public void setDataCancelamento(final Date dataCancelamento) {
		this.dataCancelamento = dataCancelamento;
	}

	/**
	 * @return the textoRazaoCancelamento
	 */
	public String getTextoRazaoCancelamento() {
		return textoRazaoCancelamento;
	}

	/**
	 * @param textoRazaoCancelamento
	 *            the textoRazaoCancelamento to set
	 */
	public void setTextoRazaoCancelamento(final String textoRazaoCancelamento) {
		this.textoRazaoCancelamento = textoRazaoCancelamento;
	}

	/**
	 * @return the dataVencimento
	 */
	public Date getDataVencimento() {
		return dataVencimento;
	}

	/**
	 * @param dataVencimento
	 *            the dataVencimento to set
	 */
	public void setDataVencimento(final Date dataVencimento) {
		this.dataVencimento = dataVencimento;
	}

	/**
	 * @return the cotacaoMoeda
	 */
	public CotacaoMoeda getCotacaoMoeda() {
		return cotacaoMoeda;
	}

	/**
	 * @param cotacaoMoeda
	 *            the cotacaoMoeda to set
	 */
	public void setCotacaoMoeda(final CotacaoMoeda cotacaoMoeda) {
		this.cotacaoMoeda = cotacaoMoeda;
	}

	/**
	 * Obtem o valor do atributo centroLucroByCeluCdCentroLucroUmkt.<BR>
	 * Atributo gerado a partir da coluna CELU_CD_CENTRO_LUCRO_UMKT.
	 * 
	 * @return Valor do atributo centroLucroByCeluCdCentroLucroUmkt.
	 */
	public CentroLucro getCentroLucroUmkt() {
		return this.centroLucroUmkt;
	}

	/**
	 * Atualiza o valor do atributo centroLucroByCeluCdCentroLucroUmkt.<BR>
	 * Atributo gerado a partir da coluna CELU_CD_CENTRO_LUCRO_UMKT.
	 */
	public void setCentroLucroUmkt(CentroLucro centroLucroUmkt) {
		this.centroLucroUmkt = centroLucroUmkt;
	}

	/**
	 * Obtem o valor do atributo centroLucroByCeluCdCentroLucroSso.<BR>
	 * Atributo gerado a partir da coluna CELU_CD_CENTRO_LUCRO_SSO.
	 * 
	 * @return Valor do atributo centroLucroByCeluCdCentroLucroSso.
	 */
	public CentroLucro getCentroLucroSso() {
		return this.centroLucroSso;
	}

	/**
	 * Atualiza o valor do atributo centroLucroByCeluCdCentroLucroSso.<BR>
	 * Atributo gerado a partir da coluna CELU_CD_CENTRO_LUCRO_SSO.
	 */
	public void setCentroLucroSso(CentroLucro centroLucroSso) {
		this.centroLucroSso = centroLucroSso;
	}

    public Boolean getIntegratedIndicatorExternalERP() {
        return integratedIndicatorExternalERP;
    }

    public void setIntegratedIndicatorExternalERP(Boolean integratedIndicatorExternalERP) {
        this.integratedIndicatorExternalERP = integratedIndicatorExternalERP;
    }

	public boolean isIntegradaERPExterno() {
		return this.getIntegratedIndicatorExternalERP() &&
				this.itemFaturas != null &&
				!this.itemFaturas.isEmpty() &&
				this.itemFaturas.get(0).getNumeroNotaFiscal() != null;
	}

	public XeroLineIntegration getXeroLineIntegration() {
		return this.xeroLineIntegration;
	}

	public void setXeroLineIntegration(final XeroLineIntegration xeroLineIntegration) {
		this.xeroLineIntegration = xeroLineIntegration;
	}

	/**
	 * @see Object#toString()
	 * @return representaï¿½ï¿½o String do Objeto
	 */
	@Override
	public String toString() {
		StringBuffer buffer = new StringBuffer();

		buffer.append(getClass().getName()).append("@")
				.append(Integer.toHexString(hashCode())).append(" [");
		buffer.append("codigoFatura").append("='").append(getCodigoFatura())
				.append("' ");
		buffer.append("moeda").append("='").append(getMoeda()).append("' ");
		buffer.append("dealFiscal").append("='").append(getDealFiscal())
				.append("' ");
		buffer.append("dataPrevisao").append("='").append(getDataPrevisao())
				.append("' ");
		buffer.append("numeroDoc").append("='").append(getNumeroDoc())
				.append("' ");
		buffer.append("textoObservacao").append("='")
				.append(getTextoObservacao()).append("' ");
		buffer.append("indicadorStatus").append("='")
				.append(getIndicadorStatus()).append("' ");
		buffer.append("codigoLoginAe").append("='").append(getCodigoLoginAe())
				.append("' ");
		buffer.append("codigoErpPedido").append("='")
				.append(getCodigoErpPedido()).append("' ");
		buffer.append("textoError").append("='").append(getTextoError())
				.append("' ");
		buffer.append("dataCancelamento").append("='")
				.append(getDataCancelamento()).append("' ");
		buffer.append("textoRazaoCancelamento").append("='")
				.append(getTextoRazaoCancelamento()).append("' ");
		buffer.append("cotacaoMoeda").append("='").append(getCotacaoMoeda())
				.append("' ");
		buffer.append("dataVencimento").append("='")
				.append(getDataVencimento()).append("' ");
		buffer.append("centroLucroByCeluCdCentroLucroSso").append("='")
				.append(getCentroLucroSso()).append("' ");
		buffer.append("moeda").append("='").append(getMoeda()).append("' ");
		buffer.append("centroLucroByCeluCdCentroLucroUmkt").append("='")
				.append(getCentroLucroUmkt()).append("' ");
        buffer.append("indicadorIntegradoExternalERP").append("='").append(getIntegratedIndicatorExternalERP())
                .append("' ");
		buffer.append("xeroLineIntegration").append("='").append(getXeroLineIntegration())
				.append("' ");
		buffer.append("]");

		return buffer.toString();
	}

}