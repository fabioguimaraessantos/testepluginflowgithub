/*
 * @(#) VwPmsVoucherCotacaoMoeda.java
 * Copyright (c) 2008 Ci&T Software S/A.
 * All Rights Reserved.
 */
package com.ciandt.pms.model;

import java.math.BigDecimal;

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.QueryHint;
import javax.persistence.SequenceGenerator;
import javax.persistence.SqlResultSetMapping;
import javax.persistence.SqlResultSetMappings;
import javax.persistence.Table;

/**
 * Entity gerado a partir da tabela VW_PMS_COTACAO_MOEDA.
 * 
 * @author Generated by Hibernate Tools 3.4.0.CR1
 * @since 05/12/2013 11:05:43
 * @version 09/01/19 1.1 10:08:00
 */
@Entity
@Table(name = "VW_PMS_COTACAO_MOEDA")
@SqlResultSetMappings(@SqlResultSetMapping(name = "valorConvertido"))
@NamedNativeQueries(@NamedNativeQuery(name = "VwPmsCotacaoMoeda.converteValorMoedaDePara", query = "{ ? = call pms20.UFC_PMS_CONVERTE_MOEDA_DE_PARA(:valorAConverter, :moedaDe, :moedaPara) }", hints = { @QueryHint(name = "org.hibernate.callable", value = "true") }, resultClass = BigDecimal.class, resultSetMapping = "valorConvertido"))
@NamedQueries({
		@NamedQuery(name = "VwPmsCotacaoMoeda.findAll", query = "SELECT t FROM VwPmsCotacaoMoeda t"),
		@NamedQuery(name = "VwPmsCotacaoMoeda.findLastRatebyCurrency", query = "SELECT t FROM VwPmsCotacaoMoeda t "
				+ "WHERE t.id.codigoMoeda = ?") })
public class VwPmsCotacaoMoeda implements java.io.Serializable {

	/**
	 * Valor do serialVersionUID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * Constante para NamedQuery "VwPmsCotacaoMoeda.findAll".
	 */
	public static final String FIND_ALL = "VwPmsCotacaoMoeda.findAll";

	/**
	 * Constante para NamedQuery "VwPmsCotacaoMoeda.findLastRatebyCurrency".
	 */
	public static final String FIND_LAST_RATE_BY_CURRENCY = "VwPmsCotacaoMoeda.findLastRatebyCurrency";
	
	/**
	 * Constante para NamedQuery "VwPmsCotacaoMoeda.converteValorMoedaDePara".
	 */
	public static final String CONVERTE_VALOR_MOEDA_DE_PARA = "VwPmsCotacaoMoeda.converteValorMoedaDePara";

	/**
	 * Atributo gerado a partir da coluna MAX_DT.
	 */
	@EmbeddedId
	@GeneratedValue(generator = "VwPmsVoucherCotacaoMoedaSeq")
	@SequenceGenerator(name = "VwPmsVoucherCotacaoMoedaSeq", sequenceName = "SQ_GAE_KEY", allocationSize = 1)
	@AttributeOverrides({
			@AttributeOverride(name = "key", column = @Column(name = "GAE_KEY", length = 58)),
			@AttributeOverride(name = "codigoMoeda", column = @Column(name = "MOED_CD_MOEDA", precision = 18, scale = 0)),
			@AttributeOverride(name = "dataIndice", column = @Column(name = "VAL_DT_INDICE", length = 7)),
			@AttributeOverride(name = "reValor", column = @Column(name = "VAL_RE_VALOR", precision = 18, scale = 8)),
			@AttributeOverride(name = "stSigla", column = @Column(name = "IND_ST_SIGLA", length = 10)),
			@AttributeOverride(name = "", column = @Column(name = "ATUALIZACAO", length = 8)),
			@AttributeOverride(name = "data", column = @Column(name = "MAX_DT", length = 7)) })
	private VwPmsCotacaoMoedaId id;

	/**
	 * Construtor default.
	 */
	public VwPmsCotacaoMoeda() {
	}

	/**
	 * Construtor com preenchimento da entidade.
	 * 
	 * @param id
	 *            Valor do atributo id;
	 */
	public VwPmsCotacaoMoeda(VwPmsCotacaoMoedaId id) {
		this.id = id;
	}

	/**
	 * Obtem o valor do atributo id.<BR>
	 * Atributo gerado a partir da coluna MAX_DT.
	 * 
	 * @return Valor do atributo id.
	 */
	public VwPmsCotacaoMoedaId getId() {
		return this.id;
	}

	/**
	 * Atualiza o valor do atributo id.<BR>
	 * Atributo gerado a partir da coluna MAX_DT.
	 * 
	 * @param id
	 *            Novo valor para o atributo id.
	 */
	public void setId(VwPmsCotacaoMoedaId id) {
		this.id = id;
	}

	/**
	 * @see Object#toString()
	 */
	@Override
	public String toString() {
		StringBuffer buffer = new StringBuffer();

		buffer.append(getClass().getName()).append("@")
				.append(Integer.toHexString(hashCode())).append(" [");
		buffer.append("id").append("='").append(getId()).append("' ");
		buffer.append("]");

		return buffer.toString();
	}

}
