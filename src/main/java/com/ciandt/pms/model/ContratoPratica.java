/*
 * @(#) ContratoPratica.java
 * Copyright (c) 2008 Ci&T Software S/A.
 * All Rights Reserved.
 */
package com.ciandt.pms.model;

import com.ciandt.pms.Constants;
import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.LazyCollection;
import org.hibernate.annotations.LazyCollectionOption;
import org.hibernate.envers.Audited;
import org.hibernate.envers.RelationTargetAuditMode;

import javax.persistence.*;
import java.io.Serializable;
import java.math.BigDecimal;
import java.util.*;

/**
 * Entity gerado a partir da tabela CONTRATO_PRATICA. Relacao de Contratos X
 * Praticas
 *
 * @author Generated by Hibernate Tools 3.2.4.GA
 * @since 12/08/2009 17:14:06
 * @version 09/01/19 1.1 10:08:00
 */
@Entity
@Table(name = "CONTRATO_PRATICA")
@SqlResultSetMappings(@SqlResultSetMapping(name = "scalarContratoPratica"))
@NamedNativeQueries({
		@NamedNativeQuery(name = "ContratoPratica.findManagerContratoPraticaWithoutDealFiscal", query = "SELECT pe.pess_cd_login \n" +
				"  FROM pms20.contrato_pratica copr \n" +
				"  LEFT JOIN pms20.cpratica_dfiscal cpdf ON cpdf.copr_cd_contrato_pratica =  copr.copr_cd_contrato_pratica \n" +
				"  LEFT JOIN pms20.deal_fiscal df ON cpdf.defi_cd_deal_fiscal =  df.defi_cd_deal_fiscal \n" +
				" INNER JOIN pms20.mapa_alocacao maal ON maal.copr_cd_contrato_pratica = copr.copr_cd_contrato_pratica \n" +
				" INNER JOIN pms20.alocacao aloc ON aloc.maal_cd_mapa_alocacao =  maal.maal_cd_mapa_alocacao \n" +
				" INNER JOIN pms20.alocacao_periodo alpe ON alpe.aloc_cd_alocacao = aloc.aloc_cd_alocacao \n" +
				" inner join pms20.pratica p on copr.prat_cd_pratica = p.prat_cd_pratica \n" +
				" inner join pms20.pessoa pe on copr.pess_cd_gerente = pe.pess_cd_pessoa \n" +
				" WHERE df.defi_cd_deal_fiscal IS NULL \n" +
				"   and p.prat_in_ativo = 'A' and p.tipr_cd_tipo_pratica = 1 and copr.copr_in_ativo = 'A' \n" +
				"   AND alpe.alpe_dt_alocacao_periodo = trunc(sysdate,'MM') and aloc.aloc_vl_ur > 0 \n" +
				" GROUP BY pe.pess_cd_login, copr.copr_nm_contrato_pratica \n" +
				"HAVING SUM(alpe.alpe_pr_alocacao_periodo) > 0  ",resultSetMapping = "scalarContratoPratica"),
		@NamedNativeQuery(name = "ContratoPratica.findContratoPraticaWithoutDealFiscal", query = "SELECT copr.copr_nm_contrato_pratica, \n" +
				"       SUM(alpe.alpe_pr_alocacao_periodo) total_alocado \n" +
				"  FROM pms20.contrato_pratica copr \n" +
				"  LEFT JOIN pms20.cpratica_dfiscal cpdf ON cpdf.copr_cd_contrato_pratica =  copr.copr_cd_contrato_pratica \n" +
				"  LEFT JOIN pms20.deal_fiscal df ON cpdf.defi_cd_deal_fiscal =  df.defi_cd_deal_fiscal \n" +
				" INNER JOIN pms20.mapa_alocacao maal ON maal.copr_cd_contrato_pratica = copr.copr_cd_contrato_pratica \n" +
				" INNER JOIN pms20.alocacao aloc ON aloc.maal_cd_mapa_alocacao =  maal.maal_cd_mapa_alocacao \n" +
				" INNER JOIN pms20.alocacao_periodo alpe ON alpe.aloc_cd_alocacao = aloc.aloc_cd_alocacao \n" +
				" inner join pms20.pratica p on copr.prat_cd_pratica = p.prat_cd_pratica \n" +
				"  inner join pms20.pessoa pe on copr.pess_cd_gerente = pe.pess_cd_pessoa \n" +
				" WHERE df.defi_cd_deal_fiscal IS NULL \n" +
				"   and p.prat_in_ativo = 'A' and p.tipr_cd_tipo_pratica = 1 and copr.copr_in_ativo = 'A'  \n" +
				"   AND alpe.alpe_dt_alocacao_periodo = trunc(sysdate,'MM') and aloc.aloc_vl_ur > 0  \n" +
				"   and pe.pess_cd_login = :login \n" +
				" GROUP BY copr.copr_nm_contrato_pratica \n" +
				"HAVING SUM(alpe.alpe_pr_alocacao_periodo) > 0 ",resultSetMapping = "scalarContratoPratica"),
		@NamedNativeQuery(name = "ContratoPratica.findProspectMapWithAllocation", query =
				"SELECT maal.MAAL_TX_TITULO, pe.PESS_CD_LOGIN, cl.CELU_NM_CENTRO_LUCRO, SUM(alpe.alpe_pr_alocacao_periodo) total_alocado\n" +
				"    FROM pms20.contrato_pratica copr \n" +
				"		INNER JOIN pms20.mapa_alocacao maal ON maal.copr_cd_contrato_pratica = copr.copr_cd_contrato_pratica \n" +
				"		INNER JOIN pms20.alocacao aloc ON aloc.maal_cd_mapa_alocacao =  maal.maal_cd_mapa_alocacao \n" +
				"		INNER JOIN pms20.alocacao_periodo alpe ON alpe.aloc_cd_alocacao = aloc.aloc_cd_alocacao \n" +
				"		inner join pms20.pratica p on copr.prat_cd_pratica = p.prat_cd_pratica \n" +
				"		inner join pms20.pessoa pe on copr.pess_cd_gerente = pe.pess_cd_pessoa \n" +
				"		inner join pms20.RECURSO r ON r.RECU_CD_RECURSO = aloc.RECU_CD_RECURSO AND r.RECU_IN_TIPO_RECURSO = 'PE' \n" +
				"       left join pms20.CONTRATO_PRATICA_CENTRO_LUCRO cpcl ON cpcl.COPR_CD_CONTRATO_PRATICA = copr.COPR_CD_CONTRATO_PRATICA\n" +
				"       left join pms20.CENTRO_LUCRO cl ON cl.CELU_CD_CENTRO_LUCRO = cpcl.CELU_CD_CENTRO_LUCRO\n" +
				"    WHERE copr.copr_in_ativo = 'P'\n" +
				"	   AND alpe.alpe_dt_alocacao_periodo = trunc(sysdate,'MM') \n" +
				"      and alpe.alpe_pr_alocacao_periodo > 0 \n" +
				"      and cl.NACL_CD_NATUREZA = 3\n" +
				"      and sysdate between cpcl.CPCL_DT_INICIO_VIGENCIA and nvl(cpcl.CPCL_DT_FIM_VIGENCIA, sysdate + 30)\n" +
				"	GROUP BY copr.copr_nm_contrato_pratica, maal.MAAL_TX_TITULO, pe.PESS_CD_LOGIN, cl.CELU_NM_CENTRO_LUCRO\n" +
				"HAVING SUM(alpe.alpe_pr_alocacao_periodo) > 0", resultSetMapping = "scalarContratoPratica"),
		@NamedNativeQuery(name = "ContratoPratica.findActualBusinessManagerContratoPratica", query = "SELECT p.pess_tx_email \n" +
				"  FROM pms20.contrato_pratica_centro_lucro cpcl  \n" +
				"  INNER JOIN pms20.centro_lucro cl on cpcl.cpcl_dt_fim_vigencia is null and cl.nacl_cd_natureza = 3 and cpcl.celu_cd_centro_lucro = cl.celu_cd_centro_lucro \n" +
				"  INNER JOIN pms20.pessoa p on cl.celu_nm_centro_lucro = p.pess_cd_login \n" +
				" WHERE cpcl.copr_cd_contrato_pratica = :contratoPratica ",resultSetMapping = "scalarContratoPratica")
})
@NamedQueries({
		@NamedQuery(name = "ContratoPratica.findAllComplete", query = "SELECT t FROM ContratoPratica t "
				+ "WHERE (t.indicadorStatus = 'C') "
				+ "ORDER BY t.nomeContratoPratica ASC "),

		@NamedQuery(name = "ContratoPratica.findAllCompleteForCombobox", query = "SELECT new ContratoPratica(t.codigoContratoPratica, t.nomeContratoPratica) FROM ContratoPratica t "
				+ "WHERE (t.indicadorStatus = 'C') "
				+ "ORDER BY t.nomeContratoPratica ASC "),

		@NamedQuery(name = "ContratoPratica.findAll", query = "SELECT t FROM ContratoPratica t "
				+ " ORDER BY t.nomeContratoPratica ASC "),

		@NamedQuery(name = "ContratoPratica.findAllForComboBox", query = "SELECT new ContratoPratica(t.codigoContratoPratica, t.nomeContratoPratica) FROM ContratoPratica t "
				+ " ORDER BY t.nomeContratoPratica ASC "),

		@NamedQuery(name = "ContratoPratica.findByPraticaAndContrato", query = "SELECT cp FROM ContratoPratica cp "
				+ "WHERE cp.pratica.codigoPratica = ? "
				+ "AND cp.msa.codigoMsa = ? "
				+ " AND cp.indicadorStatus = 'C'"
				+ "ORDER BY cp.nomeContratoPratica ASC "),

        @NamedQuery(name = "ContratoPratica.findByPratica", query = "SELECT cp FROM ContratoPratica cp "
                + "WHERE cp.pratica.codigoPratica = ? "
                + "ORDER BY cp.nomeContratoPratica ASC "),

		@NamedQuery(name = "ContratoPratica.findByContrato", query = "SELECT cp FROM ContratoPratica cp "
				+ "WHERE cp.msa.codigoMsa = ? "
				+ " AND cp.indicadorStatus = 'C' "
				+ " AND cp.indicadorAtivo = 'A' "
				+ "ORDER BY cp.nomeContratoPratica ASC "),

		@NamedQuery(name = "ContratoPratica.findAllContratoPraticaActive", query = "SELECT cp FROM ContratoPratica cp "
				+ "WHERE  "
				+ "  cp.indicadorAtivo = 'A' "
				+ "ORDER BY cp.nomeContratoPratica ASC "),

		@NamedQuery(name = "ContratoPratica.findByFilterFetch", query = "SELECT distinct cp FROM ContratoPratica cp "
				+ " LEFT JOIN FETCH cp.pratica"
				+ " LEFT JOIN FETCH cp.msa"
				+ " LEFT JOIN FETCH cp.convergencias cov "
				+ " LEFT JOIN FETCH cov.grupoCusto gc "
				+ " LEFT JOIN cp.contratoPraticaCentroLucros contratoPraticaCL "
				+ " LEFT JOIN contratoPraticaCL.centroLucro cl "
				+ " WHERE (UPPER(cp.nomeContratoPratica) like '%'||TRIM(UPPER(:nomeContratoPratica))||'%' OR (:nomeContratoPratica is null)) "
				+ " AND ( (cp.msa.codigoMsa = :idMsa) OR (:idMsa = 0L) ) "
				+ " AND ( (cp.pratica.codigoPratica = :idPratica) OR (:idPratica = 0L) ) "
				+ " AND (UPPER(cp.indicadorStatus) like '%'||TRIM(UPPER(:indicadorStatus))||'%' OR (:indicadorStatus is null)) "
				+ " AND ( (cp.msa.cliente.codigoCliente = :idCliente) OR (:idCliente = 0L) ) "
				+ " AND ( (cl.codigoCentroLucro = :idCentroLucro) OR (:idCentroLucro = 0L) ) "
				+ " AND ( (cl.naturezaCentroLucro.codigoNatureza = :idNatureza) OR (:idNatureza = 0L) ) "
				+ " AND ( (gc.codigoGrupoCusto = :idGrupoCusto) OR (:idGrupoCusto = 0L) ) "
				+ " AND (UPPER(cp.indicadorAtivo) like '%'||TRIM(UPPER(:indicadorAtivo))||'%' OR (:indicadorAtivo is null)) "
				+ " AND ( contratoPraticaCl.dataFimVigencia IS NULL ) "
				+ " AND ( cp.indicadorDeleteLogico = 'N' ) "
				+ " AND ( cp.indicadorWorkAtRisk IN (:indicadorWorkAtRiskFilter)) "
				+ " ORDER BY cp.nomeContratoPratica ASC "),

		@NamedQuery(name = "ContratoPratica.findByCentroLucro", query = "SELECT cp FROM ContratoPratica cp "
				+ " JOIN cp.centroLucros centroLucro "
				+ " WHERE centroLucro = ? AND cp.indicadorStatus = 'C' "
				+ " ORDER BY cp.nomeContratoPratica ASC "),

		@NamedQuery(name = "ContratoPratica.findByNatureza", query = "SELECT cp FROM ContratoPratica cp "
				+ " JOIN cp.centroLucros centroLucro "
				+ " WHERE centroLucro.naturezaCentroLucro = ? AND cp.indicadorStatus = 'C' "
				+ " ORDER BY cp.nomeContratoPratica ASC "),

		@NamedQuery(name = "ContratoPratica.findByCliente", query = "SELECT cp FROM ContratoPratica cp "
				+ "WHERE cp.msa.cliente.codigoCliente = ? "
				+ "AND cp.indicadorStatus = 'C' "
				+ "AND cp.indicadorDeleteLogico = 'N' "
				+ "AND cp.indicadorAtivo = 'A' "
				+ "ORDER BY cp.nomeContratoPratica ASC "),

		@NamedQuery(name = "ContratoPratica.findSemFiscalDeal", query = "SELECT cp FROM ContratoPratica cp "
				+ "LEFT JOIN FETCH cp.msa msa "
				+ "LEFT JOIN FETCH msa.cliente cli "
				+ "WHERE cp.codigoContratoPratica NOT IN ("
				+ "SELECT cpdf.contratoPratica.codigoContratoPratica FROM CpraticaDfiscal cpdf )"),

		@NamedQuery(name = "ContratoPratica.findAllWithMapaAlocacao", query = "SELECT cp FROM ContratoPratica cp "
				+ "WHERE EXISTS ( "
				+ "  SELECT maal.contratoPratica.codigoContratoPratica FROM MapaAlocacao maal "
				+ "  WHERE maal.contratoPratica.codigoContratoPratica = cp.codigoContratoPratica )"
				+ "ORDER BY cp.nomeContratoPratica ASC "),

		@NamedQuery(name = "ContratoPratica.findByChargebackAndPeriod", query = "SELECT distinct cp FROM ContratoPratica cp "
				+ "JOIN cp.chargebackContratoPraticas chargeback "
				+ " WHERE chargeback.tiRecurso.codigoTiRecurso = ? "
				+ "     AND TRUNC(chargeback.dataMes) between TRUNC(?) AND TRUNC(?) "
				+ " ORDER BY cp.nomeContratoPratica ASC "),

		@NamedQuery(name = "ContratoPratica.findByName", query = "SELECT cp FROM ContratoPratica cp "
				+ " WHERE upper(cp.nomeContratoPratica) = upper(?) "),

		@NamedQuery(name = "ContratoPratica.findAllCompleteAndActive", query = "SELECT t FROM ContratoPratica t "
				+ "WHERE (t.indicadorStatus = 'C') "
				+ "AND t.indicadorDeleteLogico = 'N' "
				+ "ORDER BY t.nomeContratoPratica ASC "),

		@NamedQuery(name = "ContratoPratica.findByAproverRescinded", query =
				  "SELECT cp FROM ContratoPratica cp, Pessoa ps "
				+ "WHERE (cp.aprovador.codigoPessoa = ps.codigoPessoa OR cp.gerenteAprovador.codigoPessoa = ps.codigoPessoa) "
				+ "AND ps.dataRescisao is not null "
				+ "AND cp.indicadorAtivo = 'A' "
				+ "AND cp.indicadorDeleteLogico = 'N' "
				+ "ORDER BY cp.nomeContratoPratica ASC ")

})
public class ContratoPratica implements Serializable, Cloneable {

	/** Valor do serialVersionUID. */
	private static final long serialVersionUID = 1L;

	/** Constante para NamedQuery "ContratoPratica.findAll". */
	public static final String FIND_ALL = "ContratoPratica.findAll";

	/** Constante para NamedQuery "ContratoPratica.findByPraticaAndContrato". */
	public static final String FIND_BY_PRATICA_AND_CONTRATO = "ContratoPratica.findByPraticaAndContrato";

    /** Constante para NamedQuery "ContratoPratica.findByPratica". */
	public static final String FIND_BY_PRATICA = "ContratoPratica.findByPratica";

	/** Constante para NamedQuery "ContratoPratica.findByFilterFetch". */
	public static final String FIND_BY_FILTER_FETCH = "ContratoPratica.findByFilterFetch";

	/** Constante para NamedQuery "ContratoPratica.findAll". */
	public static final String FIND_ALL_COMPLETE = "ContratoPratica.findAllComplete";

	public static final String FIND_ALL_FOR_COMBOBOX = "ContratoPratica.findAllForComboBox";

	/** Constante para NamedQuery "ContratoPratica.findByCliente". */
	public static final String FIND_BY_CLIENTE = "ContratoPratica.findByCliente";

	/** Constante para NamedQuery "ContratoPratica.findByCentroLucro". */
	public static final String FIND_BY_CENTRO_LUCRO = "ContratoPratica.findByCentroLucro";

	/** Constante para NamedQuery "ContratoPratica.findByNatureza". */
	public static final String FIND_BY_NATUREZA = "ContratoPratica.findByNatureza";

	/** Constante para NamedQuery "ContratoPratica.findByContrato". */
	public static final String FIND_BY_CONTRATO = "ContratoPratica.findByContrato";

	/** Constante para NamedQuery "ContratoPratica.findSemFiscalDeal". */
	public static final String FIND_SEM_FISCAL_DEAL = "ContratoPratica.findSemFiscalDeal";

	/** Constante para NamedQuery "ContratoPratica.findAllWithMapaAlocacao". */
	public static final String FIND_ALL_WITH_MAPA_ALOCACAO = "ContratoPratica.findAllWithMapaAlocacao";

	/** Constante para NamedQuery "ContratoPratica.findByChargebackAndPeriod". */
	public static final String FIND_BY_TIRECURSO_AND_PERIOD = "ContratoPratica.findByChargebackAndPeriod";

	/** Constante para NamedQuery "ContratoPratica.findByName". */
	public static final String FIND_BY_NAME = "ContratoPratica.findByName";

	/** Constante para NamedQuery "ContratoPratica.findAllCompleteAndActive". */
	public static final String FIND_ALL_COMPLETE_AND_ACTIVE = "ContratoPratica.findAllCompleteAndActive";

	/** Constante para NamedQuery "ContratoPratica.findAllCompleteForCombobox". */
	public static final String FIND_ALL_COMPLETE_FOR_COMBOBOX = "ContratoPratica.findAllCompleteForCombobox";

	public static final String FIND_MANAGER_CP_WITHOUT_DEAL_FISCAL = "ContratoPratica.findManagerContratoPraticaWithoutDealFiscal";

	public static final String FIND_CP_WITHOUT_DEAL_FISCAL = "ContratoPratica.findContratoPraticaWithoutDealFiscal";

	public static final String FIND_PROSPECT_MAP_WITH_ALLOCATION = "ContratoPratica.findProspectMapWithAllocation";

	public static final String FIND_ACTUAL_BUSINESS_MANAGER_CP = "ContratoPratica.findActualBusinessManagerContratoPratica";

	/** Constante para NamedQuery "ContratoPratica.findAllContratoActive". */
	public static final String FIND_ALL_ACTIVE = "ContratoPratica.findAllContratoPraticaActive";

	public static final String FIND_BY_APPROVER_RESCINDED = "ContratoPratica.findByAproverRescinded";

	/**
	 * Atributo transit�rio / calculado Forecast Sales Tax.
	 */
	@Transient
	private BigDecimal forecastSalesTax = BigDecimal.valueOf(0);

	/**
	 * Lista de CpraticaDfiscal.
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "contratoPratica")
	private List<CpraticaDfiscal> cpraticaDfiscals = new ArrayList<CpraticaDfiscal>(0);

	/**
	 * Lista de MapaAlocacao.
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "contratoPratica")
	private List<MapaAlocacao> mapaAlocacaos = new ArrayList<MapaAlocacao>(0);

	/**
	 * Lista de ItemFatura.
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "contratoPratica")
	private List<ItemFatura> itemFaturas = new ArrayList<ItemFatura>(0);

	/**
	 * Lista de Receita.
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "contratoPratica")
	private List<Receita> receitas = new ArrayList<Receita>(0);

	/**
	 * Lista de CustoPessoaCp.
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "contratoPratica")
	private List<CustoPessoaCp> custoPessoaCps = new ArrayList<CustoPessoaCp>(0);

	/**
	 * Lista de CustoRealizado.
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "contratoPratica")
	private List<CustoRealizado> custoRealizados = new ArrayList<CustoRealizado>(0);

	/**
	 * Lista de ChargebackContratoPratica.
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "contratoPratica")
	private List<ChargebackContratoPratica> chargebackContratoPraticas = new ArrayList<ChargebackContratoPratica>(0);

	/**
	 * Lista de ContratoPraticaCentroLucro.
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "contratoPratica")
	private List<ContratoPraticaCentroLucro> contratoPraticaCentroLucros = new ArrayList<ContratoPraticaCentroLucro>(0);

	/**
	 * Lista de Convergencia.
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "contratoPratica")
	private List<Convergencia> convergencias = new ArrayList<Convergencia>();

	/**
	 * Relacionamento muitos pra muitos.
	 */
	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "CONTRATO_PRATICA_CENTRO_LUCRO", joinColumns = { @JoinColumn(name = "COPR_CD_CONTRATO_PRATICA", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "CELU_CD_CENTRO_LUCRO", nullable = false, updatable = false) })
	private Set<CentroLucro> centroLucros = new HashSet<CentroLucro>(0);

	/**
	 * Relacionamento muitos pra muitos.
	 */
	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "CONTRATO_PRATICA_IMPOSTO", joinColumns = { @JoinColumn(name = "COPR_CD_CONTRATO_PRATICA", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "IMPO_CD_IMPOSTO", nullable = false, updatable = false) })
	private List<Imposto> impostos = new ArrayList<Imposto>(0);

	/**
	 * Lista de ContratoPraticaGrupoCusto.
	 */
	@OrderBy("dataInicioVigencia, ASC")
	@OneToMany(fetch = FetchType.EAGER, mappedBy = "contratoPratica")
	@Cascade(org.hibernate.annotations.CascadeType.ALL)
	@LazyCollection(LazyCollectionOption.FALSE)
	private List<ContratoPraticaGrupoCusto> contratoPraticaGrupoCustos = new ArrayList<ContratoPraticaGrupoCusto>(0);

    /**
     * Atributo gerado a partir da tabela UPLOAD_DESPESA.
     */
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "contratoPratica")
    private List<UploadDespesa> uploadDespesas = new ArrayList<UploadDespesa>(0);

	/**
	 * Atributo gerado a partir da coluna COPR_CD_CONTRATO_PRATICA. Codigo do
	 * Contrato_Pratica
	 */
	@Id
	@GeneratedValue(generator = "ContratoPraticaSeq")
	@SequenceGenerator(name = "ContratoPraticaSeq", sequenceName = "SQ_COPR_CD_CONTRATO_PRATICA", allocationSize = 1)
	@Column(name = "COPR_CD_CONTRATO_PRATICA", unique = true, nullable = false, precision = 18, scale = 0)
	private Long codigoContratoPratica;

	/**
	 * Atributo gerado a partir da coluna MSAA_CD_MSA. Codigo do Contrato
	 */
	@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "MSAA_CD_MSA")
	private Msa msa;

	/**
	 * Atributo gerado a partir da coluna PRAT_CD_PRATICA. Codigo da Pratica
	 */
	@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "PRAT_CD_PRATICA")
	private Pratica pratica;

	/**
	 * Atributo gerado a partir da coluna COPR_NM_CONTRATO_PRATICA.
	 */
	@Audited
	@Column(name = "COPR_NM_CONTRATO_PRATICA", unique = true, length = 240)
	private String nomeContratoPratica;

	/**
	 * Atributo gerado a partir da coluna COPR_DS_CONTRATO_PRATICA.
	 */
	@Audited
	@Column(name = "COPR_DS_CONTRATO_PRATICA", length = 200)
	private String descricaoContratoPratica;

	/**
	 * Atributo gerado a partir da coluna COPR_IN_STATUS.
	 */
	@Audited
	@Column(name = "COPR_IN_STATUS", length = 2)
	private String indicadorStatus;

	/**
	 * Atributo gerado a partir da coluna COPR_IN_ATIVO.
	 */
	@Audited
    @Column(name = "COPR_IN_ATIVO", nullable = false, length = 1)
    private String indicadorAtivo;

	/**
	 * Atributo gerado a partir da coluna COPR_IN_DELETE_LOGICO.
	 */
	@Audited
	@Column(name = "COPR_IN_DELETE_LOGICO", length = 1)
	private String indicadorDeleteLogico;

	/**
	 * Atributo gerado a partir da coluna COPR_NM_COMPOUND.
	 */
	@Audited
	@Column(name = "COPR_NM_COMPOUND", length = 240)
	private String nomeCompound;

	/**
	 * Atributo gerado a partir da coluna PESS_CD_APROVADOR.
	 */
	@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "PESS_CD_APROVADOR")
	private Pessoa aprovador;

	/**
	 * Atributo gerado a partir da coluna PESS_CD_GERENTE.
	 */
	@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "PESS_CD_GERENTE")
	private Pessoa gerenteAprovador;

	/**
	 * Atributo gerado a partir do relacionamento ContratoPratica com
	 * OrcDespesaCl.
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "contratoPratica")
	private Set<ContratoPraticaOrcDespCl> contratoPraticaOrcDespCls = new HashSet<ContratoPraticaOrcDespCl>(0);

	/**
	 * Atributo gerado a partir da coluna COPR_DT_INICIAL.
	 */
	@Audited
	@Temporal(TemporalType.DATE)
	@Column(name = "COPR_DT_INICIAL", length = 7)
	private Date dataInicial;

	/**
	 * Atributo gerado a partir da coluna COPR_DT_INICIAL.
	 */
	@Audited
	@Temporal(TemporalType.DATE)
	@Column(name = "COPR_DT_FINAL", length = 7)
	private Date dataFinal;

	/**
	 * Atributo gerado a partir da coluna COPR_IN_STATUS.
	 */
	@Audited
	@Column(name = "COPR_IN_MULTI_DEAL_FISCAL", length = 2)
	private String indicadorMultiDealFiscal;

	/**
	 * Atributo gerado a partir da coluna COPR_IN_STATUS.
	 */
	@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "TIMO_CD_TIPO_MODELO_NEGOCIO", nullable = false)
	private TipoModeloNegocio tipoModeloNegocio;

	/**
	 * Atributo gerado a partir da coluna COPR_IN_REEMBOLSAVEL.
	 */
	@Audited
	@Column(name = "COPR_IN_REEMBOLSAVEL", length = 1)
	private String indicadorReembolsavel;

	@Column(name = "COPR_IN_APROVA_AJUSTE_RECEITA", length = 1)
	private String indicadorAprovaAjusteReceita;

	/**
	 * Atributo gerado a partir da coluna COPR_NM_DATA_PRIVACY.
	 */
	@Audited
	@Column(name = "COPR_NM_DATA_PRIVACY", length = 100)
	private String dataPrivacy;

	@Column(name = "COPR_IN_WORK_AT_RISK", length = 1)
	private String indicadorWorkAtRisk;

	@Transient
	private Boolean activeView;

	/**
	 * Construtor default.
	 */
	public ContratoPratica() {}

	public ContratoPratica(Long codigoContratoPratica, String nomeContratoPratica) {
		this.codigoContratoPratica = codigoContratoPratica;
		this.nomeContratoPratica = nomeContratoPratica;
	}

	public ContratoPratica(Long codigoContratoPratica, String nomeContratoPratica, Msa msa) {
		this.codigoContratoPratica = codigoContratoPratica;
		this.nomeContratoPratica = nomeContratoPratica;
		this.msa = msa;
	}

	/**
	 * @return the forecastSalesTax
	 */
	public BigDecimal getForecastSalesTax() {
		return forecastSalesTax;
	}

	/**
	 * @param forecastSalesTax
	 *            the forecastSalesTax to set
	 */
	public void setForecastSalesTax(final BigDecimal forecastSalesTax) {
		this.forecastSalesTax = forecastSalesTax;
	}

	/**
	 * @return the codigoContratoPratica
	 */
	public Long getCodigoContratoPratica() {
		return codigoContratoPratica;
	}

	/**
	 * @param codigoContratoPratica
	 *            the codigoContratoPratica to set
	 */
	public void setCodigoContratoPratica(final Long codigoContratoPratica) {
		this.codigoContratoPratica = codigoContratoPratica;
	}

	/**
	 * @return the msa
	 */
	public Msa getMsa() {
		return msa;
	}

	/**
	 * @param msa
	 *            the msa to set
	 */
	public void setMsa(final Msa msa) {
		this.msa = msa;
	}

	public TipoModeloNegocio getTipoModeloNegocio() {return tipoModeloNegocio;}

	public void setTipoModeloNegocio(TipoModeloNegocio tipoModeloNegocio) { this.tipoModeloNegocio = tipoModeloNegocio;}

	/**
	 * @return the pratica
	 */
	public Pratica getPratica() {
		return pratica;
	}

	/**
	 * @param pratica
	 *            the pratica to set
	 */
	public void setPratica(final Pratica pratica) {
		this.pratica = pratica;
	}

	/**
	 * @return the nomeContratoPratica
	 */
	public String getNomeContratoPratica() {
		return nomeContratoPratica;
	}

	/**
	 * @param nomeContratoPratica
	 *            the nomeContratoPratica to set
	 */
	public void setNomeContratoPratica(final String nomeContratoPratica) {
		this.nomeContratoPratica = nomeContratoPratica;
	}

	/**
	 * @return the descricaoContratoPratica
	 */
	public String getDescricaoContratoPratica() {
		return descricaoContratoPratica;
	}

	/**
	 * @param descricaoContratoPratica
	 *            the descricaoContratoPratica to set
	 */
	public void setDescricaoContratoPratica(
			final String descricaoContratoPratica) {
		this.descricaoContratoPratica = descricaoContratoPratica;
	}

	/**
	 * @return the indicadorStatus
	 */
	public String getIndicadorStatus() {
		return indicadorStatus;
	}

	/**
	 * @param indicadorStatus
	 *            the indicadorStatus to set
	 */
	public void setIndicadorStatus(final String indicadorStatus) {
		this.indicadorStatus = indicadorStatus;
	}

	/**
	 * @param dataInicial
	 */
	public void setDataInicial(Date dataInicial) {
		this.dataInicial = dataInicial;
	}

	/**
	 * @return the dataInicial
	 */
	public Date getDataInicial() {
		return dataInicial;
	}

	/**
	 * Obtem o valor do atributo indicadorDeleteLogico.<BR>
	 * Atributo gerado a partir da coluna COPR_IN_DELETE_LOGICO.
	 *
	 * @return Valor do atributo indicadorDeleteLogico.
	 */
	public String getIndicadorDeleteLogico() {
		return this.indicadorDeleteLogico;
	}

	/**
	 * Atualiza o valor do atributo indicadorDeleteLogico.<BR>
	 * Atributo gerado a partir da coluna COPR_IN_DELETE_LOGICO.
	 *
	 * @param indicadorDeleteLogico
	 *            Novo valor para o atributo indicadorDeleteLogico.
	 */
	public void setIndicadorDeleteLogico(String indicadorDeleteLogico) {
		this.indicadorDeleteLogico = indicadorDeleteLogico;
	}

	/**
	 * @return the cpraticaDfiscals
	 */
	public List<CpraticaDfiscal> getCpraticaDfiscals() {
		return cpraticaDfiscals;
	}

	/**
	 * @param cpraticaDfiscals
	 *            the cpraticaDfiscals to set
	 */
	public void setCpraticaDfiscals(final List<CpraticaDfiscal> cpraticaDfiscals) {
		this.cpraticaDfiscals = cpraticaDfiscals;
	}

	/**
	 * @return the mapaAlocacaos
	 */
	public List<MapaAlocacao> getMapaAlocacaos() {
		return mapaAlocacaos;
	}

	/**
	 * @param mapaAlocacaos
	 *            the mapaAlocacaos to set
	 */
	public void setMapaAlocacaos(final List<MapaAlocacao> mapaAlocacaos) {
		this.mapaAlocacaos = mapaAlocacaos;
	}

	/**
	 * @return the itemFaturas
	 */
	public List<ItemFatura> getItemFaturas() {
		return itemFaturas;
	}

	/**
	 * @param itemFaturas
	 *            the itemFaturas to set
	 */
	public void setItemFaturas(final List<ItemFatura> itemFaturas) {
		this.itemFaturas = itemFaturas;
	}

	/**
	 * @return the receitas
	 */
	public List<Receita> getReceitas() {
		return receitas;
	}

	/**
	 * @param receitas
	 *            the receitas to set
	 */
	public void setReceitas(final List<Receita> receitas) {
		this.receitas = receitas;
	}

	/**
	 * @return the custoPessoaCps
	 */
	public List<CustoPessoaCp> getCustoPessoaCps() {
		return custoPessoaCps;
	}

	/**
	 * @param custoPessoaCps
	 *            the custoPessoaCps to set
	 */
	public void setCustoPessoaCps(final List<CustoPessoaCp> custoPessoaCps) {
		this.custoPessoaCps = custoPessoaCps;
	}

	/**
	 * @return the custoRealizados
	 */
	public List<CustoRealizado> getCustoRealizados() {
		return custoRealizados;
	}

	/**
	 * @param custoRealizados
	 *            the custoRealizados to set
	 */
	public void setCustoRealizados(final List<CustoRealizado> custoRealizados) {
		this.custoRealizados = custoRealizados;
	}

	/**
	 * @return the chargebackContratoPraticas
	 */
	public List<ChargebackContratoPratica> getChargebackContratoPraticas() {
		return chargebackContratoPraticas;
	}

	/**
	 * @param chargebackContratoPraticas
	 *            the chargebackContratoPraticas to set
	 */
	public void setChargebackContratoPraticas(
			final List<ChargebackContratoPratica> chargebackContratoPraticas) {
		this.chargebackContratoPraticas = chargebackContratoPraticas;
	}

	/**
	 * @return the contratoPraticaCentroLucros
	 */
	public List<ContratoPraticaCentroLucro> getContratoPraticaCentroLucros() {
		return contratoPraticaCentroLucros;
	}

	/**
	 * @param contratoPraticaCentroLucros
	 *            the contratoPraticaCentroLucros to set
	 */
	public void setContratoPraticaCentroLucros(
			final List<ContratoPraticaCentroLucro> contratoPraticaCentroLucros) {
		this.contratoPraticaCentroLucros = contratoPraticaCentroLucros;
	}

	/**
	 * @return the centroLucros
	 */
	public Set<CentroLucro> getCentroLucros() {
		return centroLucros;
	}

	/**
	 * @param centroLucros
	 *            the centroLucros to set
	 */
	public void setCentroLucros(final Set<CentroLucro> centroLucros) {
		this.centroLucros = centroLucros;
	}

	/**
	 * @return the impostos
	 */
	public List<Imposto> getImpostos() {
		return impostos;
	}

	/**
	 * @param impostos
	 *            the impostos to set
	 */
	public void setImpostos(final List<Imposto> impostos) {
		this.impostos = impostos;
	}

	/**
	 * Obtem o valor do atributo nomeCompound.<BR>
	 * Atributo gerado a partir da coluna COPR_NM_COMPOUND.
	 *
	 * @return Valor do atributo nomeCompound.
	 */
	public String getNomeCompound() {
		return this.nomeCompound;
	}

	/**
	 * Atualiza o valor do atributo nomeCompound.<BR>
	 * Atributo gerado a partir da coluna COPR_NM_COMPOUND.
	 *
	 * @param nomeCompound
	 *            Novo valor para o atributo nomeCompound.
	 */
	public void setNomeCompound(final String nomeCompound) {
		this.nomeCompound = nomeCompound;
	}

	/**
	 * Obtem o valor do atributo contratoPraticaOrcDespCls.<BR>
	 *
	 * @return Valor do atributo contratoPraticaOrcDespCls.
	 */
	public Set<ContratoPraticaOrcDespCl> getContratoPraticaOrcDespCls() {
		return this.contratoPraticaOrcDespCls;
	}

	/**
	 * Atualiza o valor do atributo
	 * {@link ContratoPratica#contratoPraticaOrcDespCls}.<BR>
	 *
	 * @param contratoPraticaOrcDespCls
	 *            Novo valor para o atributo contratoPraticaOrcDespCls.
	 */
	public void setContratoPraticaOrcDespCls(
			final Set<ContratoPraticaOrcDespCl> contratoPraticaOrcDespCls) {
		this.contratoPraticaOrcDespCls = contratoPraticaOrcDespCls;
	}

	/**
	 * Obtem o valor do atributo {@link ContratoPratica#aprovador}.<BR>
	 *
	 * @return the aprovador
	 */
	public Pessoa getAprovador() {
		return aprovador;
	}

	/**
	 * Atualiza o valor do atributo aprovador.<BR>
	 *
	 * @param aprovador
	 *            Novo valor para o atributo {@link ContratoPratica#aprovador}.
	 */
	public void setAprovador(Pessoa aprovador) {
		this.aprovador = aprovador;
	}

	/**
	 * Obtem o valor do atributo {@link ContratoPratica#gerenteAprovador}.<BR>
	 *
	 * @return the gerenteAprovador
	 */
	public Pessoa getGerenteAprovador() {
		return gerenteAprovador;
	}

	/**
	 * Atualiza o valor do atributo gerenteAprovador.<BR>
	 *
	 * @param gerenteAprovador
	 *            Novo valor para o atributo
	 *            {@link ContratoPratica#gerenteAprovador}.
	 */
	public void setGerenteAprovador(Pessoa gerenteAprovador) {
		this.gerenteAprovador = gerenteAprovador;
	}

	/**
	 * Obtem o valor do atributo {@link ContratoPratica#dataFinal}.<BR>
	 *
	 * @return the dataFinal
	 */
	public Date getDataFinal() {
		return dataFinal;
	}

	/**
	 * Atualiza o valor do atributo dataFinal.<BR>
	 *
	 * @param dataFinal
	 *            Novo valor para o atributo {@link ContratoPratica#dataFinal}.
	 */
	public void setDataFinal(Date dataFinal) {
		this.dataFinal = dataFinal;
	}



	/**
	 * Obtem o valor do atributo {@link ContratoPratica#convergencias}.<BR>
	 *
	 * @return the convergencias
	 */
	public List<Convergencia> getConvergencias() {
		return convergencias;
	}

	/**
	 * Atualiza o valor do atributo convergencias.<BR>
	 *
	 * @param convergencias
	 *            Novo valor para o atributo
	 *            {@link ContratoPratica#convergencias}.
	 */
	public void setConvergencias(List<Convergencia> convergencias) {
		this.convergencias = convergencias;
	}

	/**
	 * Obtem o valor do atributo {@link ContratoPratica#indicadorAtivo}.<BR>
	 *
	 * @return the indicadorAtivo
	 */
	public String getIndicadorAtivo() {
		return indicadorAtivo;
	}

	/**
	 * Atualiza o valor do atributo indicadorAtivo.<BR>
	 *
	 * @param indicadorAtivo
	 *            Novo valor para o atributo
	 *            {@link ContratoPratica#indicadorAtivo}.
	 */
	public void setIndicadorAtivo(String indicadorAtivo) {
		this.indicadorAtivo = indicadorAtivo;
	}

	/**
	 * @return the indicadorMultiDealFiscal
	 */
	public String getIndicadorMultiDealFiscal() {
		return indicadorMultiDealFiscal;
	}

	/**
	 * @param indicadorMultiDealFiscal
	 *            the indicadorMultiDealFiscal to set
	 */
	public void setIndicadorMultiDealFiscal(final String indicadorMultiDealFiscal) {
		this.indicadorMultiDealFiscal = indicadorMultiDealFiscal;
	}

	/**
	 * @return the indicadorReembolsavel
	 */
	public String getIndicadorReembolsavel() {
		return indicadorReembolsavel;
	}

	/**
	 * @param indicadorReembolsavel
	 *            the indicadorReembolsavel to set
	 */
	public void setIndicadorReembolsavel(final String indicadorReembolsavel) {
		this.indicadorReembolsavel = indicadorReembolsavel;
	}

	/**
	 * @return the indicadorAprovaAjusteReceita
	 */
	public String getIndicadorAprovaAjusteReceita() {
		return indicadorAprovaAjusteReceita;
	}

	/**
	 * @param indicadorAprovaAjusteReceita
	 */
	public void setIndicadorAprovaAjusteReceita(final String indicadorAprovaAjusteReceita) {
		this.indicadorAprovaAjusteReceita = indicadorAprovaAjusteReceita;
	}
	/**
	 * @param dataPrivacy
	 *            the dataPrivacy to set
	 */
	public void setDataPrivacy(final String dataPrivacy) {
		this.dataPrivacy = dataPrivacy;
	}

	/**
	 * @return the dataPrivacy
	 */
	public String getDataPrivacy() {
		return dataPrivacy;
	}

	/**
	 * @return the indicadorWorkAtRisk
	 */
	public String getIndicadorWorkAtRisk() {
		return indicadorWorkAtRisk;
	}

	/**
	 * @param indicadorWorkAtRisk
	 */
	public void setIndicadorWorkAtRisk(final String indicadorWorkAtRisk) {
		this.indicadorWorkAtRisk = indicadorWorkAtRisk;
	}

	/**
	 * @see Object#toString()
	 *
	 * @return objeto no formato de string
	 */
	@Override
	public String toString() {
		StringBuffer buffer = new StringBuffer();

		buffer.append(getClass().getName()).append("@")
				.append(Integer.toHexString(hashCode())).append(" [");
		buffer.append("codigoContratoPratica").append("='")
				.append(getCodigoContratoPratica()).append("' ");
		buffer.append("nomeContratoPratica").append("='")
				.append(getNomeContratoPratica()).append("' ");
		buffer.append("descricaoContratoPratica").append("='")
				.append(getDescricaoContratoPratica()).append("' ");
		buffer.append("indicadorStatus").append("='")
				.append(getIndicadorStatus()).append("' ");
		buffer.append("indicadorAtivo").append("='")
				.append(getIndicadorAtivo()).append("' ");
		buffer.append("indicadorDeleteLogico").append("='")
				.append(getIndicadorDeleteLogico()).append("' ");
		buffer.append("nomeCompound").append("='").append(getNomeCompound())
				.append("' ");
		buffer.append("dataPrivacy").append("='")
				.append(getDataPrivacy()).append("' ");
		buffer.append("]");

		return buffer.toString();
	}

	/**
	 * Obtem todos os {@link DealFiscal}s do {@link ContratoPratica}. Incluindo
	 * os INATIVOS.
	 *
	 * @return lista de {@link DealFiscal}
	 */
	public List<DealFiscal> getAllDealFiscals() {
		if (this.cpraticaDfiscals == null) {
			return null;
		}
		List<DealFiscal> dealFiscals = new ArrayList<DealFiscal>();
		for (CpraticaDfiscal cpdf : this.cpraticaDfiscals) {
			dealFiscals.add(cpdf.getDealFiscal());
		}
		return dealFiscals;
	}

	/**
	 * Obtem todos os {@link DealFiscal}s (ATIVOS) do {@link ContratoPratica}.
	 *
	 * @return lista de {@link DealFiscal}
	 */
	public List<DealFiscal> getAllActivesDealFiscals() {
		if (this.cpraticaDfiscals == null) {
			return null;
		}
		List<DealFiscal> dealFiscals = new ArrayList<DealFiscal>();
		for (CpraticaDfiscal cpdf : this.cpraticaDfiscals) {
			if (cpdf.getDealFiscal().getIndicadorStatus()
					.equals(Constants.ACTIVE)) {
				dealFiscals.add(cpdf.getDealFiscal());
			}
		}
		return dealFiscals;
	}

	@Transient
	public Convergencia getConvergencia() {
		if(convergencias!=null && !convergencias.isEmpty()) {
			return convergencias.get(0);
		}
		return null;
	}

	/**
	 * @return the contratoPraticaGrupoCustos
	 */
	public List<ContratoPraticaGrupoCusto> getContratoPraticaGrupoCustos() {
		return contratoPraticaGrupoCustos;
	}

	/**
	 * @param contratoPraticaGrupoCustos the contratoPraticaGrupoCustos to set
	 */
	public void setContratoPraticaGrupoCustos(
			List<ContratoPraticaGrupoCusto> contratoPraticaGrupoCustos) {
		this.contratoPraticaGrupoCustos = contratoPraticaGrupoCustos;
	}

	public Boolean getActiveView() {
		return activeView;
	}

	public void setActiveView(Boolean activeView) {
		this.activeView = activeView;
	}
}