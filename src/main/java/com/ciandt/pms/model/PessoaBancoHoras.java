
/*
 * @(#) PessoaBancoHoras.java
 * Copyright (c) 2008 Ci&T Software S/A.
 * All Rights Reserved.
 */
package com.ciandt.pms.model;

import java.math.BigDecimal;
import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;

import org.jsefa.csv.annotation.CsvDataType;
import org.jsefa.csv.annotation.CsvField;

import com.ciandt.pms.csv.util.CsvBigDecimalConverter;
import com.ciandt.pms.csv.util.CsvDateConverter;


/**
 * Entity gerado a partir da tabela PESSOA_BANCO_HORAS.
 *
 * @author Generated by Hibernate Tools 3.2.4.GA
 * @since 12/08/2010 10:25:55
 * @version 09/01/19 1.1 10:08:00
 */
@Entity
@Table(name = "PESSOA_BANCO_HORAS", uniqueConstraints = @UniqueConstraint(columnNames = {
        "PESS_CD_PESSOA", "PEBH_DT_MES", "PEBH_VL_FATOR" }))
@NamedQueries({ 
    @NamedQuery(name = "PessoaBancoHoras.findAll", query = "SELECT t FROM PessoaBancoHoras t"),
    
    @NamedQuery(name = "PessoaBancoHoras.findByFilter", query = "SELECT pebh FROM PessoaBancoHoras pebh "
        + " JOIN FETCH pebh.pessoa "
        + " WHERE (UPPER(pebh.pessoa.codigoLogin) like '%'||TRIM(UPPER(?))||'%' "
        + "   OR UPPER(pebh.pessoa.nomePessoa) like '%'||TRIM(UPPER(?))||'%' ) "
        + "   AND (TRUNC(pebh.dataMes) = TRUNC(?)) "
        + " ORDER BY pebh.dataMes ASC, pebh.pessoa.nomePessoa ASC "),
        
    @NamedQuery(name = "PessoaBancoHoras.findByDataMes", query = "SELECT pebh FROM PessoaBancoHoras pebh "
        + "WHERE (TRUNC(pebh.dataMes) = TRUNC(?)) "
        + "ORDER BY pebh.pessoa.nomePessoa ASC "),
     
    @NamedQuery(name = "PessoaBancoHoras.findUnique", query = "SELECT pebh FROM PessoaBancoHoras pebh "
        + "WHERE pebh.pessoa.codigoLogin = ? "
        + "  AND TRUNC(pebh.dataMes,'MM') = TRUNC(?,'MM') "
        + "  AND pebh.valorFator = ? ")
})
@CsvDataType
public class PessoaBancoHoras implements java.io.Serializable {
    
    // ========================================================================
    // BEGIN - Coloque aqui o codigo manual
    // ========================================================================
    
    /** Constante para NamedQuery "PessoaBancoHoras.findByFilter". */
    public static final String FIND_BY_FILTER = "PessoaBancoHoras.findByFilter";
    
    /** Constante para NamedQuery "PessoaBancoHoras.findUnique". */
    public static final String FIND_UNIQUE = "PessoaBancoHoras.findUnique";
    
    /** Constante para NamedQuery "PessoaBancoHoras.findByDataMes". */
    public static final String FIND_BY_DATA_MES = "PessoaBancoHoras.findByDataMes";
    
    // ========================================================================
    // END
    // ========================================================================

    /**
     * Valor do serialVersionUID.
     */
    private static final long serialVersionUID = 1L;

    /** 
     * Constante para NamedQuery "PessoaBancoHoras.findAll".
     */
    public static final String FIND_ALL = "PessoaBancoHoras.findAll";

    /**
     * Atributo gerado a partir da coluna PEBH_CD_PESSOA_BCO_HRS.
     */
    @Id
    @GeneratedValue(generator = "PessoaBancoHorasSeq")
    @SequenceGenerator(name = "PessoaBancoHorasSeq", 
            sequenceName = "SQ_PEBH_CD_PESSOA_BCO_HRS", allocationSize = 1)
    @Column(name = "PEBH_CD_PESSOA_BCO_HRS", unique = true, nullable = false, precision = 18, scale = 0)
    private Long codigoPessoaBcoHrs;

    /**
     * Atributo gerado a partir da coluna PESS_CD_PESSOA.
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "PESS_CD_PESSOA", nullable = false)
    
    private Pessoa pessoa;

    /**
     * Atributo gerado a partir da coluna UPAR_CD_UPLOAD_ARQUIVO.
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "UPAR_CD_UPLOAD_ARQUIVO")
    private UploadArquivo uploadArquivo;

    /** Atributo transiente que contem o login da pessoa. */
    @Transient
    @CsvField(pos = 0, required = true)
    private String login;
    
    /**
     * Atributo gerado a partir da coluna PEBH_DT_MES.
     */
    @Temporal(TemporalType.DATE)
    @Column(name = "PEBH_DT_MES", length = 7)
    @CsvField(pos = 1, converterType = CsvDateConverter.class)
    private Date dataMes;

    /**
     * Atributo gerado a partir da coluna PEBH_NR_HORAS.
     */

    @Column(name = "PEBH_NR_HORAS", precision = 22, scale = 0)
    @CsvField(pos = 2, required = true, converterType = CsvBigDecimalConverter.class)
    private BigDecimal numeroHoras;

    /**
     * Atributo gerado a partir da coluna PEBH_VL_FATOR.
     */

    @Column(name = "PEBH_VL_FATOR", precision = 22, scale = 0)
    @CsvField(pos = 3, required = true, converterType = CsvBigDecimalConverter.class)
    private BigDecimal valorFator;

    /**
     * Construtor default.
     */
    public PessoaBancoHoras() {
    }

    /**
     * Construtor com preenchimento da entidade.
     * @param codigoPessoaBcoHrs Valor do atributo codigoPessoaBcoHrs;
     * @param pessoa Valor do atributo pessoa;
     */
    public PessoaBancoHoras(final Long codigoPessoaBcoHrs, final Pessoa pessoa) {
        this.codigoPessoaBcoHrs = codigoPessoaBcoHrs;
        this.pessoa = pessoa;
    }

    /**
     * Construtor com preenchimento da entidade.
     * @param codigoPessoaBcoHrs Valor do atributo codigoPessoaBcoHrs;
     * @param pessoa Valor do atributo pessoa;
     * @param uploadArquivo Valor do atributo uploadArquivo;
     * @param dataMes Valor do atributo dataMes;
     * @param numeroHoras Valor do atributo numeroHoras;
     * @param valorFator Valor do atributo valorFator;
     */
    public PessoaBancoHoras(final Long codigoPessoaBcoHrs, final Pessoa pessoa,
            final UploadArquivo uploadArquivo, final Date dataMes, final BigDecimal numeroHoras,
            final BigDecimal valorFator) {
        this.codigoPessoaBcoHrs = codigoPessoaBcoHrs;
        this.pessoa = pessoa;
        this.uploadArquivo = uploadArquivo;
        this.dataMes = dataMes;
        this.numeroHoras = numeroHoras;
        this.valorFator = valorFator;
    }

    /**
     * Obtem o valor do atributo codigoPessoaBcoHrs.<BR>
     * Atributo gerado a partir da coluna PEBH_CD_PESSOA_BCO_HRS.
     * @return Valor do atributo codigoPessoaBcoHrs.
     */
    public Long getCodigoPessoaBcoHrs() {
        return this.codigoPessoaBcoHrs;
    }

    /**
     * Atualiza o valor do atributo codigoPessoaBcoHrs.<BR>
     * Atributo gerado a partir da coluna PEBH_CD_PESSOA_BCO_HRS.
     * @param codigoPessoaBcoHrs Novo valor para o atributo codigoPessoaBcoHrs.
     */
    public void setCodigoPessoaBcoHrs(final Long codigoPessoaBcoHrs) {
        this.codigoPessoaBcoHrs = codigoPessoaBcoHrs;
    }

    /**
     * Obtem o valor do atributo pessoa.<BR>
     * Atributo gerado a partir da coluna PESS_CD_PESSOA.
     * @return Valor do atributo pessoa.
     */
    public Pessoa getPessoa() {
        return this.pessoa;
    }

    /**
     * Atualiza o valor do atributo pessoa.<BR>
     * Atributo gerado a partir da coluna PESS_CD_PESSOA.
     * @param pessoa Novo valor para o atributo pessoa.
     */
    public void setPessoa(final Pessoa pessoa) {
        this.pessoa = pessoa;
    }

    /**
     * Obtem o valor do atributo uploadArquivo.<BR>
     * Atributo gerado a partir da coluna UPAR_CD_UPLOAD_ARQUIVO.
     * @return Valor do atributo uploadArquivo.
     */
    public UploadArquivo getUploadArquivo() {
        return this.uploadArquivo;
    }

    /**
     * Atualiza o valor do atributo uploadArquivo.<BR>
     * Atributo gerado a partir da coluna UPAR_CD_UPLOAD_ARQUIVO.
     * @param uploadArquivo Novo valor para o atributo uploadArquivo.
     */
    public void setUploadArquivo(final UploadArquivo uploadArquivo) {
        this.uploadArquivo = uploadArquivo;
    }

    /**
     * Obtem o valor do atributo dataMes.<BR>
     * Atributo gerado a partir da coluna PEBH_DT_MES.
     * @return Valor do atributo dataMes.
     */
    public Date getDataMes() {
        return this.dataMes;
    }

    /**
     * Atualiza o valor do atributo dataMes.<BR>
     * Atributo gerado a partir da coluna PEBH_DT_MES.
     * @param dataMes Novo valor para o atributo dataMes.
     */
    public void setDataMes(final Date dataMes) {
        this.dataMes = dataMes;
    }

    /**
     * Obtem o valor do atributo numeroHoras.<BR>
     * Atributo gerado a partir da coluna PEBH_NR_HORAS.
     * @return Valor do atributo numeroHoras.
     */
    public BigDecimal getNumeroHoras() {
        return this.numeroHoras;
    }

    /**
     * Atualiza o valor do atributo numeroHoras.<BR>
     * Atributo gerado a partir da coluna PEBH_NR_HORAS.
     * @param numeroHoras Novo valor para o atributo numeroHoras.
     */
    public void setNumeroHoras(final BigDecimal numeroHoras) {
        this.numeroHoras = numeroHoras;
    }

    /**
     * Obtem o valor do atributo valorFator.<BR>
     * Atributo gerado a partir da coluna PEBH_VL_FATOR.
     * @return Valor do atributo valorFator.
     */
    public BigDecimal getValorFator() {
        return this.valorFator;
    }

    /**
     * Atualiza o valor do atributo valorFator.<BR>
     * Atributo gerado a partir da coluna PEBH_VL_FATOR.
     * @param valorFator Novo valor para o atributo valorFator.
     */
    public void setValorFator(final BigDecimal valorFator) {
        this.valorFator = valorFator;
    }

    /**
     * @see Object#toString()
     * @return representação String do Objeto
     */
    @Override
    public String toString() {
        StringBuffer buffer = new StringBuffer();

        buffer.append(getClass().getName()).append("@").append(
                Integer.toHexString(hashCode())).append(" [");
        buffer.append("codigoPessoaBcoHrs").append("='").append(
                getCodigoPessoaBcoHrs()).append("' ");
        buffer.append("pessoa").append("='").append(getPessoa()).append("' ");
        buffer.append("dataMes").append("='").append(getDataMes()).append("' ");
        buffer.append("numeroHoras").append("='").append(getNumeroHoras())
                .append("' ");
        buffer.append("valorFator").append("='").append(getValorFator())
                .append("' ");
        buffer.append("]");

        return buffer.toString();
    }

    /**
     * @param login the login to set
     */
    public void setLogin(final String login) {
        this.login = login;
    }

    /**
     * @return the login
     */
    public String getLogin() {
        if (login == null && pessoa != null) {
            return pessoa.getCodigoLogin();
        }
        
        return login;
    }

}