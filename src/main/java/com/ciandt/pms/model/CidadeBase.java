/*
 * @(#) CidadeBase.java
 * Copyright (c) 2008 Ci&T Software S/A.
 * All Rights Reserved.
 */
package com.ciandt.pms.model;

import com.ciandt.pms.Constants;

import javax.persistence.*;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * Entity gerado a partir da tabela CIDADE_BASE.
 *
 * @author Generated by Hibernate Tools 3.2.4.GA
 * @since 12/08/2009 17:14:06
 * @version 09/01/19 1.1 10:08:00
 */
@Entity
@Table(name = "CIDADE_BASE")
@SqlResultSetMappings(@SqlResultSetMapping(name = "scalarCidadeBase"))
@NamedNativeQueries({
        @NamedNativeQuery(name = "CidadeBase.findEmpresaByCidadeBase", query = "select empr_cd_empresa_filial from pms20.cidade_base_filial  " +
                "where ciba_cd_cidade_base = :param ", resultSetMapping = "scalarCidadeBase"),
        @NamedNativeQuery(name = "CidadeBase.findActiveByEmpresa", query = "select cb.ciba_cd_cidade_base from pms20.cidade_base cb " +
                "join pms20.cidade_base_filial cbf on cb.ciba_cd_cidade_base = cbf.ciba_cd_cidade_base " +
                "join pms20.empresa e on cbf.empr_cd_empresa_matriz = e.empr_cd_empresa " +
                "where e.empr_cd_erp_codigo = :companyCode and cb.ciba_in_ativo = 'A' ", resultSetMapping = "scalarCidadeBase"),
        @NamedNativeQuery(name = "CidadeBase.findActiveByPmsEmpresa", query = "select cb.ciba_cd_cidade_base from pms20.cidade_base cb " +
                "join pms20.cidade_base_filial cbf on cb.ciba_cd_cidade_base = cbf.ciba_cd_cidade_base " +
                "join pms20.empresa e on cbf.empr_cd_empresa_filial = e.empr_cd_empresa " +
                "where e.empr_cd_empresa = :companyCode and cb.ciba_in_ativo = 'A' ", resultSetMapping = "scalarCidadeBase"),
        @NamedNativeQuery(name = "CidadeBase.findIfHasDependency", query = "(select agp.algc_cd_alocacao from pms20.alocacao_grupo_custo agp " +
                "where agp.ciba_cd_cidade_base = :codigoCidadeBase fetch first 1 rows only) union all " +
                "(select pp.pepa_cd_perfil_padrao from pms20.perfil_padrao pp " +
                "where pp.ciba_cd_cidade_base = :codigoCidadeBase fetch first 1 rows only) union all " +
                "(select a.aloc_cd_alocacao from pms20.alocacao a " +
                "where a.ciba_cd_cidade_base = :codigoCidadeBase fetch first 1 rows only) union all " +
                "(select bpa.bapa_cd_base_papel_alocacao from pms20.base_papel_alocacao bpa " +
                "where bpa.ciba_cd_cidade_base = :codigoCidadeBase fetch first 1 rows only) union all " +
                "(select tcib.cuib_cd_custo_infra_base from pms20.tce_custo_infra_base tcib " +
                "where tcib.ciba_cd_cidade_base = :codigoCidadeBase fetch first 1 rows only) union all " +
                "(select pcb.pecb_cd_pessoa_cidade_base from pms20.pessoa_cidade_base pcb " +
                "where pcb.ciba_cd_cidade_base = :codigoCidadeBase fetch first 1 rows only) union all " +
                "(select p.pess_cd_pessoa from pms20.pessoa p " +
                "where p.ciba_cd_cidade_base = :codigoCidadeBase fetch first 1 rows only) union all " +
                "(select cbf.ciba_cd_cidade_base from pms20.cidade_base_filial cbf " +
                "where cbf.ciba_cd_cidade_base = :codigoCidadeBase fetch first 1 rows only)", resultSetMapping = "scalarCidadeBase")
})
@NamedQueries({
        @NamedQuery(name = "CidadeBase.findAll", query = "SELECT t FROM CidadeBase t "
                + "ORDER BY t.nomeCidadeBase ASC "),
        @NamedQuery(name = "CidadeBase.findAllActive", query = "SELECT t FROM CidadeBase t "
                + "WHERE (t.indicadorAtivo = 'A') "
                + "ORDER BY t.nomeCidadeBase ASC "),
        @NamedQuery(name = "CidadeBase.findBySigla", query = "SELECT t FROM CidadeBase t "
                + "WHERE UPPER(t.siglaCidadeBase) = UPPER(?) "),
        @NamedQuery(name = "CidadeBase.findByIds", query = "SELECT t FROM CidadeBase t "
                + "WHERE t.codigoCidadeBase in (:ids)"),
        @NamedQuery(name = "CidadeBase.findByNome", query = "SELECT t FROM CidadeBase t "
                + "WHERE UPPER(t.nomeCidadeBase) = UPPER(?) "),

        @NamedQuery(name = "CidadeBase.findByFilter", query = "SELECT cb FROM CidadeBase cb "
                + " LEFT JOIN FETCH cb.moeda moeda "
                + " WHERE (UPPER(cb.nomeCidadeBase) like '%'|| TRIM(UPPER(:name)) ||'%' OR :name is null) "
                + " AND (UPPER(cb.siglaCidadeBase) like '%'|| TRIM(UPPER(:siglaCidadeBase)) ||'%' OR :siglaCidadeBase is null) "
                + " AND (cb.codigoEmpresaERP = :codigoEmpresaERP OR :codigoEmpresaERP is null) "
                + " AND (moeda.codigoMoeda = :codigoMoeda OR :codigoMoeda is null) "
                + " AND (UPPER(cb.indicadorAtivo) like '%'||TRIM(UPPER(:indicadorAtivo))||'%' OR (:indicadorAtivo is null)) "
                + " ORDER BY cb.nomeCidadeBase ASC ")
})
public class CidadeBase implements java.io.Serializable, Cloneable {

    // ========================================================================
    // BEGIN - Coloque aqui o codigo manual
    // ========================================================================

    /**
     * Realiza uma copia do objeto, porem com uma referencia diferente.
     *
     * @return a cópia do Objeto
     */
    public CidadeBase getClone() {
        try {
            return (CidadeBase) super.clone();
        } catch (CloneNotSupportedException e) {
            e.printStackTrace();
            return null;
        }
    }

    // ========================================================================
    // END
    // ========================================================================

    /**
     * Valor do serialVersionUID.
     */
    private static final long serialVersionUID = 1L;

    /**
     * Constante para NamedQuery "CidadeBase.findAll".
     */
    public static final String FIND_ALL = "CidadeBase.findAll";

    /**
     * Constante para NamedQuery "CidadeBase.findAllActive".
     */
    public static final String FIND_ALL_ACTIVE = "CidadeBase.findAllActive";

    /**
     * Constante para NamedQuery "CidadeBase.findBySigla".
     */
    public static final String FIND_BY_SIGLA = "CidadeBase.findBySigla";

    /**
     * Constante para NamedQuery "CidadeBase.findByNome".
     */
    public static final String FIND_BY_NOME = "CidadeBase.findByNome";

    /** Constante para NamedQuery "CidadeBase.findEmpresaByCidadeBase". */
    public static final String FIND_EMPRESA_BY_CIDADE_BASE = "CidadeBase.findEmpresaByCidadeBase";

    /**
     * Constante para NamedQuery "CidadeBase.findBySigla".
     */
    public static final String FIND_ACTIVE_BY_EMPRESA = "CidadeBase.findActiveByEmpresa";

    public static final String FIND_ACTIVE_BY_PMS_EMPRESA = "CidadeBase.findActiveByPmsEmpresa";

    public static final String FIND_BY_IDS ="CidadeBase.findByIds";

    public static final String FIND_BY_FILTER ="CidadeBase.findByFilter";

    public static final String FIND_IF_HAS_DEPENDENCY ="CidadeBase.findIfHasDependency";

    /**
     * Atributo gerado a partir da coluna CIBA_CD_CIDADE_BASE.
     */
    @Id
    @GeneratedValue(generator = "CidadeBaseSeq")
    @SequenceGenerator(name = "CidadeBaseSeq", sequenceName = "SQ_CIBA_CD_CIDADE_BASE", allocationSize = 1)
    @Column(name = "CIBA_CD_CIDADE_BASE", unique = true, nullable = false, precision = 18, scale = 0)
    private Long codigoCidadeBase;

    /**
     * Atributo gerado a partir da coluna CIBA_NM_CIDADE_BASE.
     */

    @Column(name = "CIBA_NM_CIDADE_BASE", nullable = false, length = 240)
    private String nomeCidadeBase;

    /**
     * Atributo gerado a partir da coluna CIBA_IN_ATIVO.
     */

    @Column(name = "CIBA_IN_ATIVO", nullable = false, length = 1)
    private String indicadorAtivo;

    /**
     * Atributo gerado a partir da coluna TAAL_SG_CIDADE_BASE.
     */

    @Column(name = "CIBA_SG_CIDADE_BASE", length = 20)
    private String siglaCidadeBase;


    @Column(name = "EMPR_CD_ERP_CODIGO", length = 18)
    private Long codigoEmpresaERP;

    /**
     * Relacionamento um pra muitos.
     */
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "cidadeBase")
    private Set<Alocacao> alocacaos = new HashSet<Alocacao>(0);

    /**
     * Relacionamento um pra muitos.
     */
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "cidadeBase")
    private Set<Pessoa> pessoas = new HashSet<Pessoa>(0);

    /**
     * Relacionamento um pra muitos.
     */
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "cidadeBase")
    private List<BasePapelAlocacao> basePapelAlocacaos =
            new ArrayList<BasePapelAlocacao>(0);

    /**
     * Relacionamento um pra muitos.
     */
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "cidadeBase")
    private Set<PessoaCidadeBase> pessoaCidadeBases =
            new HashSet<PessoaCidadeBase>(0);

    /**
     * Atributo gerado a partir da coluna MOED_CD_MOEDA.
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "MOED_CD_MOEDA", nullable = false)
    private Moeda moeda;

    /**
     * Construtor default.
     */
    public CidadeBase() {
    }

    /**
     * Construtor com preenchimento da entidade.
     *
     * @param codigoCidadeBase
     *            Valor do atributo codigoCidadeBase;
     * @param nomeCidadeBase
     *            Valor do atributo nomeCidadeBase;
     * @param indicadorAtivo
     *            Valor do atributo indicadorAtivo;
     */
    public CidadeBase(final Long codigoCidadeBase, final String nomeCidadeBase,
                      final String indicadorAtivo) {
        this.codigoCidadeBase = codigoCidadeBase;
        this.nomeCidadeBase = nomeCidadeBase;
        this.indicadorAtivo = indicadorAtivo;
    }

    /**
     * Construtor com preenchimento da entidade e valida??es.
     *
     * @param codigoCidadeBase
     *            Valor do atributo codigoCidadeBase;
     * @param nomeCidadeBase
     *            Valor do atributo nomeCidadeBase;
     * @param indicadorAtivo
     *            Valor do atributo indicadorAtivo;
     * @param siglaCidadeBase
     *            Valor do atributo siglaCidadeBase;
     * @param moeda
     *            Valor do atributo moeda;
     */
    public CidadeBase(Long codigoCidadeBase, String nomeCidadeBase, String indicadorAtivo,
                      String siglaCidadeBase, Long codigoEmpresaERP, Moeda moeda) {
        if (codigoCidadeBase != null)
            this.codigoCidadeBase = codigoCidadeBase;
        if (nomeCidadeBase != null)
            this.nomeCidadeBase = nomeCidadeBase;
        if (indicadorAtivo != null)
            this.indicadorAtivo = indicadorAtivo;
        if (siglaCidadeBase != null)
            this.siglaCidadeBase = siglaCidadeBase;
        if (codigoEmpresaERP != null)
            this.codigoEmpresaERP = codigoEmpresaERP;
        if (moeda != null)
            this.moeda = moeda;
    }

    /**
     * Construtor com preenchimento da entidade.
     *
     * @param codigoCidadeBase
     *            Valor do atributo codigoCidadeBase;
     * @param nomeCidadeBase
     *            Valor do atributo nomeCidadeBase;
     * @param indicadorAtivo
     *            Valor do atributo indicadorAtivo;
     * @param siglaCidadeBase
     *            Valor do atributo siglaCidadeBase;
     * @param alocacaos
     *            Valor do atributo alocacaos;
     * @param pessoas
     *            Valor do atributo pessoas;
     * @param moeda
     *            Valor do atributo moeda;
     */
    public CidadeBase(final Long codigoCidadeBase, final String nomeCidadeBase,
                      final String indicadorAtivo, final String siglaCidadeBase,
                      final Set<Alocacao> alocacaos, final Set<Pessoa> pessoas,
                      final Moeda moeda) {
        this.codigoCidadeBase = codigoCidadeBase;
        this.nomeCidadeBase = nomeCidadeBase;
        this.indicadorAtivo = indicadorAtivo;
        this.siglaCidadeBase = siglaCidadeBase;
        this.alocacaos = alocacaos;
        this.pessoas = pessoas;
        this.moeda = moeda;
    }

    /**
     * Obtem o valor do atributo codigoCidadeBase.<BR>
     * Atributo gerado a partir da coluna CIBA_CD_CIDADE_BASE.
     *
     * @return Valor do atributo codigoCidadeBase.
     */
    public Long getCodigoCidadeBase() {
        return this.codigoCidadeBase;
    }

    /**
     * Atualiza o valor do atributo codigoCidadeBase.<BR>
     * Atributo gerado a partir da coluna CIBA_CD_CIDADE_BASE.
     *
     * @param codigoCidadeBase
     *            Novo valor para o atributo codigoCidadeBase.
     */
    public void setCodigoCidadeBase(final Long codigoCidadeBase) {
        this.codigoCidadeBase = codigoCidadeBase;
    }

    /**
     * Obtem o valor do atributo nomeCidadeBase.<BR>
     * Atributo gerado a partir da coluna CIBA_NM_CIDADE_BASE.
     *
     * @return Valor do atributo nomeCidadeBase.
     */
    public String getNomeCidadeBase() {
        return this.nomeCidadeBase;
    }

    /**
     * Atualiza o valor do atributo nomeCidadeBase.<BR>
     * Atributo gerado a partir da coluna CIBA_NM_CIDADE_BASE.
     *
     * @param nomeCidadeBase
     *            Novo valor para o atributo nomeCidadeBase.
     */
    public void setNomeCidadeBase(final String nomeCidadeBase) {
        this.nomeCidadeBase = nomeCidadeBase;
    }

    /**
     * Obtem o valor do atributo indicadorAtivo.<BR>
     * Atributo gerado a partir da coluna CIBA_IN_ATIVO.
     *
     * @return Valor do atributo indicadorAtivo.
     */
    public String getIndicadorAtivo() {
        return this.indicadorAtivo;
    }

    /**
     * Atualiza o valor do atributo indicadorAtivo.<BR>
     * Atributo gerado a partir da coluna CIBA_IN_ATIVO.
     *
     * @param indicadorAtivo
     *            Novo valor para o atributo indicadorAtivo.
     */
    public void setIndicadorAtivo(final String indicadorAtivo) {
        this.indicadorAtivo = indicadorAtivo;
    }

    /**
     * Obtem o valor do atributo siglaCidadeBase.<BR>
     * Atributo gerado a partir da coluna TAAL_SG_CIDADE_BASE.
     *
     * @return Valor do atributo siglaCidadeBase.
     */
    public String getSiglaCidadeBase() {
        return this.siglaCidadeBase;
    }

    /**
     * Atualiza o valor do atributo siglaCidadeBase.<BR>
     * Atributo gerado a partir da coluna TAAL_SG_CIDADE_BASE.
     *
     * @param siglaCidadeBase
     *            Novo valor para o atributo siglaCidadeBase.
     */
    public void setSiglaCidadeBase(final String siglaCidadeBase) {
        this.siglaCidadeBase = siglaCidadeBase;
    }


    public Long getCodigoEmpresaERP() {
        return codigoEmpresaERP;
    }

    public void setCodigoEmpresaERP(Long codigoEmpresaERP) {
        this.codigoEmpresaERP = codigoEmpresaERP;
    }

    /**
     * Obtem o valor do atributo alocacaos.<BR>
     *
     * @return Valor do atributo alocacaos.
     */
    public Set<Alocacao> getAlocacaos() {
        return this.alocacaos;
    }

    /**
     * Atualiza o valor do atributo alocacaos.<BR>
     *
     * @param alocacaos
     *            Novo valor para o atributo alocacaos.
     */
    public void setAlocacaos(final Set<Alocacao> alocacaos) {
        this.alocacaos = alocacaos;
    }

    /**
     * Obtem o valor do atributo pessoas.<BR>
     *
     * @return Valor do atributo pessoas.
     */
    public Set<Pessoa> getPessoas() {
        return this.pessoas;
    }

    /**
     * Atualiza o valor do atributo pessoas.<BR>
     *
     * @param pessoas
     *            Novo valor para o atributo pessoas.
     */
    public void setPessoas(final Set<Pessoa> pessoas) {
        this.pessoas = pessoas;
    }

    /**
     * Obtem o valor do atributo moeda.<BR>
     * Atributo gerado a partir da coluna MOED_CD_MOEDA.
     *
     * @return Valor do atributo moeda.
     */
    public Moeda getMoeda() {
        return this.moeda;
    }

    /**
     * Atualiza o valor do atributo moeda.<BR>
     * Atributo gerado a partir da coluna MOED_CD_MOEDA.
     *
     * @param moeda
     *            Novo valor para o atributo moeda.
     */
    public void setMoeda(final Moeda moeda) {
        this.moeda = moeda;
    }

    /**
     * @return the pessoaCidadeBases
     */
    public Set<PessoaCidadeBase> getPessoaCidadeBases() {
        return pessoaCidadeBases;
    }

    /**
     * @param pessoaCidadeBases
     *            the pessoaCidadeBases to set
     */
    public void setPessoaCidadeBases(
            final Set<PessoaCidadeBase> pessoaCidadeBases) {
        this.pessoaCidadeBases = pessoaCidadeBases;
    }

    /**
     * @return the basePapelAlocacaos
     */
    public List<BasePapelAlocacao> getBasePapelAlocacaos() {
        return basePapelAlocacaos;
    }

    /**
     * @param basePapelAlocacaos
     *            the basePapelAlocacaos to set
     */
    public void setBasePapelAlocacaos(
            final List<BasePapelAlocacao> basePapelAlocacaos) {
        this.basePapelAlocacaos = basePapelAlocacaos;
    }

    public void toggleIndicadorAtivoBetweenActiveAndInactive() {
        if (this.indicadorAtivo.equals(Constants.ACTIVE)) {
            this.setIndicadorAtivo(Constants.INACTIVE);
        } else {
            this.setIndicadorAtivo(Constants.ACTIVE);
        }
    }

    /**
     * @see Object#toString()
     * @return representação String do Objeto
     */
    @Override
    public String toString() {
        StringBuffer buffer = new StringBuffer();

        buffer.append(getClass().getName()).append("@").append(
                Integer.toHexString(hashCode())).append(" [");
        buffer.append("codigoCidadeBase").append("='").append(
                getCodigoCidadeBase()).append("' ");
        buffer.append("nomeCidadeBase").append("='")
                .append(getNomeCidadeBase()).append("' ");
        buffer.append("indicadorAtivo").append("='")
                .append(getIndicadorAtivo()).append("' ");
        buffer.append("siglaCidadeBase").append("='").append(
                getSiglaCidadeBase()).append("' ");
        buffer.append("]");

        return buffer.toString();
    }

}