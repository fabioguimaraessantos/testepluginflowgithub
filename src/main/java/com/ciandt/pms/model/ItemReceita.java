/*
 * @(#) ItemReceita.java
 * Copyright (c) 2008 Ci&T Software S/A.
 * All Rights Reserved.
 */
package com.ciandt.pms.model;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import javax.persistence.*;

import org.hibernate.envers.Audited;
import org.hibernate.envers.RelationTargetAuditMode;
import org.springframework.beans.factory.annotation.Autowired;

/**
 * Entity gerado a partir da tabela ITEM_RECEITA.
 * 
 * @author Generated by Hibernate Tools 3.2.4.GA
 * @since 21/12/2009 12:09:33
 * @version 09/01/19 1.1 10:08:00
 */
@Entity
@Table(name = "ITEM_RECEITA")
@NamedQueries({
		@NamedQuery(name = "ItemReceita.findAll", query = "SELECT t FROM ItemReceita t"),

		@NamedQuery(name = "ItemReceita.findByReceita", query = "SELECT ir FROM ItemReceita ir"
				+ " JOIN FETCH ir.pessoa p "
				+ " JOIN FETCH ir.receitaMoeda rm"
				+ " WHERE rm.receita.codigoReceita = ? "
				+ " ORDER BY ir.pessoa.codigoLogin "),

		@NamedQuery(name = "ItemReceita.findByReceitaMoeda", query = "SELECT ir FROM ItemReceita ir "
				+ "WHERE ir.receitaMoeda.codigoReceitaMoeda = ? ")})

@NamedNativeQueries({
		@NamedNativeQuery(name = "ItemReceita.updateAllMultiDealFiscalTaxAndNetRevenueAfterDate", query = "merge into item_receita i1 \n" +
				" using ( \n" +
				" select  ir.rowid row_id,r.rece_dt_mes, cp.copr_nm_contrato_pratica,  ir.itre_cd_item_receita, ir.itre_vl_total_item, ir.itre_vl_tax_item, ir.itre_vl_net_item, (vdf.TAX) imp, \n" +
				" ir.itre_vl_total_item * (vdf.TAX)/100 new_tax, ir.itre_vl_total_item - (ir.itre_vl_total_item * (vdf.TAX)/100) new_net \n" +
				" from pms20.receita r \n" +
				" inner join pms20.receita_moeda rm on r.rece_cd_receita = rm.rece_cd_receita \n" +
				" inner join pms20.receita_deal_fiscal rdf on rdf.remo_cd_receita_moeda = rm.remo_cd_receita_moeda \n" +
				" inner join pms20.vw_pms_forecast_deal_fiscal vdf on rdf.defi_cd_deal_fiscal = vdf.CD_DEAL_FISCAL and vdf.CD_CONTRATO_PRATICA = r.copr_cd_contrato_pratica \n" +
				" inner join pms20.item_receita ir on rm.remo_cd_receita_moeda = ir.remo_cd_receita_moeda and rdf.redf_cd_receita_dfiscal = ir.redf_cd_receita_dfiscal \n" +
				" inner join pms20.contrato_pratica cp on cp.copr_cd_contrato_pratica = r.copr_cd_contrato_pratica and cp.copr_in_multi_deal_fiscal = 'Y' \n" +
				" where r.rece_dt_mes >= TRUNC(:param1, 'MM') \n" +
				" and r.rece_in_versao = 'FC' \n" +
				" and r.rece_dt_mes between vdf.taim_dt_inicio and nvl(vdf.taim_dt_fim, trunc(sysdate + 3600,'MM')) \n" +
				" ) i2 \n" +
				" on (i1.rowid = i2.row_id) \n" +
				" when matched then \n" +
				" update set i1.itre_vl_tax_item = i2.new_tax,  i1.itre_vl_net_item = i2.new_net ", resultClass = ItemReceita.class),

		@NamedNativeQuery(name = "ItemReceita.updateAllTaxAndNetRevenueAfterDate", query = "merge into item_receita i1 \n" +
				" using ( \n" +
				" select ir.rowid row_id, cp.copr_nm_contrato_pratica, r.rece_dt_mes,  ir.itre_cd_item_receita, ir.itre_vl_total_item, ir.itre_vl_tax_item, ir.itre_vl_net_item, (vdf.TAX) imp, \n" +
				" ir.itre_vl_total_item * (vdf.TAX)/100 new_tax, ir.itre_vl_total_item - (ir.itre_vl_total_item * (vdf.TAX)/100) new_net \n" +
				" from pms20.receita r \n" +
				" inner join pms20.receita_moeda rm on r.rece_cd_receita = rm.rece_cd_receita \n" +
				" inner join pms20.receita_deal_fiscal rdf on rdf.remo_cd_receita_moeda = rm.remo_cd_receita_moeda \n" +
				" inner join pms20.vw_pms_forecast_deal_fiscal vdf on rdf.defi_cd_deal_fiscal = vdf.CD_DEAL_FISCAL and vdf.CD_CONTRATO_PRATICA = r.copr_cd_contrato_pratica \n" +
				" inner join pms20.tipo_servico_deal_fiscal tsdf on vdf.CD_DEAL_FISCAL = tsdf.defi_cd_deal_fiscal \n" +
				" inner join pms20.item_receita ir on rm.remo_cd_receita_moeda = ir.remo_cd_receita_moeda \n" +
				" inner join pms20.contrato_pratica cp on cp.copr_cd_contrato_pratica = r.copr_cd_contrato_pratica and cp.copr_in_multi_deal_fiscal <> 'Y' \n" +
				" where r.rece_dt_mes >= TRUNC(:param1, 'MM') \n" +
				" and r.rece_in_versao = 'FC'  \n" +
				" and r.rece_dt_mes between vdf.taim_dt_inicio and nvl(vdf.taim_dt_fim, trunc(sysdate + 3600,'MM')) \n" +
				" ) i2 \n" +
				" on (i1.rowid = i2.row_id) \n" +
				" when matched then \n" +
				" update set i1.itre_vl_tax_item = i2.new_tax,  i1.itre_vl_net_item = i2.new_net ", resultClass = ItemReceita.class)
})


public class ItemReceita implements java.io.Serializable, Cloneable {

	// ========================================================================
	// BEGIN - Coloque aqui o codigo manual
	// ========================================================================

	/** Constante para NamedQuery "ItemReceita.findAll". */
	public static final String FIND_ALL = "ItemReceita.findAll";

	/** Constante para NamedQuery "ItemReceita.findByReceita". */
	public static final String FIND_BY_RECEITA = "ItemReceita.findByReceita";

	/** Constante para NamedQuery "ItemReceita.findByReceitaMoeda". */
	public static final String FIND_BY_RECEITA_MOEDA = "ItemReceita.findByReceitaMoeda";

	public static final String UPDATE_ALL_TAX_AND_NET_REVENUE = "ItemReceita.updateAllTaxAndNetRevenueAfterDate";

	public static final String UPDATE_ALL_MUTIDEALFISCAL_TAX_AND_NET_REVENUE = "ItemReceita.updateAllMultiDealFiscalTaxAndNetRevenueAfterDate";

	/** Lista de Etiquetas relacionado com o ItemReceita corrente. */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "itemReceita", cascade = CascadeType.ALL)
	private List<EtiquetaItemReceita> etiquetaItemReceitas = new ArrayList<EtiquetaItemReceita>(
			0);

	/**
	 * Realiza uma copia do objeto, porem com uma referencia diferente.
	 * 
	 * @return a cópia do Objeto
	 */
	public ItemReceita getClone() {
		try {
			return (ItemReceita) super.clone();
		} catch (CloneNotSupportedException e) {
			e.printStackTrace();
			return null;
		}
	}

	// ========================================================================
	// END
	// ========================================================================

	/**
	 * Valor do serialVersionUID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * Atributo gerado a partir da coluna ITRE_CD_ITEM_RECEITA.
	 */
	@Id
	@GeneratedValue(generator = "ItemReceitaSeq")
	@SequenceGenerator(name = "ItemReceitaSeq", sequenceName = "SQ_ITRE_CD_ITEM_RECEITA", allocationSize = 1)
	@Column(name = "ITRE_CD_ITEM_RECEITA", unique = true, nullable = false, precision = 18, scale = 0)
	private Long codigoItemReceita;

	/**
	 * Atributo gerado a partir da coluna REMO_CD_RECEITA_MOEDA.
	 */
	@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "REMO_CD_RECEITA_MOEDA", nullable = false)
	private ReceitaMoeda receitaMoeda;

	/**
	 * Atributo gerado a partir da coluna PESS_CD_PESSOA.
	 */
	@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "PESS_CD_PESSOA", nullable = false)
	private Pessoa pessoa;

	/**
	 * Atributo gerado a partir da coluna PEVE_CD_PERFIL_VENDIDO.
	 */
	@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "PEVE_CD_PERFIL_VENDIDO", nullable = false)
	private PerfilVendido perfilVendido;

	/**
	 * Atributo gerado a partir da coluna ITRE_NR_FTE.
	 */
	@Audited
	@Column(name = "ITRE_NR_FTE", precision = 22, scale = 0)
	private BigDecimal numeroFte = BigDecimal.ZERO;

	/**
	 * Atributo gerado a partir da coluna ITRE_VL_PERFIL_VENDIDO_HORA.
	 */
	@Audited
	@Column(name = "ITRE_VL_PERFIL_VENDIDO_HORA", precision = 22, scale = 0)
	private BigDecimal valorPerfilVendidoHora = BigDecimal.ZERO;

	/**
	 * Atributo gerado a partir da coluna ITRE_VL_TOTAL_ITEM.
	 */
	@Audited
	@Column(name = "ITRE_VL_TOTAL_ITEM", precision = 22, scale = 0)
	private BigDecimal valorTotalItem = BigDecimal.ZERO;
	
	/**
	 * Atributo gerado a partir da coluna ITRE_PR_DESEPESA.
	 */
	@Audited
	@Column(name = "ITRE_PR_DESPESA", precision = 15)
	private BigDecimal percentualDespesa = BigDecimal.ZERO;

	@Audited
	@Column(name = "ITRE_VL_TAX_ITEM", precision = 18)
	private BigDecimal valorImpostoItem;

	@Audited
	@Column(name = "ITRE_VL_NET_ITEM", precision = 18)
	private BigDecimal valorLiquidoItem;

	@Audited
	@Column(name = "REDF_CD_RECEITA_DFISCAL",nullable = true, precision = 18, scale = 0)
	private Long codigoReceitaDfiscal;

	/**
	 * Construtor default.
	 */
	public ItemReceita() {
	}

	/**
	 * @return the etiquetaItemReceitas
	 */
	public List<EtiquetaItemReceita> getEtiquetaItemReceitas() {
		return etiquetaItemReceitas;
	}

	/**
	 * @param etiquetaItemReceitas
	 *            the etiquetaItemReceitas to set
	 */
	public void setEtiquetaItemReceitas(
			List<EtiquetaItemReceita> etiquetaItemReceitas) {
		this.etiquetaItemReceitas = etiquetaItemReceitas;
	}

	/**
	 * @return the codigoItemReceita
	 */
	public Long getCodigoItemReceita() {
		return codigoItemReceita;
	}

	/**
	 * @param codigoItemReceita
	 *            the codigoItemReceita to set
	 */
	public void setCodigoItemReceita(Long codigoItemReceita) {
		this.codigoItemReceita = codigoItemReceita;
	}

	/**
	 * @return the receitaMoeda
	 */
	public ReceitaMoeda getReceitaMoeda() {
		return receitaMoeda;
	}

	/**
	 * @param receitaMoeda
	 *            the receitaMoeda to set
	 */
	public void setReceitaMoeda(ReceitaMoeda receitaMoeda) {
		this.receitaMoeda = receitaMoeda;
	}

	/**
	 * @return the pessoa
	 */
	public Pessoa getPessoa() {
		return pessoa;
	}

	/**
	 * @param pessoa
	 *            the pessoa to set
	 */
	public void setPessoa(Pessoa pessoa) {
		this.pessoa = pessoa;
	}

	/**
	 * @return the perfilVendido
	 */
	public PerfilVendido getPerfilVendido() {
		return perfilVendido;
	}

	/**
	 * @param perfilVendido
	 *            the perfilVendido to set
	 */
	public void setPerfilVendido(PerfilVendido perfilVendido) {
		this.perfilVendido = perfilVendido;
	}

	/**
	 * @return the numeroFte
	 */
	public BigDecimal getNumeroFte() {
		return numeroFte;
	}

	/**
	 * @param numeroFte
	 *            the numeroFte to set
	 */
	public void setNumeroFte(BigDecimal numeroFte) {
		this.numeroFte = numeroFte;
	}

	/**
	 * @return the valorPerfilVendidoHora
	 */
	public BigDecimal getValorPerfilVendidoHora() {
		return valorPerfilVendidoHora;
	}

	/**
	 * @param valorPerfilVendidoHora
	 *            the valorPerfilVendidoHora to set
	 */
	public void setValorPerfilVendidoHora(BigDecimal valorPerfilVendidoHora) {
		this.valorPerfilVendidoHora = valorPerfilVendidoHora;
	}

	/**
	 * @return the valorTotalItem
	 */
	public BigDecimal getValorTotalItem() {
		return valorTotalItem;
	}

	/**
	 * @param valorTotalItem
	 *            the valorTotalItem to set
	 */
	public void setValorTotalItem(BigDecimal valorTotalItem) {
		this.valorTotalItem = valorTotalItem;
	}
	
	

	/**
	 * @return the percentualDespesa
	 */
	public BigDecimal getPercentualDespesa() {
		return percentualDespesa;
	}

	/**
	 * @param percentualDespesa the percentualDespesa to set
	 */
	public void setPercentualDespesa(BigDecimal percentualDespesa) {
		this.percentualDespesa = percentualDespesa;
	}

	public BigDecimal getValorImpostoItem() {
		return valorImpostoItem;
	}

	public void setValorImpostoItem(BigDecimal valorImpostoItem) {
		this.valorImpostoItem = valorImpostoItem;
	}

	public BigDecimal getValorLiquidoItem() {
		return valorLiquidoItem;
	}

	public void setValorLiquidoItem(BigDecimal valorLiquidoItem) {
		this.valorLiquidoItem = valorLiquidoItem;
	}

	public Long getCodigoReceitaDfiscal () { return codigoReceitaDfiscal;}

	public  void setCodigoReceitaDfiscal (Long codigoReceitaDfiscal){ this.codigoReceitaDfiscal = codigoReceitaDfiscal; }

	/**
	 * @see Object#toString()
	 * @return representação String do Objeto
	 */
	@Override
	public String toString() {
		StringBuffer buffer = new StringBuffer();

		buffer.append(getClass().getName()).append("@")
				.append(Integer.toHexString(hashCode())).append(" [");
		buffer.append("codigoItemReceita").append("='")
				.append(getCodigoItemReceita()).append("' ");
		buffer.append("receitaMoeda").append("='").append(getReceitaMoeda())
				.append("' ");
		buffer.append("pessoa").append("='").append(getPessoa()).append("' ");
		buffer.append("perfilVendido").append("='").append(getPerfilVendido())
				.append("' ");
		buffer.append("numeroFte").append("='").append(getNumeroFte())
				.append("' ");
		buffer.append("valorPerfilVendidoHora").append("='")
				.append(getValorPerfilVendidoHora()).append("' ");
		buffer.append("valorTotalItem").append("='")
				.append(getValorTotalItem()).append("' ");
		buffer.append("]");

		return buffer.toString();
	}

}