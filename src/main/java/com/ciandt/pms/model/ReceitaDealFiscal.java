/*
 * @(#) ReceitaDealFiscal.java
 * Copyright (c) 2008 Ci&T Software S/A.
 * All Rights Reserved.
 */
package com.ciandt.pms.model;

import java.math.BigDecimal;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.*;

import org.hibernate.annotations.Type;
import org.hibernate.envers.Audited;
import org.hibernate.envers.RelationTargetAuditMode;

/**
 * Entity gerado a partir da tabela RECEITA_DEAL_FISCAL.
 * 
 * @author Generated by Hibernate Tools 3.6.0
 * @since 04/01/2013 08:06:29
 * @version 09/01/19 1.1 10:08:00
 */
@Entity
@Table(name = "RECEITA_DEAL_FISCAL")
@SqlResultSetMappings(@SqlResultSetMapping(name = "scalarReceitaDealFiscal"))
@NamedNativeQueries({@NamedNativeQuery(name = "ReceitaDealFiscal.integrateReceita",
		query = "{ ? = call ufc_pms_integracao_receita_app(:param1) }",
		hints = { @QueryHint(name = "org.hibernate.callable", value = "true") },
		resultClass = Integer.class,
		resultSetMapping = "scalarReceitaDealFiscal"),
		@NamedNativeQuery(name = "ReceitaDealFiscal.updateStatusReceitaDealFiscal", query = "UPDATE RECEITA_DEAL_FISCAL RDF" +
				" SET RDF.REDF_IN_STATUS = :revenueStatus," +
				" RDF.REDF_TX_ERROR = :errorMessage," +
				" RDF.REDF_CD_ERP_PEDIDO = :megaOrderID " +
				" WHERE RDF.REDF_CD_RECEITA_DFISCAL = :revenueDealFiscalCode ", resultClass = ReceitaDealFiscal.class),
		@NamedNativeQuery(name = "ReceitaDealFiscal.findNotIntegratedRevenues", query = "select count(*) from RECEITA_DEAL_FISCAL rdf " +
				" where (rdf.REDF_IN_STATUS != 'I' or rdf.REDF_IN_STATUS is null) " +
				" and rdf.REDF_VL_RECEITA > 0 " +
				" and REMO_CD_RECEITA_MOEDA = :revenueCurrencyCode ", resultSetMapping = "scalarReceitaDealFiscal")})
@NamedQueries({
		@NamedQuery(name = "ReceitaDealFiscal.findAll", query = "SELECT t FROM ReceitaDealFiscal t"),
		@NamedQuery(name = "ReceitaDealFiscal.findByReceita", query = "SELECT rdf FROM ReceitaDealFiscal rdf"
				+ " JOIN FETCH rdf.receitaMoeda rm "
				+ " JOIN FETCH rm.receita r " + " WHERE r.codigoReceita = ?"),
		@NamedQuery(name = "ReceitaDealFiscal.findByContratoPraticaAndDataMes", query = "SELECT rdf FROM ReceitaDealFiscal rdf"
				+ " JOIN FETCH rdf.receitaMoeda rm "
				+ " JOIN FETCH rm.receita r "
				+ " JOIN FETCH r.contratoPratica cp "
				+ " JOIN FETCH cp.convergencias cv "
				+ " JOIN FETCH cv.grupoCusto gc "
				+ " JOIN FETCH rdf.dealFiscal df "
				+ " JOIN FETCH df.empresa e "
				+ " JOIN FETCH e.empresa e1 "
				+ " WHERE (cp.codigoContratoPratica = ? OR (? = -1L))"
				+ " AND rdf.valorReceita > 0"
				+ " AND (e1.codigoEmpresa = ? OR (? = -1L)) "
				+ " AND cv.codigoProjetoMega IS NOT NULL "
				+ " AND TRUNC(r.dataMes) = TRUNC(?) "
				+ " AND (rdf.indicadorStatus = ? OR (? is null)) "
				+ " AND r.indicadorVersao IN ('PB', 'IN', 'PD')"),
		@NamedQuery(name = "ReceitaDealFiscal.findByContratoPraticaAndDataMesToAjuste", query = "SELECT rdf FROM ReceitaDealFiscal rdf"
				+ " JOIN FETCH rdf.receitaMoeda rm "
				+ " JOIN FETCH rm.receita r "
				+ " JOIN FETCH r.contratoPratica cp "
				+ " WHERE (cp.codigoContratoPratica = ? OR (? = -1L))"
				+ " AND TRUNC(r.dataMes) = TRUNC(?) "
				+ " AND r.indicadorVersao IN ('PB', 'IN')"),
		@NamedQuery(name = "ReceitaDealFiscal.findByFilter", query = "SELECT distinct rdf FROM ReceitaDealFiscal rdf "
				+ " LEFT JOIN FETCH rdf.receitaMoeda rm "
				+ " LEFT JOIN FETCH rm.receita r"
				+ " LEFT JOIN r.contratoPratica.contratoPraticaCentroLucros contratoPraticaCL "
				+ " WHERE (TRUNC(r.dataMes) between TRUNC(contratoPraticaCL.dataInicioVigencia) AND TRUNC(nvl(contratoPraticaCL.dataFimVigencia, sysdate)))"
				+ " AND (r.contratoPratica.codigoContratoPratica = ? OR ? = 0L)"
				+ " AND (r.contratoPratica.msa.cliente.codigoCliente = ? OR ? = 0L)"
				+ " AND (contratoPraticaCL.centroLucro.codigoCentroLucro = ? OR ? = 0L)"
				+ " AND (contratoPraticaCL.centroLucro.naturezaCentroLucro.codigoNatureza = ? OR ? = 0L)"
				+ " AND (TRUNC(r.dataMes) between TRUNC(?) AND TRUNC(?))"),
		@NamedQuery(name = "ReceitaDealFiscal.getTotalReceitaByDealAndReceita", query = "SELECT SUM(rdf.valorReceita) FROM ReceitaDealFiscal rdf"
				+ " WHERE rdf.receitaMoeda.receita.codigoReceita = ? "
				+ "   AND rdf.dealFiscal.codigoDealFiscal = ?"),
		@NamedQuery(name = "ReceitaDealFiscal.findByReceitaAndDeal", query = "SELECT rdf FROM ReceitaDealFiscal rdf "
				+ " LEFT JOIN FETCH rdf.receitaMoeda rm "
				+ " LEFT JOIN FETCH rm.receita r"
				+ " WHERE r.codigoReceita = ? "
				+ " AND rdf.dealFiscal.codigoDealFiscal = ?"),
		@NamedQuery(name = "ReceitaDealFiscal.findByFilterSub", query = "SELECT rdf FROM ReceitaDealFiscal rdf "
				+ " LEFT JOIN FETCH rdf.receitaMoeda rm "
				+ " LEFT JOIN FETCH rm.receita r "
				+ " LEFT JOIN FETCH r.contratoPratica cp "
				+ " LEFT JOIN FETCH cp.msa msa "
				+ " LEFT JOIN FETCH msa.cliente cl "
				+ " WHERE rdf.receitaMoeda.receita.codigoReceita = r.codigoReceita "
				+ " AND r.contratoPratica.codigoContratoPratica = cp.codigoContratoPratica "
				+ " AND cp.msa.codigoMsa = msa.codigoMsa "
				+ " AND msa.cliente.codigoCliente = cl.codigoCliente "
				+ " AND (cp.codigoContratoPratica = ? OR ? = 0L)"
				+ " AND (cl.codigoCliente = ? OR ? = 0L)"
				+ " AND (TRUNC(r.dataMes) BETWEEN TRUNC(?) AND TRUNC(?)) "
				+ " AND (rdf.receitaMoeda.receita.codigoReceita = ? OR ? = 0L) "
				+ " AND (rdf.dealFiscal.codigoDealFiscal = ? OR ? = 0L)"),
		@NamedQuery(name = "ReceitaDealFiscal.findByActiveAndCLobAndMoeda", query = "SELECT rdf FROM ReceitaDealFiscal rdf "
				+ " LEFT JOIN rdf.dealFiscal df "
				+ " LEFT JOIN df.cpraticaDfiscals cpdf "
				+ " WHERE df.indicadorStatus = 'A' "
				+ " AND cpdf.contratoPratica.codigoContratoPratica = ? "
				+ " AND df.moeda.codigoMoeda = ? "),
		@NamedQuery(name = "ReceitaDealFiscal.findByReceitaMoeda", query = "SELECT rdf FROM ReceitaDealFiscal rdf "
				+ "LEFT JOIN rdf.receitaMoeda rm "
				+ "WHERE rm.codigoReceitaMoeda = ?"),
		@NamedQuery(name = "ReceitaDealFiscal.getTotalPublishedByDealFiscalAndDate", query = "SELECT SUM(rdf.valorReceita) FROM ReceitaDealFiscal rdf "
				+ " WHERE TRUNC(rdf.receitaMoeda.receita.dataMes) <= :dataFim "
				+ " AND rdf.dealFiscal.codigoDealFiscal = :codigoDealFiscal "
				+ " AND UPPER(rdf.receitaMoeda.receita.indicadorVersao) IN ('PB', 'IN', 'PD')"),
		@NamedQuery(name = "ReceitaDealFiscal.findPublishedAndIntegrateByDealFiscal", query = "SELECT rdf FROM ReceitaDealFiscal rdf "
				+ "WHERE rdf.dealFiscal.codigoDealFiscal = ? "
				+ "AND rdf.receitaMoeda.receita.indicadorVersao IN ('PB', 'IN', 'PD')"),
		@NamedQuery(name = "ReceitaDealFiscal.findByDealFiscal", query = "SELECT rdf FROM ReceitaDealFiscal rdf "
				+ " WHERE (rdf.dealFiscal.codigoDealFiscal = ?)")

})
public class ReceitaDealFiscal implements java.io.Serializable {

	// ========================================================================
	// BEGIN - Coloque aqui o codigo manual
	// ========================================================================

	/** Constante para NamedQuery " ReceitaDealFiscal.findByReceita". */
	public static final String FIND_BY_RECEITA = "ReceitaDealFiscal.findByReceita";

	public static final String FIND_NOT_INTEGRATED_REVENUES = "ReceitaDealFiscal.findNotIntegratedRevenues";


	public static final String UPDATE_STATUS_RECEITA_DEAL_FISCAL = "ReceitaDealFiscal.updateStatusReceitaDealFiscal";

	/**
	 * Constante para NamedQuery
	 * "ReceitaDealFiscal.findByContratoPraticaAndDataMes".
	 */
	public static final String FIND_BY_CONTRATO_PRATICA_AND_DATA_MES = "ReceitaDealFiscal.findByContratoPraticaAndDataMes";

	/**
	 * Constante para NamedQuery
	 * "ReceitaDealFiscal.findByContratoPraticaAndDataMes".
	 */
	public static final String FIND_BY_CONTRATO_PRATICA_AND_DATA_MES_TO_AJUSTE = "ReceitaDealFiscal.findByContratoPraticaAndDataMesToAjuste";

	/** Constante para NamedQuery "ReceitaDealFiscal.findByFilter". */
	public static final String FIND_BY_FILTER = "ReceitaDealFiscal.findByFilter";

	/** Constante para NamedQuery "ReceitaDealFiscal.findByFilterSub". */
	public static final String FIND_BY_FILTER_SUB = "ReceitaDealFiscal.findByFilterSub";

	/** Constante para NamedQuery "ReceitaDealFiscal.findByFilter2". */
	public static final String FIND_BY_FILTER_2 = "ReceitaDealFiscal.findByFilter2";

	/**
	 * Constante para NamedQuery
	 * "ReceitaDealFiscal.getTotalReceitaByDealAndReceita".
	 */
	public static final String GET_TOTAL_BY_DEAL_AND_RECEITA = "ReceitaDealFiscal.getTotalReceitaByDealAndReceita";

	/**
	 * Constante para NamedQuery "ReceitaDealFiscal.findByDealAndReceita".
	 */
	public static final String FIND_BY_RECEITA_AND_DEAL = "ReceitaDealFiscal.findByReceitaAndDeal";

	/** Constante para NamedQuery "ReceitaDealFiscal.integrateReceita". */
	public static final String INTEGRATE_RECEITA = "ReceitaDealFiscal.integrateReceita";

	/**
	 * Constante para NamedQuery
	 * "ReceitaDealFiscal.findByActiveAndCLobAndMoeda".
	 */
	public static final String FIND_BY_ACTIVE_AND_CLOB_AND_MOEDA = "ReceitaDealFiscal.findByActiveAndCLobAndMoeda";

	/**
	 * Constante para NamedQuery "ReceitaDealFiscal.findByReceitaMoeda".
	 */
	public static final String FIND_BY_RECEITA_MOEDA = "ReceitaDealFiscal.findByReceitaMoeda";

	/**
	 * Valor do serialVersionUID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * Constante para NamedQuery "ReceitaDealFiscal.findAll".
	 */
	public static final String FIND_ALL = "ReceitaDealFiscal.findAll";

	/**
	 * Constante para NamedQuery
	 * "ReceitaDealFiscal.getTotalPublishedByDealFiscalAndDate"
	 */
	public static final String GET_TOTAL_PUBLISHED_BY_DEAL_FISCAL_AND_DATE = "ReceitaDealFiscal.getTotalPublishedByDealFiscalAndDate";

	/**
	 * Constante para NamedQuery
	 * "ReceitaDealFiscal.findPublishedAndIntegrateByDealFiscal".
	 */
	public static final String FIND_PUBLISHED_AND_INTEGRATE_BY_DEAL_FISCAL = "ReceitaDealFiscal.findPublishedAndIntegrateByDealFiscal";

	/**
	 * Constante para NamedQuery "ReceitaDealFiscal.findByDealFiscal".
	 */
	public static final String FIND_BY_DEAL_FISCAL = "ReceitaDealFiscal.findByDealFiscal";

	/**
	 * Atributo gerado a partir da coluna REDF_CD_RECEITA_DFISCAL.
	 */
	@Id
	@GeneratedValue(generator = "ReceitaDealFiscalSeq")
	@SequenceGenerator(name = "ReceitaDealFiscalSeq", sequenceName = "SQ_REDF_CD_RECEITA_DFISCAL", allocationSize = 1)
	@Column(name = "REDF_CD_RECEITA_DFISCAL", unique = true, nullable = false, precision = 18, scale = 0)
	private Long codigoReceitaDfiscal;

	/**
	 * Atributo gerado a partir da coluna REMO_CD_RECEITA_MOEDA.
	 */
	@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "REMO_CD_RECEITA_MOEDA", nullable = false)
	private ReceitaMoeda receitaMoeda;

	/**
	 * Atributo gerado a partir da coluna DEFI_CD_DEAL_FISCAL.
	 */
	@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "DEFI_CD_DEAL_FISCAL", nullable = false)
	private DealFiscal dealFiscal;

	/**
	 * Atributo gerado a partir da coluna REDF_VL_RECEITA.
	 */
	@Audited
	@Column(name = "REDF_VL_RECEITA", precision = 22, scale = 0)
	private BigDecimal valorReceita;

	/**
	 * Atributo gerado a partir da coluna REDF_IN_STATUS.
	 */
	@Audited
	@Column(name = "REDF_IN_STATUS", length = 1)
	private String indicadorStatus;

	/**
	 * Atributo gerado a partir da coluna REDF_TX_ERROR.
	 */
	@Audited
	@Column(name = "REDF_TX_ERROR", length = 3000)
	private String textoError;

	/**
	 * Atributo gerado a partir da coluna REDF_CD_ERP_PEDIDO. Codigo do Pedido
	 * vindo do Mega
	 */
	@Audited
	@Column(name = "REDF_CD_ERP_PEDIDO", precision = 22, scale = 0)
	private BigDecimal codigoErpPedido;

	/**
	 * Atributo gerado a partir da coluna REDF_IN_AJUSTE.
	 */
	@Audited
	@Column(name = "REDF_IN_AJUSTE", length = 1)
	private String indicadorAjuste;

	/**
	 * Atributo gerado a partir da coluna REDF_CD_ERP_PEDIDO_FATURA.
	 */
	@Audited
	@Column(name = "REDF_CD_ERP_PEDIDO_FATURA", precision = 22, scale = 0)
	private BigDecimal codigoErpPedidoFatura;

	/**
	 * Atributo gerado a partir da coluna REDF_PR_IMPOSTO.
	 */
	@Audited
	@Column(name = "REDF_PR_IMPOSTO", precision = 22, scale = 0)
	private BigDecimal percentualImposto;

	@Audited
	@Column(name = "REDF_IN_INTEG_QUICKBOOKS", length = 1)
	private String indicadorIntegradoQuickbooks;

	@Column(name = "REDF_IN_INTEG_QB_ONLINE", length = 1)
	@Type(type="yes_no")
	private Boolean indicadorIntegradoQBO;

	@Audited
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "REDF_DT_ATUALIZACAO", length = 7)
	private Date dataAtualizacao;

	@Audited
	@Column(name = "REDF_ORCL_DOC_NUMBER")
	private String oracleDocumentNumber;

	/**
	 * Atributo gerado a partir da coluna REDF_PR_IMPOSTO.
	 */
	@OneToMany(fetch = FetchType.EAGER, mappedBy = "receitaDealFiscal")
	private Set<AjusteReceita> ajusteReceitas = new HashSet<AjusteReceita>(0);

	/**
	 * Atributo gerado a partir da coluna REDF_PR_IMPOSTO.
	 */
	@OneToOne(fetch = FetchType.EAGER, mappedBy = "receitaDealFiscal", cascade = CascadeType.ALL)
	private ReceitaPlantao receitaPlantao = new ReceitaPlantao();

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "receitaDealFiscal")
	private Set<FaturaReceita> faturaReceitas = new HashSet<FaturaReceita>(0);

	/**
	 * Construtor default.
	 */
	public ReceitaDealFiscal() {
	}

	/**
	 * Construtor com preenchimento da entidade.
	 * 
	 * @param codigoReceitaDfiscal
	 *            Valor do atributo codigoReceitaDfiscal;
	 * @param receitaMoeda
	 *            Valor do atributo receitaMoeda;
	 * @param dealFiscal
	 *            Valor do atributo dealFiscal;
	 */
	public ReceitaDealFiscal(Long codigoReceitaDfiscal,
			ReceitaMoeda receitaMoeda, DealFiscal dealFiscal) {
		this.codigoReceitaDfiscal = codigoReceitaDfiscal;
		this.receitaMoeda = receitaMoeda;
		this.dealFiscal = dealFiscal;
	}

	/**
	 * Construtor com preenchimento da entidade.
	 * 
	 * @param codigoReceitaDfiscal
	 *            Valor do atributo codigoReceitaDfiscal;
	 * @param receitaMoeda
	 *            Valor do atributo receitaMoeda;
	 * @param dealFiscal
	 *            Valor do atributo dealFiscal;
	 */
	public ReceitaDealFiscal(Long codigoReceitaDfiscal,
			ReceitaMoeda receitaMoeda, DealFiscal dealFiscal,
			BigDecimal valorReceita, String indicadorStatus, String textoError,
			BigDecimal codigoErpPedido, String indicadorAjuste,
			BigDecimal codigoErpPedidoFatura, BigDecimal percentualImposto,
			Set<AjusteReceita> ajusteReceitas, Set<FaturaReceita> faturaReceitas) {
		this.codigoReceitaDfiscal = codigoReceitaDfiscal;
		this.receitaMoeda = receitaMoeda;
		this.dealFiscal = dealFiscal;
		this.valorReceita = valorReceita;
		this.indicadorStatus = indicadorStatus;
		this.textoError = textoError;
		this.codigoErpPedido = codigoErpPedido;
		this.indicadorAjuste = indicadorAjuste;
		this.codigoErpPedidoFatura = codigoErpPedidoFatura;
		this.percentualImposto = percentualImposto;
		this.ajusteReceitas = ajusteReceitas;
		this.faturaReceitas = faturaReceitas;
	}

	/**
	 * Obtem o valor do atributo codigoReceitaDfiscal.<BR>
	 * Atributo gerado a partir da coluna REDF_CD_RECEITA_DFISCAL.
	 * 
	 * @return Valor do atributo codigoReceitaDfiscal.
	 */
	public Long getCodigoReceitaDfiscal() {
		return this.codigoReceitaDfiscal;
	}

	/**
	 * Atualiza o valor do atributo codigoReceitaDfiscal.<BR>
	 * Atributo gerado a partir da coluna REDF_CD_RECEITA_DFISCAL.
	 * 
	 * @param codigoReceitaDfiscal
	 *            Novo valor para o atributo codigoReceitaDfiscal.
	 */
	public void setCodigoReceitaDfiscal(Long codigoReceitaDfiscal) {
		this.codigoReceitaDfiscal = codigoReceitaDfiscal;
	}

	/**
	 * Obtem o valor do atributo receitaMoeda.<BR>
	 * Atributo gerado a partir da coluna REMO_CD_RECEITA_MOEDA.
	 * 
	 * @return Valor do atributo receitaMoeda.
	 */
	public ReceitaMoeda getReceitaMoeda() {
		return this.receitaMoeda;
	}

	/**
	 * Atualiza o valor do atributo receitaMoeda.<BR>
	 * Atributo gerado a partir da coluna REMO_CD_RECEITA_MOEDA.
	 * 
	 * @param receitaMoeda
	 *            Novo valor para o atributo receitaMoeda.
	 */
	public void setReceitaMoeda(ReceitaMoeda receitaMoeda) {
		this.receitaMoeda = receitaMoeda;
	}

	/**
	 * Obtem o valor do atributo dealFiscal.<BR>
	 * Atributo gerado a partir da coluna DEFI_CD_DEAL_FISCAL.
	 * 
	 * @return Valor do atributo dealFiscal.
	 */
	public DealFiscal getDealFiscal() {
		return this.dealFiscal;
	}

	/**
	 * Atualiza o valor do atributo dealFiscal.<BR>
	 * Atributo gerado a partir da coluna DEFI_CD_DEAL_FISCAL.
	 * 
	 * @param dealFiscal
	 *            Novo valor para o atributo dealFiscal.
	 */
	public void setDealFiscal(DealFiscal dealFiscal) {
		this.dealFiscal = dealFiscal;
	}

	/**
	 * Obtem o valor do atributo valorReceita.<BR>
	 * Atributo gerado a partir da coluna REDF_VL_RECEITA.
	 * 
	 * @return Valor do atributo valorReceita.
	 */
	public BigDecimal getValorReceita() {
		return this.valorReceita;
	}

	/**
	 * Atualiza o valor do atributo valorReceita.<BR>
	 * Atributo gerado a partir da coluna REDF_VL_RECEITA.
	 * 
	 * @param valorReceita
	 *            Novo valor para o atributo valorReceita.
	 */
	public void setValorReceita(BigDecimal valorReceita) {
		this.valorReceita = valorReceita;
	}

	/**
	 * Obtem o valor do atributo indicadorStatus.<BR>
	 * Atributo gerado a partir da coluna REDF_IN_STATUS.
	 * 
	 * @return Valor do atributo indicadorStatus.
	 */
	public String getIndicadorStatus() {
		return this.indicadorStatus;
	}

	/**
	 * Atualiza o valor do atributo indicadorStatus.<BR>
	 * Atributo gerado a partir da coluna REDF_IN_STATUS.
	 * 
	 * @param indicadorStatus
	 *            Novo valor para o atributo indicadorStatus.
	 */
	public void setIndicadorStatus(String indicadorStatus) {
		this.indicadorStatus = indicadorStatus;
	}

	/**
	 * Obtem o valor do atributo textoError.<BR>
	 * Atributo gerado a partir da coluna REDF_TX_ERROR.
	 * 
	 * @return Valor do atributo textoError.
	 */
	public String getTextoError() {
		return this.textoError;
	}

	/**
	 * Atualiza o valor do atributo textoError.<BR>
	 * Atributo gerado a partir da coluna REDF_TX_ERROR.
	 * 
	 * @param textoError
	 *            Novo valor para o atributo textoError.
	 */
	public void setTextoError(String textoError) {
		this.textoError = textoError;
	}

	/**
	 * Obtem o valor do atributo codigoErpPedido.<BR>
	 * Atributo gerado a partir da coluna REDF_CD_ERP_PEDIDO. Codigo do Pedido
	 * vindo do Mega
	 * 
	 * @return Valor do atributo codigoErpPedido.
	 */
	public BigDecimal getCodigoErpPedido() {
		return this.codigoErpPedido;
	}

	/**
	 * Atualiza o valor do atributo codigoErpPedido.<BR>
	 * Atributo gerado a partir da coluna REDF_CD_ERP_PEDIDO. Codigo do Pedido
	 * vindo do Mega
	 * 
	 * @param codigoErpPedido
	 *            Novo valor para o atributo codigoErpPedido.
	 */
	public void setCodigoErpPedido(BigDecimal codigoErpPedido) {
		this.codigoErpPedido = codigoErpPedido;
	}

	public Date getDataAtualizacao() {
		return dataAtualizacao;
	}

	public void setDataAtualizacao(Date dataAtualizacao) {
		this.dataAtualizacao = dataAtualizacao;
	}

	/**
	 * Obtem o valor do atributo indicadorAjuste.<BR>
	 * Atributo gerado a partir da coluna REDF_IN_AJUSTE.
	 * 
	 * @return Valor do atributo indicadorAjuste.
	 */
	public String getIndicadorAjuste() {
		return this.indicadorAjuste;
	}

	/**
	 * Atualiza o valor do atributo indicadorAjuste.<BR>
	 * Atributo gerado a partir da coluna REDF_IN_AJUSTE.
	 * 
	 * @param indicadorAjuste
	 *            Novo valor para o atributo indicadorAjuste.
	 */
	public void setIndicadorAjuste(String indicadorAjuste) {
		this.indicadorAjuste = indicadorAjuste;
	}

	/**
	 * @return the receitaPlantao
	 */
	public ReceitaPlantao getReceitaPlantao() {
		return receitaPlantao;
	}

	/**
	 * @param receitaPlantao the receitaPlantao to set
	 */
	public void setReceitaPlantao(ReceitaPlantao receitaPlantao) {
		this.receitaPlantao = receitaPlantao;
	}

	/**
	 * Obtem o valor do atributo codigoErpPedidoFatura.<BR>
	 * Atributo gerado a partir da coluna REDF_CD_ERP_PEDIDO_FATURA.
	 * 
	 * @return Valor do atributo codigoErpPedidoFatura.
	 */
	public BigDecimal getCodigoErpPedidoFatura() {
		return this.codigoErpPedidoFatura;
	}

	/**
	 * Atualiza o valor do atributo codigoErpPedidoFatura.<BR>
	 * Atributo gerado a partir da coluna REDF_CD_ERP_PEDIDO_FATURA.
	 * 
	 * @param codigoErpPedidoFatura
	 *            Novo valor para o atributo codigoErpPedidoFatura.
	 */
	public void setCodigoErpPedidoFatura(BigDecimal codigoErpPedidoFatura) {
		this.codigoErpPedidoFatura = codigoErpPedidoFatura;
	}

	/**
	 * Obtem o valor do atributo percentualImposto.<BR>
	 * Atributo gerado a partir da coluna REDF_PR_IMPOSTO.
	 * 
	 * @return Valor do atributo percentualImposto.
	 */
	public BigDecimal getPercentualImposto() {
		return this.percentualImposto;
	}

	/**
	 * Atualiza o valor do atributo percentualImposto.<BR>
	 * Atributo gerado a partir da coluna REDF_PR_IMPOSTO.
	 * 
	 * @param percentualImposto
	 *            Novo valor para o atributo percentualImposto.
	 */
	public void setPercentualImposto(BigDecimal percentualImposto) {
		this.percentualImposto = percentualImposto;
	}

	/**
	 * Obtem o valor do atributo ajusteReceitas.<BR>
	 * 
	 * @return Valor do atributo ajusteReceitas.
	 */
	public Set<AjusteReceita> getAjusteReceitas() {
		return this.ajusteReceitas;
	}

	/**
	 * Atualiza o valor do atributo ajusteReceitas.<BR>
	 * 
	 * @param ajusteReceitas
	 *            Novo valor para o atributo ajusteReceitas.
	 */
	public void setAjusteReceitas(Set<AjusteReceita> ajusteReceitas) {
		this.ajusteReceitas = ajusteReceitas;
	}

	/**
	 * Obtem o valor do atributo faturaReceitas.<BR>
	 * 
	 * @return Valor do atributo faturaReceitas.
	 */
	public Set<FaturaReceita> getFaturaReceitas() {
		return this.faturaReceitas;
	}

	/**
	 * Atualiza o valor do atributo faturaReceitas.<BR>
	 * 
	 * @param faturaReceitas
	 *            Novo valor para o atributo faturaReceitas.
	 */
	public void setFaturaReceitas(final Set<FaturaReceita> faturaReceitas) {
		this.faturaReceitas = faturaReceitas;
	}

	/**
	 * @see Object#toString()
	 */
	@Override
	public String toString() {
		StringBuffer buffer = new StringBuffer();

		buffer.append(getClass().getName()).append("@")
				.append(Integer.toHexString(hashCode())).append(" [");
		buffer.append("codigoReceitaDfiscal").append("='")
				.append(getCodigoReceitaDfiscal()).append("' ");
		buffer.append("receitaMoeda").append("='").append(getReceitaMoeda())
				.append("' ");
		buffer.append("valorReceita").append("='").append(getValorReceita())
				.append("' ");
		buffer.append("indicadorStatus").append("='")
				.append(getIndicadorStatus()).append("' ");
		buffer.append("textoError").append("='").append(getTextoError())
				.append("' ");
		buffer.append("codigoErpPedido").append("='")
				.append(getCodigoErpPedido()).append("' ");
		buffer.append("indicadorAjuste").append("='")
				.append(getIndicadorAjuste()).append("' ");
		buffer.append("codigoErpPedidoFatura").append("='")
				.append(getCodigoErpPedidoFatura()).append("' ");
		buffer.append("percentualImposto").append("='")
				.append(getPercentualImposto()).append("' ");
		buffer.append("oracleDocumentNumber").append("='")
				.append(getOracleDocumentNumber()).append("' ");
		buffer.append("]");

		return buffer.toString();
	}

	/**
	 * Retorna o Total de Valores de Ajustes de Receita.
	 * 
	 * @return total do valor de ajuste
	 */
	public BigDecimal getTotalAdjustmentValue() {
		BigDecimal totalAjuste = new BigDecimal(0);
		// itera, pegando os valores dos ajustes
		for (AjusteReceita ajuste : this.ajusteReceitas) {
			totalAjuste = totalAjuste.add(ajuste.getValorAjuste());
		}
		return totalAjuste;
	}
	
	/**
	 * Retorna o Total de Valores de ReceitaPlantao.
	 * 
	 * @return total do valor de ReceitaPlantao
	 */
	public BigDecimal getTotalReceitaPlantao() {

		if (this.receitaPlantao == null) {
			return BigDecimal.ZERO;
		}

		return this.receitaPlantao.getValorReceitaPlantao();
	}

	public String getIndicadorIntegradoQuickbooks() {
		return indicadorIntegradoQuickbooks;
	}

	public void setIndicadorIntegradoQuickbooks(String indicadorIntegradoQuickbooks) {
		this.indicadorIntegradoQuickbooks = indicadorIntegradoQuickbooks;
	}

	public Boolean getIndicadorIntegradoQBO() {
		return indicadorIntegradoQBO;
	}

	public void setIndicadorIntegradoQBO(Boolean indicadorIntegradoQBO) {
		this.indicadorIntegradoQBO = indicadorIntegradoQBO;
	}
	public String getOracleDocumentNumber() {
		return oracleDocumentNumber;
	}
	public void setOracleDocumentNumber(String oracleDocumentNumber) {
		this.oracleDocumentNumber = oracleDocumentNumber;
	}
}
