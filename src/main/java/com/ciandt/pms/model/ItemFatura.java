/*
 * @(#) ItemFatura.java
 * Copyright (c) 2008 Ci&T Software S/A.
 * All Rights Reserved.
 */
package com.ciandt.pms.model;

import javax.persistence.*;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * Entity gerado a partir da tabela ITEM_FATURA.
 * 
 * @author Generated by Hibernate Tools 3.2.4.GA
 * @since 30/10/2009 10:42:58
 * @version 09/01/19 1.1 10:08:00
 */
@Entity
@Table(name = "ITEM_FATURA")
@NamedQueries({
		@NamedQuery(name = "ItemFatura.findAll", query = "SELECT t FROM ItemFatura t"),

		@NamedQuery(name = "ItemFatura.getTotalByFatura", query = "SELECT SUM(if.valorItem) FROM ItemFatura if"
				+ " WHERE if.fatura.codigoFatura = ? "
				+ " AND if.fonteReceita.indicadorTipo = 'SV' "),

		@NamedQuery(name = "ItemFatura.findByFaturaSubmetida", query = "SELECT itfa FROM ItemFatura itfa "
				+ " WHERE itfa.fatura.indicadorStatus = 'SB' "
				+ " ORDER BY itfa.fatura.dataPrevisao ASC "),

		@NamedQuery(name = "ItemFatura.findByFatura", query = "SELECT itfa FROM ItemFatura itfa "
				+ " LEFT JOIN FETCH itfa.contratoPratica cp "
				+ " WHERE itfa.fatura.codigoFatura = ? "
				+ " ORDER BY itfa.codigoItemFatura ASC "),

		@NamedQuery(name = "ItemFatura.findByFilter", query = "SELECT if FROM ItemFatura if "
				+ " JOIN FETCH if.fonteReceita "
				+ " JOIN FETCH if.fatura f "
				+ " JOIN FETCH f.dealFiscal df "
				+ " JOIN FETCH df.cliente c "
				+ " JOIN FETCH df.empresa e "
				+ " WHERE (f.dataPrevisao between (?1) AND (?2)) "
				+ "     AND (e.codigoEmpresa = ?3 OR ?3 = 0L) "
				+ "     AND (if.numeroNotaFiscal = ?4 OR ?4 is null )"
				+ "     AND (df.cliente.codigoCliente = ?5 OR ?5 = 0L )"
				+ "     AND (if.dataPagamento is null OR ?6 = true)"
				+ "     AND (f.indicadorStatus = ?7 OR ?7 is null)"
				+ "     AND (df.msa.codigoMsa = ?8 OR ?8 = 0L) "
				+ "     AND ( (if.dataPagamento BETWEEN ?9 AND ?10) " 
				+ "            OR (if.dataPagamento <= ?10 AND ?9 IS NULL) " 
				+ "            OR (if.dataPagamento >= ?9 AND ?10 IS NULL) " 
				+ "            OR (?9 IS NULL AND ?10 IS NULL) ) "),

		@NamedQuery(name = "ItemFatura.findByFilterDataVenc", query = "SELECT if FROM ItemFatura if "
				+ " JOIN FETCH if.fonteReceita "
				+ " JOIN FETCH if.fatura f "
				+ " JOIN FETCH f.dealFiscal df "
				+ " JOIN FETCH df.cliente c "
				+ " JOIN FETCH df.empresa e "
				+ " WHERE (f.dataVencimento between (?1) AND (?2)) "
				+ "     AND (e.codigoEmpresa = ?3 OR ?3 = 0L) "
				+ "     AND (if.numeroNotaFiscal = ?4 OR ?4 is null )"
				+ "     AND (df.cliente.codigoCliente = ?5 OR ?5 = 0L )"
				+ "     AND (if.dataPagamento is null OR ?6 = true)"
				+ "     AND (f.indicadorStatus = ?7 OR ?7 is null)"
				+ "     AND (df.msa.codigoMsa = ?8 OR ?8 = 0L) "
				+ "     AND ( (if.dataPagamento BETWEEN ?9 AND ?10) " 
				+ "            OR (if.dataPagamento <= ?10 AND ?9 IS NULL) " 
				+ "            OR (if.dataPagamento >= ?9 AND ?10 IS NULL) " 
				+ "            OR (?9 IS NULL AND ?10 IS NULL) ) "),

		@NamedQuery(name = "ItemFatura.findByFilterComissao", query = "SELECT if FROM ItemFatura if "
				+ " JOIN FETCH if.fonteReceita fr "
				+ " JOIN FETCH if.fatura f "
				+ " JOIN FETCH f.dealFiscal df "
				+ " WHERE if.dataPagamento between (?1) AND (?2) "
				+ "     AND (f.codigoLoginAe = ?3 OR ?3 is null)"
				+ "     AND fr.codigoFonteReceita <> 2L"
				+ "     AND size(if.comissaoFaturas) = 0 "
				+ "     AND ( (df.msa.codigoMsa = ?4) OR (?4 is 0L) ) "
				+ "     AND ( (f.codigoFatura = ?5) OR (?5 is null) ) "
				+ " ORDER BY if.dataPagamento"),

		@NamedQuery(name = "ItemFatura.findByFilterComissao2", query = "SELECT if FROM ItemFatura if"
				+ " JOIN FETCH if.fatura f "
				+ " JOIN FETCH f.dealFiscal df "
				+ " JOIN FETCH df.msa msa "
				+ " JOIN FETCH df.cpraticaDfiscals cpdf "
				+ " WHERE ( if.dataPagamento between (?3) AND (?4) )"
				+ "     AND (f.codigoLoginAe = ?5 OR ?5 is null)"
				+ "     AND ( cpdf.contratoPratica.codigoContratoPratica = ?1 OR ?1 = 0L )"
				+ "     AND ( (msa.cliente.codigoCliente = ?2) OR (?2 = 0L) ) "
				+ "     AND if.fonteReceita.indicadorTipo = 'SV'"
				+ "     AND size(if.comissaoFaturas) = 0 "
				+ " ORDER BY if.dataPagamento") })
public class ItemFatura implements java.io.Serializable, Cloneable {

	// ========================================================================
	// BEGIN - Coloque aqui o codigo manual
	// ========================================================================

	/** Constante para NamedQuery "ItemFatura.findByFatura". */
	public static final String FIND_BY_FATURA = "ItemFatura.findByFatura";

	/** Constante para NamedQuery "ItemFatura.getTotalByFatura". */
	public static final String GET_TOTAL_BY_FATURA = "ItemFatura.getTotalByFatura";

	/** Constante para NamedQuery "ItemFatura.findByFilterComissao". */
	public static final String FIND_BY_FILTER_COMISSAO = "ItemFatura.findByFilterComissao";

	/** Constante para NamedQuery "ItemFatura.findByFilter2". */
	public static final String FIND_BY_FILTER_COMISSAO_2 = "ItemFatura.findByFilterComissao2";

	/** Constante para NamedQuery "ItemFatura.findByFilter". */
	public static final String FIND_BY_FILTER = "ItemFatura.findByFilter";

	/** Constante para NamedQuery "ItemFatura.findByFilter". */
	public static final String FIND_BY_FILTER_DATA_VENC = "ItemFatura.findByFilterDataVenc";

	/** Comissao Fatura list. */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "itemFatura")
	private List<ComissaoFatura> comissaoFaturas = new ArrayList<ComissaoFatura>();

	/**
	 * Realiza uma copia do objeto, porem com uma referencia diferente.
	 * 
	 * @return a cï¿½pia do Objeto
	 */
	public ItemFatura getClone() {
		try {
			return (ItemFatura) super.clone();
		} catch (CloneNotSupportedException e) {
			e.printStackTrace();
			return null;
		}
	}

	// ========================================================================
	// END
	// ========================================================================

	/**
	 * Valor do serialVersionUID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * Constante para NamedQuery "ItemFatura.findAll".
	 */
	public static final String FIND_ALL = "ItemFatura.findAll";

	/**
	 * Atributo gerado a partir da coluna ITFA_CD_ITEM_FATURA.
	 */
	@Id
	@GeneratedValue(generator = "ItemFaturaSeq")
	@SequenceGenerator(name = "ItemFaturaSeq", sequenceName = "SQ_ITFA_CD_ITEM_FATURA", allocationSize = 1)
	@Column(name = "ITFA_CD_ITEM_FATURA", unique = true, nullable = false, precision = 18, scale = 0)
	private Long codigoItemFatura;

	/**
	 * Atributo gerado a partir da coluna FATU_CD_FATURA.
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "FATU_CD_FATURA", nullable = false)
	private Fatura fatura;

	/**
	 * Atributo gerado a partir da coluna COPR_CD_CONTRATO_PRATICA.
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "COPR_CD_CONTRATO_PRATICA", nullable = true)
	private ContratoPratica contratoPratica;

	/**
	 * Atributo gerado a partir da coluna TISE_CD_TIPO_SERVICO.
	 */
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "TISE_CD_TIPO_SERVICO", nullable = false)
	private TipoServico tipoServico;

	/**
	 * Atributo gerado a partir da coluna ITFA_TX_OBSERVACAO.
	 */

	@Column(name = "ITFA_TX_OBSERVACAO", length = 1000)
	private String textoObservacao;

	/**
	 * Atributo gerado a partir da coluna ITFA_VL_ITEM.
	 */

	@Column(name = "ITFA_VL_ITEM", precision = 22, scale = 0)
	private BigDecimal valorItem;

	/**
	 * Atributo transiente para status do item.
	 */
	@Transient
	private String statusItem;

	/**
	 * Atributo transiente para guardar o status da comissao por itemFatura.
	 */
	@Transient
	private String statusComissao;

	/**
	 * Atributo gerado a partir da coluna FORE_CD_FONTE_RECEITA.
	 */
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "FORE_CD_FONTE_RECEITA")
	private FonteReceita fonteReceita;

	/**
	 * Atributo gerado a partir da coluna ITFA_NR_NOTA_FISCAL.
	 */
	@Column(name = "ITFA_NR_NOTA_FISCAL", length = 100)
	private String numeroNotaFiscal;

	/**
	 * Atributo gerado a partir da coluna ITFA_NR_PEDIDO.
	 */
	@Column(name = "ITFA_NR_PEDIDO", length = 100)
	private String numeroPedido;

	/**
	 * Atributo gerado a partir da coluna ITFA_DT_PAGAMENTO.
	 */
	@Temporal(TemporalType.DATE)
	@Column(name = "ITFA_DT_PAGAMENTO", length = 7)
	private Date dataPagamento;

	/**
	 * Construtor default.
	 */
	public ItemFatura() {
	}

	public ItemFatura(ItemFaturaApagado itemFaturaApagado, Fatura fatura) {

		this.codigoItemFatura = itemFaturaApagado.getCodigoItemFatura();
		this.contratoPratica = itemFaturaApagado.getContratoPratica();
		this.fatura = fatura;
		this.tipoServico = itemFaturaApagado.getTipoServico();
		this.textoObservacao = itemFaturaApagado.getTextoObservacao();
		this.valorItem = itemFaturaApagado.getValorItem();
		this.fonteReceita = itemFaturaApagado.getFonteReceita();
		this.numeroNotaFiscal = itemFaturaApagado.getNumeroNotaFiscal();
		this.dataPagamento = itemFaturaApagado.getDataPagamento();
	}

	/**
	 * @return the comissaoFaturas
	 */
	public List<ComissaoFatura> getComissaoFaturas() {
		return comissaoFaturas;
	}

	/**
	 * @param comissaoFaturas
	 *            the comissaoFaturas to set
	 */
	public void setComissaoFaturas(final List<ComissaoFatura> comissaoFaturas) {
		this.comissaoFaturas = comissaoFaturas;
	}

	/**
	 * @return the codigoItemFatura
	 */
	public Long getCodigoItemFatura() {
		return codigoItemFatura;
	}

	/**
	 * @param codigoItemFatura
	 *            the codigoItemFatura to set
	 */
	public void setCodigoItemFatura(final Long codigoItemFatura) {
		this.codigoItemFatura = codigoItemFatura;
	}

	/**
	 * @return the fatura
	 */
	public Fatura getFatura() {
		return fatura;
	}

	/**
	 * @param fatura
	 *            the fatura to set
	 */
	public void setFatura(final Fatura fatura) {
		this.fatura = fatura;
	}

	/**
	 * @return the contratoPratica
	 */
	public ContratoPratica getContratoPratica() {
		return contratoPratica;
	}

	/**
	 * @param contratoPratica
	 *            the contratoPratica to set
	 */
	public void setContratoPratica(final ContratoPratica contratoPratica) {
		this.contratoPratica = contratoPratica;
	}

	/**
	 * @return the tipoServico
	 */
	public TipoServico getTipoServico() {
		return tipoServico;
	}

	/**
	 * @param tipoServico
	 *            the tipoServico to set
	 */
	public void setTipoServico(final TipoServico tipoServico) {
		this.tipoServico = tipoServico;
	}

	/**
	 * @return the textoObservacao
	 */
	public String getTextoObservacao() {
		return textoObservacao;
	}

	/**
	 * @param textoObservacao
	 *            the textoObservacao to set
	 */
	public void setTextoObservacao(final String textoObservacao) {
		this.textoObservacao = textoObservacao;
	}

	/**
	 * @return the valorItem
	 */
	public BigDecimal getValorItem() {
		return valorItem;
	}

	/**
	 * @param valorItem
	 *            the valorItem to set
	 */
	public void setValorItem(final BigDecimal valorItem) {
		this.valorItem = valorItem;
	}

	/**
	 * @return the statusItem
	 */
	public String getStatusItem() {
		return statusItem;
	}

	/**
	 * @param statusItem
	 *            the statusItem to set
	 */
	public void setStatusItem(final String statusItem) {
		this.statusItem = statusItem;
	}

	/**
	 * @return the statusComissao
	 */
	public String getStatusComissao() {
		return statusComissao;
	}

	/**
	 * @param statusComissao
	 *            the statusComissao to set
	 */
	public void setStatusComissao(final String statusComissao) {
		this.statusComissao = statusComissao;
	}

	/**
	 * @return the fonteReceita
	 */
	public FonteReceita getFonteReceita() {
		return fonteReceita;
	}

	/**
	 * @param fonteReceita
	 *            the fonteReceita to set
	 */
	public void setFonteReceita(final FonteReceita fonteReceita) {
		this.fonteReceita = fonteReceita;
	}

	/**
	 * @return the numeroNotaFiscal
	 */
	public String getNumeroNotaFiscal() {
		return numeroNotaFiscal;
	}

	/**
	 * @param numeroNotaFiscal
	 *            the numeroNotaFiscal to set
	 */
	public void setNumeroNotaFiscal(final String numeroNotaFiscal) {
		this.numeroNotaFiscal = numeroNotaFiscal;
	}

	/**
	 * @return the numeroPedido
	 */
	public String getNumeroPedido() {
		return numeroPedido;
	}

	/**
	 * @param numeroPedido
	 *            the numeroPedido to set
	 */
	public void setNumeroPedido(final String numeroPedido) {
		this.numeroPedido = numeroPedido;
	}

	/**
	 * @return the dataPagamento
	 */
	public Date getDataPagamento() {
		return dataPagamento;
	}

	/**
	 * @param dataPagamento
	 *            the dataPagamento to set
	 */
	public void setDataPagamento(final Date dataPagamento) {
		this.dataPagamento = dataPagamento;
	}

}