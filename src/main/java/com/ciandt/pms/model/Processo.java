/*
 * @(#) Processo.java
 * Copyright (c) 2008 Ci&T Software S/A.
 * All Rights Reserved.
 */
package com.ciandt.pms.model;

import javax.persistence.*;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * Entity gerado a partir da tabela PROCESSO.
 * 
 * @author Generated by Hibernate Tools 3.6.0
 * @since 17/10/2013 10:05:55
 * @version 09/01/19 1.1 10:08:00
 */
@Entity
@Table(name = "PROCESSO")
@NamedQueries({
		@NamedQuery(name = "Processo.findAll", query = "SELECT t FROM Processo t"),
		@NamedQuery(name = "Processo.findAllAtivo", query = "SELECT t FROM Processo t WHERE t.indicadorAtivo = ? ORDER BY t.codigoProcesso") })
public class Processo implements java.io.Serializable {

	/**
	 * Valor do serialVersionUID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * Constante para NamedQuery "Processo.findAll".
	 */
	public static final String FIND_ALL = "Processo.findAll";

	/**
	 * Constante para NamedQuery "Processo.findAllAtivo".
	 */
	public static final String FIND_ALL_ATIVO = "Processo.findAllAtivo";

	/**
	 * Atributo gerado a partir da coluna PROC_CD_PROCESSO.
	 */
	@Id
	@GeneratedValue(generator = "ProcessoSeq")
	@SequenceGenerator(name = "ProcessoSeq", sequenceName = "SQ_PROC_CD_PROCESSO", allocationSize = 1)
	@Column(name = "PROC_CD_PROCESSO", nullable = false, precision = 18, scale = 0)
	private Long codigoProcesso;

	/**
	 * Atributo gerado a partir da coluna PROC_NM_PROCESSO.
	 */

	@Column(name = "PROC_NM_PROCESSO", nullable = false, length = 100)
	private String nomeProcesso;

	/**
	 * Atributo gerado a partir da coluna PROC_IN_ATIVO.
	 */

	@Column(name = "PROC_IN_ATIVO", nullable = false, length = 1)
	private String indicadorAtivo;

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "processo")
	private Set<DreProcesso> dreProcessos = new HashSet<DreProcesso>(0);

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "processoByProcCdProcessoDependente")
	private Set<ProcessoDependencia> processoDependenciasForProcCdProcessoDependente = new HashSet<ProcessoDependencia>(
			0);

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "processoByProcCdProcessoDependencia")
	private Set<ProcessoDependencia> processoDependenciasForProcCdProcessoDependencia = new HashSet<ProcessoDependencia>(
			0);

	/**
	 * Construtor default.
	 */
	public Processo() {
	}

	/**
	 * Construtor com preenchimento da entidade.
	 * 
	 * @param codigoProcesso
	 *            Valor do atributo codigoProcesso;
	 * @param nomeProcesso
	 *            Valor do atributo nomeProcesso;
	 * @param indicadorAtivo
	 *            Valor do atributo indicadorAtivo;
	 */
	public Processo(Long codigoProcesso, String nomeProcesso,
			String indicadorAtivo) {
		this.codigoProcesso = codigoProcesso;
		this.nomeProcesso = nomeProcesso;
		this.indicadorAtivo = indicadorAtivo;
	}

	/**
	 * Construtor com preenchimento da entidade.
	 * 
	 * @param codigoProcesso
	 *            Valor do atributo codigoProcesso;
	 * @param nomeProcesso
	 *            Valor do atributo nomeProcesso;
	 * @param indicadorAtivo
	 *            Valor do atributo indicadorAtivo;
	 */
	public Processo(
			Long codigoProcesso,
			String nomeProcesso,
			String indicadorAtivo,
			String processosDependentes,
			Set<ProcessoDependencia> processoDependenciasForProcCdProcessoDependente,
			Set<DreProcesso> dreProcessos,
			Set<ProcessoDependencia> processoDependenciasForProcCdProcessoDependencia) {
		this.codigoProcesso = codigoProcesso;
		this.nomeProcesso = nomeProcesso;
		this.indicadorAtivo = indicadorAtivo;
		this.processoDependenciasForProcCdProcessoDependente = processoDependenciasForProcCdProcessoDependente;
		this.dreProcessos = dreProcessos;
		this.processoDependenciasForProcCdProcessoDependencia = processoDependenciasForProcCdProcessoDependencia;
	}

	/**
	 * Obtem o valor do atributo codigoProcesso.<BR>
	 * Atributo gerado a partir da coluna PROC_CD_PROCESSO.
	 * 
	 * @return Valor do atributo codigoProcesso.
	 */
	public Long getCodigoProcesso() {
		return this.codigoProcesso;
	}

	/**
	 * Atualiza o valor do atributo codigoProcesso.<BR>
	 * Atributo gerado a partir da coluna PROC_CD_PROCESSO.
	 * 
	 * @param codigoProcesso
	 *            Novo valor para o atributo codigoProcesso.
	 */
	public void setCodigoProcesso(Long codigoProcesso) {
		this.codigoProcesso = codigoProcesso;
	}

	/**
	 * Obtem o valor do atributo nomeProcesso.<BR>
	 * Atributo gerado a partir da coluna PROC_NM_PROCESSO.
	 * 
	 * @return Valor do atributo nomeProcesso.
	 */
	public String getNomeProcesso() {
		return this.nomeProcesso;
	}

	/**
	 * Atualiza o valor do atributo nomeProcesso.<BR>
	 * Atributo gerado a partir da coluna PROC_NM_PROCESSO.
	 * 
	 * @param nomeProcesso
	 *            Novo valor para o atributo nomeProcesso.
	 */
	public void setNomeProcesso(String nomeProcesso) {
		this.nomeProcesso = nomeProcesso;
	}

	/**
	 * Obtem o valor do atributo indicadorAtivo.<BR>
	 * Atributo gerado a partir da coluna PROC_IN_ATIVO.
	 * 
	 * <li>A - Ativo</li>
	 * <li>I - Inativo</li>
	 * 
	 * @return Valor do atributo indicadorAtivo.
	 */
	public String getIndicadorAtivo() {
		return this.indicadorAtivo;
	}

	/**
	 * Atualiza o valor do atributo indicadorAtivo.<BR>
	 * Atributo gerado a partir da coluna PROC_IN_ATIVO.
	 * 
	 * @param indicadorAtivo
	 *            Novo valor para o atributo indicadorAtivo.
	 */
	public void setIndicadorAtivo(String indicadorAtivo) {
		this.indicadorAtivo = indicadorAtivo;
	}

	/**
	 * Obtem o valor do atributo
	 * processoDependenciasForProcCdProcessoDependente.<BR>
	 * 
	 * @return Valor do atributo
	 *         processoDependenciasForProcCdProcessoDependente.
	 */
	public Set<ProcessoDependencia> getProcessoDependenciasForProcCdProcessoDependente() {
		return this.processoDependenciasForProcCdProcessoDependente;
	}

	/**
	 * Atualiza o valor do atributo
	 * processoDependenciasForProcCdProcessoDependente.<BR>
	 * 
	 * @param processoDependenciasForProcCdProcessoDependente
	 *            Novo valor para o atributo
	 *            processoDependenciasForProcCdProcessoDependente.
	 */
	public void setProcessoDependenciasForProcCdProcessoDependente(
			Set<ProcessoDependencia> processoDependenciasForProcCdProcessoDependente) {
		this.processoDependenciasForProcCdProcessoDependente = processoDependenciasForProcCdProcessoDependente;
	}

	/**
	 * Obtem o valor do atributo dreProcessos.<BR>
	 * 
	 * @return Valor do atributo dreProcessos.
	 */
	public Set<DreProcesso> getDreProcessos() {
		return this.dreProcessos;
	}

	/**
	 * Atualiza o valor do atributo dreProcessos.<BR>
	 * 
	 * @param dreProcessos
	 *            Novo valor para o atributo dreProcessos.
	 */
	public void setDreProcessos(Set<DreProcesso> dreProcessos) {
		this.dreProcessos = dreProcessos;
	}

	/**
	 * Obtem o valor do atributo
	 * processoDependenciasForProcCdProcessoDependencia.<BR>
	 * 
	 * @return Valor do atributo
	 *         processoDependenciasForProcCdProcessoDependencia.
	 */
	public Set<ProcessoDependencia> getProcessoDependenciasForProcCdProcessoDependencia() {
		return this.processoDependenciasForProcCdProcessoDependencia;
	}

	/**
	 * Atualiza o valor do atributo
	 * processoDependenciasForProcCdProcessoDependencia.<BR>
	 * 
	 * @param processoDependenciasForProcCdProcessoDependencia
	 *            Novo valor para o atributo
	 *            processoDependenciasForProcCdProcessoDependencia.
	 */
	public void setProcessoDependenciasForProcCdProcessoDependencia(
			Set<ProcessoDependencia> processoDependenciasForProcCdProcessoDependencia) {
		this.processoDependenciasForProcCdProcessoDependencia = processoDependenciasForProcCdProcessoDependencia;
	}

	/**
	 * @see Object#toString()
	 */
	@Override
	public String toString() {
		StringBuffer buffer = new StringBuffer();

		buffer.append(getClass().getName()).append("@")
				.append(Integer.toHexString(hashCode())).append(" [");
		buffer.append("codigoProcesso").append("='")
				.append(getCodigoProcesso()).append("' ");
		buffer.append("nomeProcesso").append("='").append(getNomeProcesso())
				.append("' ");
		buffer.append("indicadorAtivo").append("='")
				.append(getIndicadorAtivo()).append("' ");
		buffer.append("]");

		return buffer.toString();
	}

	/**
	 * Quem depende do {@link Processo} corrente.
	 * 
	 * @return
	 */
	public List<Processo> getDependentes() {
		List<Processo> processos = new ArrayList<Processo>();
		Processo procDependente = null;
		
		for (ProcessoDependencia p : this
				.getProcessoDependenciasForProcCdProcessoDependencia()) {
			procDependente = new Processo();
			procDependente.setCodigoProcesso(p
					.getProcessoByProcCdProcessoDependente());
			processos.add(procDependente);
		}
		
		return processos;
	}

	/**
	 * Quais são as dependencias do processo atual.
	 * 
	 * @return
	 */
	public List<Processo> getDependencias() {
		List<Processo> processos = new ArrayList<Processo>();
		Processo procDependencia = null;

		for (ProcessoDependencia p : this
				.getProcessoDependenciasForProcCdProcessoDependente()) {
			procDependencia = new Processo();
			procDependencia.setCodigoProcesso(p
					.getProcessoByProcCdProcessoDependencia());
			processos.add(procDependencia);
		}
		return processos;
	}

}
