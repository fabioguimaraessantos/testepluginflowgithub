/*
 * @(#) ReceitaLicenca.java
 * Copyright (c) 2008 Ci&T Software S/A.
 * All Rights Reserved.
 */
package com.ciandt.pms.model;

import java.math.BigDecimal;
import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.QueryHint;
import javax.persistence.SequenceGenerator;
import javax.persistence.SqlResultSetMapping;
import javax.persistence.SqlResultSetMappings;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.annotations.Type;
import org.hibernate.envers.Audited;
import org.hibernate.envers.RelationTargetAuditMode;

import com.ciandt.pms.Constants;

/**
 * Entity gerado a partir da tabela RECEITA_LICENCA.
 * 
 * @author Generated by Hibernate Tools 3.2.4.GA
 * @since 21/12/2009 12:09:33
 * @version 09/01/19 1.1 10:08:00
 */
@Entity
@Table(name = "RECEITA_LICENCA")
@SqlResultSetMappings(@SqlResultSetMapping(name = "scalarReceitaLicenca"))
@NamedNativeQueries({@NamedNativeQuery(name = ReceitaLicenca.INTEGRATE_RECEITA_LICENCA,
		query = "{ ? = call ufc_pms_int_rec_licenca_app(:codigoReceitaLicenca) }",
		hints = { @QueryHint(name = "org.hibernate.callable", value = "true") },
		resultClass = Integer.class,
		resultSetMapping = "scalarReceitaLicenca"),
		@NamedNativeQuery(name = "ReceitaLicenca.updateStatusReceitaLicenca", query = "UPDATE RECEITA_LICENCA RL" +
				" SET RL.RELI_IN_STATUS = :revenueStatus," +
				" RL.RELI_IN_VERSAO = :revenueVersion," +
				" RL.RELI_TX_ERROR = :errorMessage," +
				" RL.RELI_CD_ERP_PEDIDO = :megaOrderID " +
				" WHERE RL.RELI_CD_RECEITA_LICENCA = :revenueCode ", resultClass = ReceitaLicenca.class)})
@NamedQueries({
		@NamedQuery(name = ReceitaLicenca.FIND_ALL, query = "SELECT t FROM ReceitaLicenca t"),

		@NamedQuery(name = ReceitaLicenca.FIND_BY_CODIGO_PAI_RECEITA_LICENCA, query = "SELECT t FROM ReceitaLicenca t "
				+ "WHERE t.codigoPaiReceitaLicenca = :codigoPaiReceitaLicenca "
				+ "ORDER BY t.dataMes ASC"),

		@NamedQuery(name = ReceitaLicenca.FIND_BY_DATA_MES_AND_CONTRATO_PRATICA, query = "SELECT t FROM ReceitaLicenca t "
				+ "WHERE t.dataMes = :dataMes AND t.contratoPratica.codigoContratoPratica = :codigoContratoPratica"),

		@NamedQuery(name = ReceitaLicenca.FIND_BY_FORM_FILTER, query = "SELECT distinct rece FROM ReceitaLicenca rece "
				+ "LEFT JOIN rece.contratoPratica cp "
				+ "LEFT JOIN cp.contratoPraticaCentroLucros contratoPraticaCL "
				+ "WHERE ( TRUNC(rece.dataMes) = TRUNC(?) ) "
				+ " AND rece.indicadorDeleteLogico = 'N'"
				+ " AND ( (contratoPraticaCL.centroLucro.codigoCentroLucro = ?) OR (? = 0L) ) "
				+ " AND ( (contratoPraticaCL.centroLucro.naturezaCentroLucro.codigoNatureza = ?) OR (? = 0L) ) "
				+ " AND ( (cp.msa.cliente.codigoCliente = ?) OR (? = 0L) ) "
				+ " AND ( (cp.pratica.codigoPratica = ?) OR (? = 0L) )"
				+ " AND (UPPER(rece.indicadorVersao) LIKE '%'||TRIM(UPPER(?))||'%' OR (? IS NULL)) "
				+ " AND ( (? = 0L) OR (TRUNC(?) BETWEEN TRUNC(contratoPraticaCL.dataInicioVigencia) AND "
				+ "                               (CASE WHEN contratoPraticaCL.dataFimVigencia IS NOT NULL "
				+ "                                 THEN TRUNC(contratoPraticaCL.dataFimVigencia) "
				+ "                                 ELSE TRUNC(to_date('31/12/9999','dd/mm/yyyy')) "
				+ "                               END)) ) "),

		@NamedQuery(name = ReceitaLicenca.FIND_BY_INTEGRABLE_REVENUE, query = " SELECT t FROM ReceitaLicenca t"
				+ " JOIN FETCH t.dealFiscal df"
				+ " JOIN FETCH t.contratoPratica cp "
				+ " JOIN FETCH cp.convergencias cv "
				+ " JOIN FETCH cv.grupoCusto gc "
				+ " JOIN FETCH df.empresa e "
				+ " JOIN FETCH e.empresa e1 "
				+ " WHERE (cp.codigoContratoPratica = :codigoContratoPratica OR :codigoContratoPratica IS NULL)"
				+ " AND (e1.codigoEmpresa = :codigoEmpresa OR :codigoEmpresa IS NULL)"
				+ " AND (t.indicadorStatus = :status OR :status IS NULL)"
				+ " AND t.indicadorVersao IN ('PB', 'IN', 'PD', 'ER')"
				+ " AND cv.codigoProjetoMega IS NOT NULL "
				+ " AND t.indicadorDeleteLogico = 'N'"
				+ " AND TRUNC(t.dataMes) = TRUNC(:dataMes)")

})
public class ReceitaLicenca implements java.io.Serializable {

	/**
	 * Valor do serialVersionUID.
	 */
	private static final long serialVersionUID = 1L;

	/** Constante para NamedQuery "ReceitaLicenca.findByFilter". */
	public static final String FIND_ALL = "ReceitaLicenca.findAll";

	/** Constante para NamedQuery "ReceitaLicenca.findByFilter". */
	public static final String FIND_BY_DATA_MES_AND_CONTRATO_PRATICA = "ReceitaLicenca.findByDataMesAndContratoPratica";

	public static final String UPDATE_STATUS_RECEITA_LICENCA = "ReceitaLicenca.updateStatusReceitaLicenca";

	/**
	 * Constante para NamedQuery "ReceitaLicenca.findByCodigoPaiReceitaLicenca".
	 */
	public static final String FIND_BY_CODIGO_PAI_RECEITA_LICENCA = "ReceitaLicenca.findByCodigoPaiReceitaLicenca";

	/** Constante para NamedQuery "ReceitaLicenca.findByIntegrableRevenue". */
	public static final String FIND_BY_INTEGRABLE_REVENUE = "ReceitaLicenca.findByIntegrableRevenue";

	/**
	 * Constante para NamedQuery "Receita.findByFormFilter".
	 */
	public static final String FIND_BY_FORM_FILTER = "ReceitaLicenca.findByFormFilter";

	/** Constante para NamedQuery "ReceitaLicenca.integrateReceitaLicenca" */
	public static final String INTEGRATE_RECEITA_LICENCA = "ReceitaLicenca.integrateReceitaLicenca";

	/**
	 * Atributo gerado a partir da coluna RELI_CD_RECEITA_LICENCA.
	 */
	@Id
	@GeneratedValue(generator = "ReceitaLicencaSeq")
	@SequenceGenerator(name = "ReceitaLicencaSeq", sequenceName = "SQ_RELI_CD_RECEITA_LICENCA", allocationSize = 1)
	@Column(name = "RELI_CD_RECEITA_LICENCA", unique = true, nullable = false, precision = 18, scale = 0)
	private Long codigoReceitaLicenca;

	/**
	 * Atributo gerado a partir da coluna RELI_DT_MES.
	 */
	@Audited
	@Temporal(TemporalType.DATE)
	@Column(name = "RELI_DT_MES", nullable = false, length = 7)
	private Date dataMes;

	/**
	 * Atributo gerado a partir da coluna COPR_CD_CONTRATO_PRATICA.
	 */
	@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "COPR_CD_CONTRATO_PRATICA", nullable = false)
	private ContratoPratica contratoPratica;

	/**
	 * Atributo gerado a partir da coluna RELI_IN_VERSAO.
	 */
	@Audited
	@Column(name = "RELI_IN_VERSAO", length = 2)
	private String indicadorVersao;

	/**
	 * Atributo gerado a partir da coluna RELI_IN_STATUS.
	 */
	@Audited
	@Column(name = "RELI_IN_STATUS", length = 1)
	private String indicadorStatus;

	/**
	 * Atributo gerado a partir da coluna RELI_TX_OBSERVACAO.
	 */
	@Audited
	@Column(name = "RELI_TX_OBSERVACAO", length = 4000)
	private String textoObservacao;

	@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "DEFI_CD_DEAL_FISCAL", nullable = false)
	private DealFiscal dealFiscal;

	@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "MOED_CD_MOEDA", nullable = false)
	private Moeda moeda;

	@Audited
	@Column(name = "RELI_VL_RECEITA", precision = 22, scale = 0)
	private BigDecimal valorReceita;

	@Audited
	@Column(name = "RELI_CD_PAI_RECEITA_LICENCA", nullable = true, precision = 18, scale = 0)
	private Long codigoPaiReceitaLicenca;

	/**
	 * Atributo gerado a partir da coluna RELI_CD_LOGIN_CRIADOR.
	 */
	@Audited
	@Column(name = "RELI_CD_LOGIN_CRIADOR", length = 50, nullable = false)
	private String codigoLoginCriador;

	/**
	 * Atributo gerado a partir da coluna RELI_DT_CRIACAO.
	 */
	@Audited
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "RELI_DT_CRIACAO", length = 7, nullable = false)
	private Date dataCriacao;

	@Audited
	@Column(name = "RELI_PR_IMPOSTO", nullable = true)
	private BigDecimal percentualImposto;

	/**
	 * Atributo gerado a partir da coluna RELI_TX_ERROR.
	 */
	@Audited
	@Column(name = "RELI_TX_ERROR", length = 3000)
	private String textoError;

	/**
	 * Atributo gerado a partir da coluna REDF_CD_ERP_PEDIDO. Codigo do Pedido
	 * vindo do Mega
	 */
	@Audited
	@Column(name = "RELI_CD_ERP_PEDIDO", precision = 22, scale = 0)
	private Long codigoErpPedido;

	/**
	 * Atributo gerado a partir da coluna RELI_TX_ERROR.
	 */
	@Audited
	@Column(name = "RELI_IN_DELETE_LOGICO", length = 1)
	private String indicadorDeleteLogico;

	@Column(name = "RELI_IN_INTEG_QB_ONLINE", length = 1)
	@Type(type="yes_no")
	private Boolean indicadorIntegradoQBO;

	/**
	 * Construtor default.
	 */
	public ReceitaLicenca() {
	}

	/**
	 * @return the codigoReceitaLicenca
	 */
	public Long getCodigoReceitaLicenca() {
		return codigoReceitaLicenca;
	}

	/**
	 * @param codigoReceitaLicenca
	 *            the codigoReceitaLicenca to set
	 */
	public void setCodigoReceitaLicenca(Long codigoReceitaLicenca) {
		this.codigoReceitaLicenca = codigoReceitaLicenca;
	}

	/**
	 * @return the dataMes
	 */
	public Date getDataMes() {
		return dataMes;
	}

	/**
	 * @param dataMes
	 *            the dataMes to set
	 */
	public void setDataMes(Date dataMes) {
		this.dataMes = dataMes;
	}

	/**
	 * @return the contratoPratica
	 */
	public ContratoPratica getContratoPratica() {
		return contratoPratica;
	}

	/**
	 * @param contratoPratica
	 *            the contratoPratica to set
	 */
	public void setContratoPratica(ContratoPratica contratoPratica) {
		this.contratoPratica = contratoPratica;
	}

	/**
	 * @return the indicadorVersao
	 */
	public String getIndicadorVersao() {
		return indicadorVersao;
	}

	/**
	 * @param indicadorVersao
	 *            the indicadorVersao to set
	 */
	public void setIndicadorVersao(String indicadorVersao) {
		this.indicadorVersao = indicadorVersao;
	}

	/**
	 * @return the indicadorStatus
	 */
	public String getIndicadorStatus() {
		return indicadorStatus;
	}

	/**
	 * @param indicadorStatus
	 *            the indicadorStatus to set
	 */
	public void setIndicadorStatus(String indicadorStatus) {
		this.indicadorStatus = indicadorStatus;
	}

	/**
	 * @return the textoObservacao
	 */
	public String getTextoObservacao() {
		return textoObservacao;
	}

	/**
	 * @param textoObservacao
	 *            the textoObservacao to set
	 */
	public void setTextoObservacao(String textoObservacao) {
		this.textoObservacao = textoObservacao;
	}

	/**
	 * @return the dealFiscal
	 */
	public DealFiscal getDealFiscal() {
		return dealFiscal;
	}

	/**
	 * @param dealFiscal
	 *            the dealFiscal to set
	 */
	public void setDealFiscal(DealFiscal dealFiscal) {
		this.dealFiscal = dealFiscal;
	}

	/**
	 * @return the moeda
	 */
	public Moeda getMoeda() {
		return moeda;
	}

	/**
	 * @param moeda
	 *            the moeda to set
	 */
	public void setMoeda(Moeda moeda) {
		this.moeda = moeda;
	}

	/**
	 * @return the valorReceita
	 */
	public BigDecimal getValorReceita() {
		return valorReceita;
	}

	/**
	 * @param valorReceita
	 *            the valorReceita to set
	 */
	public void setValorReceita(BigDecimal valorReceita) {
		this.valorReceita = valorReceita;
	}

	/**
	 * @return the codigoPaiReceitaLicenca
	 */
	public Long getCodigoPaiReceitaLicenca() {
		return codigoPaiReceitaLicenca;
	}

	/**
	 * @param codigoPaiReceitaLicenca
	 *            the codigoPaiReceitaLicenca to set
	 */
	public void setCodigoPaiReceitaLicenca(Long codigoPaiReceitaLicenca) {
		this.codigoPaiReceitaLicenca = codigoPaiReceitaLicenca;
	}

	/**
	 * @return the codigoLoginCriador
	 */
	public String getCodigoLoginCriador() {
		return codigoLoginCriador;
	}

	/**
	 * @param codigoLoginCriador
	 *            the codigoLoginCriador to set
	 */
	public void setCodigoLoginCriador(String codigoLoginCriador) {
		this.codigoLoginCriador = codigoLoginCriador;
	}

	/**
	 * @return the dataCriacao
	 */
	public Date getDataCriacao() {
		return dataCriacao;
	}

	/**
	 * @param dataCriacao
	 *            the dataCriacao to set
	 */
	public void setDataCriacao(Date dataCriacao) {
		this.dataCriacao = dataCriacao;
	}

	/**
	 * @return the percentualImposto
	 */
	public BigDecimal getPercentualImposto() {
		return percentualImposto;
	}

	/**
	 * @param percentualImposto
	 *            the percentualImposto to set
	 */
	public void setPercentualImposto(BigDecimal percentualImposto) {
		this.percentualImposto = percentualImposto;
	}

	/**
	 * @return textoError
	 */
	public String getTextoError() {
		return textoError;
	}

	/**
	 * @param textoError
	 *            the textoError to set
	 */
	public void setTextoError(String textoError) {
		this.textoError = textoError;
	}

	/**
	 * @return codigoErpPedido
	 */
	public Long getCodigoErpPedido() {
		return codigoErpPedido;
	}

	/**
	 * @param codigoErpPedido
	 *            the codigoErpPedido to set
	 */
	public void setCodigoErpPedido(Long codigoErpPedido) {
		this.codigoErpPedido = codigoErpPedido;
	}

	/**
	 * @see Object#toString()
	 * @return representacao String do Objeto
	 */
	@Override
	public String toString() {
		StringBuffer buffer = new StringBuffer();

		buffer.append(getClass().getName()).append("@")
				.append(Integer.toHexString(hashCode())).append(" [");
		buffer.append("codigoReceita").append("='")
				.append(getCodigoReceitaLicenca()).append("' ");
		buffer.append("contratoPratica").append("='")
				.append(getContratoPratica()).append("' ");
		buffer.append("dataMes").append("='").append(getDataMes()).append("' ");
		buffer.append("indicadorVersao").append("='")
				.append(getIndicadorVersao()).append("' ");
		buffer.append("textoObservacao").append("='")
				.append(getTextoObservacao()).append("' ");
		buffer.append("codigoLoginCriador").append("='")
				.append(getCodigoLoginCriador()).append("' ");
		buffer.append("dataCriacao").append("='").append(getDataCriacao())
				.append("' ");
		buffer.append("]");

		return buffer.toString();
	}

	/**
	 * Desfaz o processo de integracao da receita. Torna uma receita
	 * reintegravel.
	 */
	public void resetIntegration() {
		this.setIndicadorStatus(Constants.INTEGRACAO_STATUS_NAO_INTEGRADO);
		this.setIndicadorVersao(Constants.VERSION_RECEITA_PUBLISHED);
		this.setCodigoErpPedido(null);
		this.setTextoError(null);
	}

	/**
	 * @return the indicadorDeleteLogico
	 */
	public String getIndicadorDeleteLogico() {
		return indicadorDeleteLogico;
	}

	/**
	 * @param indicadorDeleteLogico the indicadorDeleteLogico to set
	 */
	public void setIndicadorDeleteLogico(String indicadorDeleteLogico) {
		this.indicadorDeleteLogico = indicadorDeleteLogico;
	}

	public Boolean getIndicadorIntegradoQBO() {
		return indicadorIntegradoQBO;
	}

	public void setIndicadorIntegradoQBO(Boolean indicadorIntegradoQBO) {
		this.indicadorIntegradoQBO = indicadorIntegradoQBO;
	}
}