/*
 * @(#) OrcDespesaGc.java
 * Copyright (c) 2008 Ci&T Software S/A.
 * All Rights Reserved.
 */
package com.ciandt.pms.model;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

import org.hibernate.annotations.Where;

import com.ciandt.pms.Constants;

/**
 * Entity gerado a partir da tabela ORC_DESPESA_GC.
 * 
 * @author Generated by Hibernate Tools 3.6.0
 * @since 09/04/2013 10:23:53
 * @version 09/01/19 1.1 10:08:00
 */
@Entity
@Table(name = "ORC_DESPESA_GC")
@Where(clause = " ORDG_IN_DELETE_LOGICO = 'N' ")
@NamedQueries({
		@NamedQuery(name = "OrcDespesaGc.findAll", query = "SELECT t FROM OrcDespesaGc t"),
		@NamedQuery(name = "OrcDespesaGc.findByGrupoCustoAndActive", query = "SELECT t FROM OrcDespesaGc t WHERE "
				+ " t.grupoCusto.codigoGrupoCusto = :codigoGrupoCusto AND t.orcamentoDespesa.indicadorAtivo = 'S' "),
		@NamedQuery(name = "OrcDespesaGc.findByNameAndActive", query = "SELECT t FROM OrcDespesaGc t "
				+ " WHERE t.orcamentoDespesa.nomeOrcDespesa = :nomeOrcDespesa "
				+ " AND t.orcamentoDespesa.indicadorDeleteLogico = 'N' "
				+ " AND t.orcamentoDespesa.indicadorAtivo = 'S' "),
		@NamedQuery(name = "OrcDespesaGc.findByOrcDespesa", query = "SELECT t FROM OrcDespesaGc t "
				+ " WHERE t.orcamentoDespesa.codigoOrcaDespesa = ?"),
		@NamedQuery(name = "OrcDespesaGc.findByNameAndGrupoCustoAndActice", query = "SELECT t FROM OrcDespesaGc t "
				+ " WHERE UPPER(t.orcamentoDespesa.nomeOrcDespesa) = UPPER(?) "
				+ " AND t.grupoCusto.codigoGrupoCusto = ? "
				+ " AND t.orcamentoDespesa.indicadorAtivo = 'S'"),
		@NamedQuery(name = "OrcDespesaGc.findOnlyValidByCostGroup", query = "SELECT t FROM OrcDespesaGc t "
				+ " WHERE trunc(t.orcamentoDespesa.dataInicio)  <= trunc(SYSDATE) "
				+ " AND trunc(t.orcamentoDespesa.dataFim) >= trunc(SYSDATE) "
				+ " AND t.grupoCusto.codigoGrupoCusto = ? "
				+ " AND t.orcamentoDespesa.indicadorAtivo = 'S'") })
public class OrcDespesaGc implements java.io.Serializable {

	/**
	 * Valor do serialVersionUID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * Constante para NamedQuery "OrcDespesaGc.findAll".
	 */
	public static final String FIND_ALL = "OrcDespesaGc.findAll";

	/**
	 * Constante para NamedQuery "OrcDespesaGc.findByGrupoCusto".
	 */
	public static final String FIND_BY_CODIGO_GRUPO_CUSTO_AND_ACTIVE = "OrcDespesaGc.findByGrupoCustoAndActive";

	/**
	 * Constante para NamedQuery "OrcDespesaGc.findByNameAndActive".
	 */
	public static final String FIND_BY_NAME_AND_ACTIVE = "OrcDespesaGc.findByNameAndActive";

	/**
	 * Constante para NamedQuery "OrcDespesaGc.findByOrcDespesa".
	 */
	public static final String FIND_BY_ORC_DESPESA = "OrcDespesaGc.findByOrcDespesa";
	
	/**
	 * Constante para NamedQuery
	 * "OrcDespesaGc.findByNameAndGrupoCustoAndActice".
	 */
	public static final String FIND_BY_NAME_AND_GRUPO_CUSTO_AND_ACTIVE = "OrcDespesaGc.findByNameAndGrupoCustoAndActice";
	
	/**
	 * Constante para NamedQuery "OrcDespesaCl.findOnlyValidByCostGroup".
	 */
	public static final String FIND_ONLY_VALID_BY_COST_GROUP = "OrcDespesaGc.findOnlyValidByCostGroup";

	/**
	 * Atributo gerado a partir da coluna ORDG_CD_ORC_DESPESA_GC.
	 */
	@Id
	@GeneratedValue(generator = "OrcDespesaGcSeq")
	@SequenceGenerator(name = "OrcDespesaGcSeq", sequenceName = "SQ_ORDG_CD_ORCA_DESP_GC", allocationSize = 1)
	@Column(name = "ORDG_CD_ORCA_DESP_GC", unique = true, nullable = false, precision = 22, scale = 0)
	private Long codigoOrcaDespGc;

	/**
	 * Atributo gerado a partir da coluna ORDE_CD_ORCA_DESPESA.
	 */
	@ManyToOne(fetch = FetchType.EAGER, cascade=CascadeType.ALL)
	@JoinColumn(name = "ORDE_CD_ORCA_DESPESA", nullable = false)
	private OrcamentoDespesa orcamentoDespesa;

	/**
	 * Atributo gerado a partir da coluna GRCU_CD_GRUPO_CUSTO.
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "GRCU_CD_GRUPO_CUSTO", nullable = false)
	private GrupoCusto grupoCusto;

	/**
	 * Atributo gerado a partir da coluna ORDG_IN_WL_ONLY.
	 */

	@Column(name = "ORDG_IN_WL_ONLY", length = 1)
	private String indicadorWlOnly;

	/**
	 * Atributo gerado a partir da coluna ORDG_IN_DELETE_LOGICO.
	 */
	@Column(name = "ORDG_IN_DELETE_LOGICO", length = 1, nullable = false)
	private String indicadorDeleteLogico;

	/**
	 * Construtor default.
	 */
	public OrcDespesaGc() {
	}

	/**
	 * Obtem o valor do atributo codigoOrcDespGc.<BR>
	 * Atributo gerado a partir da coluna ORDG_CD_ORC_DESP_GC.
	 * 
	 * @return Valor do atributo codigoOrcDespGc.
	 */
	public Long getCodigoOrcDespGc() {
		return this.codigoOrcaDespGc;
	}

	/**
	 * Atualiza o valor do atributo codigoOrcDespesaGc.<BR>
	 * Atributo gerado a partir da coluna ORDG_CD_ORC_DESPESA_GC.
	 * 
	 * @param codigoOrcDespGc
	 *            Novo valor para o atributo codigoOrcDespesaGc.
	 */
	public void setCodigoOrcDespGc(final Long codigoOrcDespGc) {
		this.codigoOrcaDespGc = codigoOrcDespGc;
	}

	/**
	 * Obtem o valor do atributo orcDespesa.<BR>
	 * Atributo gerado a partir da coluna ORDE_CD_ORCA_DESPESA.
	 * 
	 * @return Valor do atributo orcDespesa.
	 */
	public OrcamentoDespesa getOrcamentoDespesa() {
		return this.orcamentoDespesa;
	}

	/**
	 * Atualiza o valor do atributo orcDespesa.<BR>
	 * Atributo gerado a partir da coluna ORDE_CD_ORCA_DESPESA.
	 * 
	 * @param orcDespesa
	 *            Novo valor para o atributo orcDespesa.
	 */
	public void setOrcamentoDespesa(final OrcamentoDespesa orcDespesa) {
		this.orcamentoDespesa = orcDespesa;
	}

	/**
	 * Obtem o valor do atributo grupoCusto.<BR>
	 * Atributo gerado a partir da coluna GRCU_CD_GRUPO_CUSTO.
	 * 
	 * @return Valor do atributo grupoCusto.
	 */
	public GrupoCusto getGrupoCusto() {
		return this.grupoCusto;
	}

	/**
	 * Atualiza o valor do atributo grupoCusto.<BR>
	 * Atributo gerado a partir da coluna GRCU_CD_GRUPO_CUSTO.
	 * 
	 * @param grupoCusto
	 *            Novo valor para o atributo grupoCusto.
	 */
	public void setGrupoCusto(final GrupoCusto grupoCusto) {
		this.grupoCusto = grupoCusto;
	}

	/**
	 * Obtem o valor do atributo indicadorWlOnly.<BR>
	 * Atributo gerado a partir da coluna ORDG_IN_WL_ONLY.
	 * 
	 * @return Valor do atributo indicadorWlOnly.
	 */
	public String getIndicadorWlOnly() {
		return this.indicadorWlOnly;
	}

	/**
	 * Atualiza o valor do atributo indicadorWlOnly.<BR>
	 * Atributo gerado a partir da coluna ORDG_IN_WL_ONLY.
	 * 
	 * @param indicadorWlOnly
	 *            Novo valor para o atributo indicadorWlOnly.
	 */
	public void setIndicadorWlOnly(final String indicadorWlOnly) {
		this.indicadorWlOnly = indicadorWlOnly;
	}
	
	/**
	 * Obtem o valor do atributo indicadorWlOnly.<BR>
	 * Atributo gerado a partir da coluna ORDG_IN_WL_ONLY.
	 * 
	 * @return Valor do atributo indicadorWlOnly.
	 */
	public Boolean getIndicadorWlOnlyAsBoolean() {
		if (Constants.SIM.equals(this.indicadorWlOnly)) {
			return Boolean.TRUE;
		} else {
			return Boolean.FALSE;
		}
	}

	/**
	 * Atualiza o valor do atributo indicadorWlOnly.<BR>
	 * Atributo gerado a partir da coluna ORDG_IN_WL_ONLY.
	 * 
	 * @param indicadorWlOnly
	 *            Novo valor para o atributo indicadorWlOnly.
	 */
	public void setIndicadorWlOnlyAsBoolean(final Boolean indicadorWlOnly) {
		if (indicadorWlOnly) {
			this.indicadorWlOnly = Constants.SIM;
		} else {
			this.indicadorWlOnly = Constants.NO;
		}
	}

	/**
	 * @return the indicadorDeleteLogico
	 */
	public String getIndicadorDeleteLogico() {
		return indicadorDeleteLogico;
	}

	/**
	 * @param indicadorDeleteLogico
	 *            the indicadorDeleteLogico to set
	 */
	public void setIndicadorDeleteLogico(final String indicadorDeleteLogico) {
		this.indicadorDeleteLogico = indicadorDeleteLogico;
	}

	/**
	 * @see Object#toString()
	 */
	@Override
	public String toString() {
		StringBuffer buffer = new StringBuffer();

		buffer.append(getClass().getName()).append("@")
				.append(Integer.toHexString(hashCode())).append(" [");
		buffer.append("codigoOrcDespesaGc").append("='")
				.append(getCodigoOrcDespGc()).append("' ");
		buffer.append("orcDespesa").append("='").append(getOrcamentoDespesa())
				.append("' ");
		buffer.append("grupoCusto").append("='").append(getGrupoCusto())
				.append("' ");
		buffer.append("indicadorWlOnly").append("='")
				.append(getIndicadorWlOnly()).append("' ");
		buffer.append("]");

		return buffer.toString();
	}
}