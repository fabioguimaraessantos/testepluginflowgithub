/*
 * @(#) DealFiscal.java
 * Copyright (c) 2008 Ci&T Software S/A.
 * All Rights Reserved.
 */
package com.ciandt.pms.model;

import com.ciandt.pms.util.DateUtil;
import org.hibernate.annotations.Type;
import org.hibernate.envers.AuditTable;
import org.hibernate.envers.Audited;
import org.hibernate.envers.NotAudited;
import org.hibernate.envers.RelationTargetAuditMode;

import javax.persistence.*;
import java.math.BigDecimal;
import java.util.*;

/**
 * Entity gerado a partir da tabela DEAL_FISCAL.
 * 
 * @author Generated by Hibernate Tools 3.2.4.GA
 * @since 21/12/2009 12:09:33
 * @version 09/01/19 1.1 10:08:00
 */
@Entity
@Table(name = "DEAL_FISCAL")
@Audited
@AuditTable(value = "DEAL_FISCAL_AUD")
@NamedQueries({

		@NamedQuery(name = "DealFiscal.findAll", query = "SELECT t FROM DealFiscal t "
				+ " WHERE t.indicadorTipo != 'FC' "
				+ "ORDER BY t.nomeDealFiscal ASC "),

		@NamedQuery(name = "DealFiscal.findAllActive", query = "SELECT t FROM DealFiscal t "
				+ "WHERE t.indicadorStatus = 'A' "
				+ " AND t.indicadorTipo != 'FC' "
				+ "ORDER BY t.nomeDealFiscal ASC "),


		@NamedQuery(name = "DealFiscal.findByContratoPratica", query = "SELECT defi FROM DealFiscal defi "
				// TODO testar esse m�todo
				+ "JOIN FETCH defi.cpraticaDfiscals cpdf "
				// + "WHERE defi.contratoPratica.codigoContratoPratica = ?"),
				+ "WHERE defi.indicadorTipo != 'FC' AND cpdf.contratoPratica.codigoContratoPratica = ?"),

		@NamedQuery(name = "DealFiscal.findByContratoPraticaAndActive", query = "SELECT defi FROM DealFiscal defi "
				// TODO testar esse m�todo
				+ "JOIN FETCH defi.cpraticaDfiscals cpdf "
				// + "WHERE defi.contratoPratica.codigoContratoPratica = ?"
				+ "WHERE cpdf.contratoPratica.codigoContratoPratica = ?"
                + " AND defi.indicadorTipo != 'FC' "
				+ " AND defi.indicadorStatus = 'A'"),

		@NamedQuery(name = "DealFiscal.findMaxByMsa", query = "SELECT MAX(defi.numeroSequencia) FROM DealFiscal defi "
				+ "WHERE defi.indicadorTipo != 'FC' " +
                " AND defi.msa.codigoMsa = ? "),

		@NamedQuery(name = "DealFiscal.findByCliente", query = "SELECT defi FROM DealFiscal defi "
				+ "WHERE defi.cliente.codigoCliente = ? "
                + " AND defi.indicadorTipo != 'FC' "
				+ "ORDER BY defi.nomeDealFiscal ASC "),

		@NamedQuery(name = "DealFiscal.findActiveByMsa", query = "SELECT defi FROM DealFiscal defi "
				+ " WHERE defi.msa.codigoMsa = ? "
				+ " AND defi.indicadorStatus = 'A' "
				+ " AND defi.indicadorTipo != 'FC' "
				+ " ORDER BY defi.nomeDealFiscal ASC "),

		@NamedQuery(name = "DealFiscal.findByCLobAndCurrency", query = "SELECT defi FROM DealFiscal defi "
				+ "JOIN FETCH defi.cpraticaDfiscals cpdf "
				+ "WHERE cpdf.contratoPratica.codigoContratoPratica = ? "
				+ "AND defi.moeda.codigoMoeda = ? "
                + " AND defi.indicadorTipo != 'FC' "
				+ "AND defi.indicadorStatus = 'A' "),

		@NamedQuery(name = "DealFiscal.findByCLobAndCurrencyAndNotLogicDeleted", query = "SELECT defi FROM DealFiscal defi "
				+ "JOIN FETCH defi.cpraticaDfiscals cpdf "
				+ "WHERE cpdf.contratoPratica.codigoContratoPratica = ? "
				+ "AND defi.moeda.codigoMoeda = ? "
				+ "AND defi.indicadorStatus = 'A' "
                + " AND defi.indicadorTipo != 'FC' "
				+ "AND defi.indicadorDeleteLogico = 'N' "),

		@NamedQuery(name = "DealFiscal.findByMsaAndNotLogicalDelete", query = "SELECT defi FROM DealFiscal defi "
				+ "WHERE defi.msa.codigoMsa = ? "
                + " AND defi.indicadorTipo != 'FC' "
				+ "AND defi.indicadorDeleteLogico = 'N'"),

		@NamedQuery(name = "DealFiscal.findByMsa", query = "SELECT defi FROM DealFiscal defi "
				+ "WHERE defi.msa.codigoMsa = ?"
                + " AND defi.indicadorTipo != 'FC' "),

		@NamedQuery(name = "DealFiscal.findByMsaActive", query = "SELECT defi FROM DealFiscal defi "
				+ "WHERE defi.msa.codigoMsa = ?"
				+ " AND defi.indicadorTipo != 'FC' "
				+ " AND defi.indicadorStatus = 'A' "),

		@NamedQuery(name = "DealFiscal.findByMsaAndActiveAndNotLogicalDelete", query = "SELECT defi FROM DealFiscal defi "
				+ "WHERE defi.msa.codigoMsa = ? "
				+ "AND defi.indicadorStatus = 'A' "
                + " AND defi.indicadorTipo != 'FC' "
				+ "AND defi.indicadorDeleteLogico = 'N'"),

		@NamedQuery(name = "DealFiscal.findByFilter", query = "SELECT defi FROM DealFiscal defi "
				+ "WHERE (defi.msa.codigoMsa = :codigoMsa OR :codigoMsa = 0L) "
                + " AND defi.indicadorTipo != 'FC' "
				+ "AND (defi.msa.cliente.codigoCliente = :codigoCliente OR :codigoCliente = 0L) "),

		@NamedQuery(name = DealFiscal.FIND_ACTIVE_AND_NOT_LOGICAL_DELETE_BY_CLOB_AND_CURRENCY_AND_TIPO_SERVICO, query = "SELECT defi FROM DealFiscal defi "
				+ "JOIN FETCH defi.cpraticaDfiscals cpdf "
				+ "JOIN defi.tipoServicos ts "
				+ "WHERE cpdf.contratoPratica.codigoContratoPratica = :codigoContratoPratica "
				+ "AND defi.moeda.codigoMoeda = :codigoMoeda "
				+ "AND ts.siglaTipoServico IN :siglasTipoServico "
				+ "AND defi.indicadorStatus = 'A' "
                + " AND defi.indicadorTipo != 'FC' "
				+ "AND defi.indicadorDeleteLogico = 'N' "),

		@NamedQuery(name = DealFiscal.FIND_FISCAL_DEAL_WITH_ACTIVE_ALLOCATIONS_IN_ALLOCATION_MAP_BY_FISCAL_DEAL_AND_CLOSING_MAP_DATE, query =
				"SELECT DISTINCT df FROM DealFiscal df "
				+ "	JOIN df.cpraticaDfiscals cpfd "
				+ "	JOIN cpfd.contratoPratica cp "
				+ "	JOIN cp.mapaAlocacaos ma "
				+ "	JOIN ma.alocacaos al "
				+ "	JOIN al.alocacaoPeriodos ap "
				+ "	JOIN al.cidadeBase cb "
				+ "WHERE df.codigoDealFiscal = :codigoDealFiscal "
				+ "	AND ap.dataAlocacaoPeriodo > :closingMapDate "
				+ "	AND ap.percentualAlocacaoPeriodo > 0 "
				+ "	AND ap.percentualUr > 0 "
				+ "	AND df.indicadorStatus = 'A' "
				+ "	AND df.indicadorDeleteLogico = 'N' "
				+ "	AND df.indicadorIntercompany = 'Y' "
				+ " AND cp.indicadorAtivo IN ('A','P') "
				+ " AND cp.indicadorStatus = 'C' "
				+ " AND cb.codigoEmpresaERP != :codigoEmpresaERP "
				)

})
public class DealFiscal implements java.io.Serializable {

	// ========================================================================
	// BEGIN - Coloque aqui o codigo manual
	// ========================================================================

	/** Constante para NamedQuery "DealFiscal.findByFilter". */
	public static final String FIND_BY_FILTER = "DealFiscal.findByFilter";

	/** Constante para NamedQuery "DealFiscal.findAllActive". */
	public static final String FIND_ALL_ACTIVE = "DealFiscal.findAllActive";

	/** Constante para NamedQuery "DealFiscal.findByFilterFetch". */
	public static final String FIND_BY_FILTER_FETCH = "DealFiscal.findByFilterFetch";

	/** Constante para NamedQuery "DealFiscal.findMaxByMsa". */
	public static final String FIND_MAX_BY_MSA = "DealFiscal.findMaxByMsa";

	/** Constante para NamedQuery "DealFiscal.findByContratoPratica". */
	public static final String FIND_BY_CONTRATO_PRATICA = "DealFiscal.findByContratoPratica";

	/** Constante para NamedQuery "DealFiscal.findByContratoPraticaAndActive". */
	public static final String FIND_BY_CONTRATO_PRATICA_AND_ACTIVE = "DealFiscal.findByContratoPraticaAndActive";

	/** Constante para NamedQuery "DealFiscal.findByCliente". */
	public static final String FIND_BY_CLIENTE = "DealFiscal.findByCliente";

	/** Constante para NamedQuery "DealFiscal.findActiveByMsa". */
	public static final String FIND_ACTIVE_BY_MSA = "DealFiscal.findActiveByMsa";

	/** Constante para NamedQuery "DealFiscal.findByCLobAndCurrency". */
	public static final String FIND_ACTIVE_BY_CLOB_AND_CURRENCY = "DealFiscal.findByCLobAndCurrency";

	/**
	 * Constante para NamedQuery
	 * "DealFiscal.findByCLobAndCurrencyAndNotLogicDeleted".
	 */
	public static final String FIND_ACTIVE_BY_CLOB_AND_CURRENCY_AND_NOT_LOGIC_DELETED = "DealFiscal.findByCLobAndCurrencyAndNotLogicDeleted";

	/** Constante para NamedQuery "DealFiscal.findByMsaAndNotLogicalDelete". */
	public static final String FIND_ACTIVE_BY_MSA_AND_NOT_LOGICAL_DELETE = "DealFiscal.findByMsaAndNotLogicalDelete";

	/** Constante para NamedQuery "DealFiscal.findByMsa". */
	public static final String FIND_BY_MSA = "DealFiscal.findByMsa";

	/** Constante para NamedQuery "DealFiscal.findByMsaActive". */
	public static final String FIND_BY_MSA_ACTIVE = "DealFiscal.findByMsaActive";

	/**
	 * Constante para NamedQuery
	 * "DealFiscal.findByMsaAndActiveAndNotLogicalDelete".
	 */
	public static final String FIND_BY_MSA_AND_ACTIVE_AND_NOT_LOGICAL_DELETE = "DealFiscal.findByMsaAndActiveAndNotLogicalDelete";

	/** Constante para NamedQuery */
	public static final String FIND_ACTIVE_AND_NOT_LOGICAL_DELETE_BY_CLOB_AND_CURRENCY_AND_TIPO_SERVICO = "DealFiscal.findActiveAndNotLogicDeletedByClobAndCurrencyAndTipoServico";

	public static final String FIND_FISCAL_DEAL_WITH_ACTIVE_ALLOCATIONS_IN_ALLOCATION_MAP_BY_FISCAL_DEAL_AND_CLOSING_MAP_DATE =
			"DealFiscal.findFiscalDealWithActiveAllocationsInAllocationMapByFiscalDealAndClosingMapDate";

	/**
	 * Relacionamento um pra muitos.
	 */
	@NotAudited
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "dealFiscal")
	private List<Fatura> faturas = new ArrayList<Fatura>(0);

	/**
	 * Lista de TipoServico relacionado com o deal.
	 */
	@NotAudited
	@ManyToMany(fetch = FetchType.EAGER, cascade = CascadeType.ALL)
	@JoinTable(name = "TIPO_SERVICO_DEAL_FISCAL", joinColumns = { @JoinColumn(name = "DEFI_CD_DEAL_FISCAL", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "TISE_CD_TIPO_SERVICO", nullable = false, updatable = false) })
	private List<TipoServico> tipoServicos = new ArrayList<TipoServico>(0);

	/**
	 * Relacionamento um pra muitos.
	 */
	@NotAudited
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "dealFiscal", cascade = CascadeType.ALL)
	private List<ReceitaDealFiscal> receitaDealFiscals = new ArrayList<ReceitaDealFiscal>(
			0);

	/**
	 * Relacionamento um pra muitos.
	 */
	@NotAudited
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "dealFiscal")
	private List<CpraticaDfiscal> cpraticaDfiscals = new ArrayList<CpraticaDfiscal>(
			0);

	/** Lista de Fiscal Balance Acumulado. */
	@NotAudited
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "dealFiscal")
	private List<VwFiscalBalanceAcumulado> VwFiscalBalanceAcumulados = new ArrayList<VwFiscalBalanceAcumulado>(
			0);

	/**
	 * Obtem o valor do atributo receitaDealFiscals.<BR>
	 * 
	 * @return Valor do atributo receitaDealFiscals.
	 */
	public List<ReceitaDealFiscal> getReceitaDealFiscals() {
		return this.receitaDealFiscals;
	}

	/**
	 * Atualiza o valor do atributo receitaDealFiscals.<BR>
	 * 
	 * @param receitaDealFiscals
	 *            Novo valor para o atributo receitaDealFiscals.
	 */
	public void setReceitaDealFiscals(
			final List<ReceitaDealFiscal> receitaDealFiscals) {
		this.receitaDealFiscals = receitaDealFiscals;
	}

	/**
	 * Obtem o valor do atributo faturas.<BR>
	 * 
	 * @return Valor do atributo faturas.
	 */
	public List<Fatura> getFaturas() {
		return this.faturas;
	}

	/**
	 * Atualiza o valor do atributo faturas.<BR>
	 * 
	 * @param faturas
	 *            Novo valor para o atributo faturas.
	 */
	public void setFaturas(final List<Fatura> faturas) {
		this.faturas = faturas;
	}

	// ========================================================================
	// END
	// ========================================================================

	/**
	 * Valor do serialVersionUID.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * Constante para NamedQuery "DealFiscal.findAll".
	 */
	public static final String FIND_ALL = "DealFiscal.findAll";

	/**
	 * Atributo gerado a partir da coluna DEFI_CD_DEAL_FISCAL.
	 */
	@Id
	@GeneratedValue(generator = "DealFiscalSeq")
	@SequenceGenerator(name = "DealFiscalSeq", sequenceName = "SQ_DEFI_CD_DEAL_FISCAL", allocationSize = 1)
	@Column(name = "DEFI_CD_DEAL_FISCAL", unique = true, nullable = false, precision = 18, scale = 0)
	private Long codigoDealFiscal;

	/**
	 * Atributo gerado a partir da coluna MOED_CD_MOEDA.
	 */
	@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "MOED_CD_MOEDA", nullable = false)
	private Moeda moeda;

	/**
	 * Atributo gerado a partir da coluna CLIE_CD_CLIENTE.
	 */
	@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "CLIE_CD_CLIENTE", nullable = false)
	private Cliente cliente;

	/**
	 * Atributo gerado a partir da coluna MSAA_CD_MSA.
	 */
	@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "MSAA_CD_MSA", nullable = false)
	private Msa msa;

	/**
	 * Atributo gerado a partir da coluna DEFI_NM_DEAL_FISCAL.
	 */
	@Audited
	@Column(name = "DEFI_NM_DEAL_FISCAL", length = 200)
	private String nomeDealFiscal;

	/**
	 * Atributo gerado a partir da coluna DEFI_IN_INTERCOMPANY.
	 */
	@Audited
	@Column(name = "DEFI_IN_INTERCOMPANY", length = 1)
	@Type(type = "yes_no")
	private Boolean indicadorIntercompany;

	/**
	 * Atributo gerado a partir da coluna DEFI_IN_TIPO.
	 */
	@Audited
	@Column(name = "DEFI_IN_TIPO", length = 2)
	private String indicadorTipo;

	/**
	 * Atributo gerado a partir da coluna DEFI_IN_ENTREGA.
	 */
	@Column(name = "DEFI_IN_ENTREGA", length = 2)
	private String indicadorEntrega;

	/**
	 * Atributo gerado a partir da coluna DEFI_IN_STATUS.
	 */
	@Audited
	@Column(name = "DEFI_IN_STATUS", length = 1)
	private String indicadorStatus;

	/**
	 * Atributo gerado a partir da coluna DEFI_NR_SEQUENCIA.
	 */
	@Audited
	@Column(name = "DEFI_NR_SEQUENCIA", precision = 18, scale = 0)
	private Long numeroSequencia;

	/**
	 * Atributo gerado a partir da coluna DEFI_VL_SALDO_INICIAL.
	 */
	@Audited
	@Column(name = "DEFI_VL_SALDO_INICIAL", precision = 22, scale = 0)
	private BigDecimal valorSaldoInicial;

	/**
	 * Atributo gerado a partir da coluna EMPR_CD_EMP_INTERCOMP.
	 */
	@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "EMPR_CD_EMP_INTERCOMP", nullable = true)
	private Empresa empresaIntercomp;

	/**
	 * Atributo gerado a partir da coluna EMPR_CD_EMPRESA.
	 */
	@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "EMPR_CD_EMPRESA", nullable = false)
	private Empresa empresa;

	/**
	 * Atributo gerado a partir da coluna DEFI_IN_DELETE_LOGICO.
	 */
	@Audited
	@Column(name = "DEFI_IN_DELETE_LOGICO", length = 1)
	private String indicadorDeleteLogico;

	@Audited
	@Column(name = "DEFI_PR_INTERCOMPANY", nullable = true, precision = 10, scale = 5)
	private Double percentualIntercompany;

	@Transient
	private TipoServico tipoServico;

	@NotAudited
	@OneToMany(fetch = FetchType.EAGER, mappedBy = "dealFiscal")
	private Set<HistoricoPercentualIntercomp> historicoPercentualIntercomps = new HashSet<HistoricoPercentualIntercomp>(
			0);

	@Transient
	private Double percentualIntercompanyVigente;

	/**
	 * Construtor default.
	 */
	public DealFiscal() {
	}

	/**
	 * @return the tipoServicos
	 */
	public List<TipoServico> getTipoServicos() {
		return tipoServicos;
	}

	/**
	 * @param tipoServicos
	 *            the tipoServicos to set
	 */
	public void setTipoServicos(final List<TipoServico> tipoServicos) {
		this.tipoServicos = tipoServicos;
	}

	/**
	 * @return the cpraticaDfiscals
	 */
	public List<CpraticaDfiscal> getCpraticaDfiscals() {
		return cpraticaDfiscals;
	}

	/**
	 * @param cpraticaDfiscals
	 *            the cpraticaDfiscals to set
	 */
	public void setCpraticaDfiscals(final List<CpraticaDfiscal> cpraticaDfiscals) {
		this.cpraticaDfiscals = cpraticaDfiscals;
	}

	/**
	 * @return the codigoDealFiscal
	 */
	public Long getCodigoDealFiscal() {
		return codigoDealFiscal;
	}

	/**
	 * @param codigoDealFiscal
	 *            the codigoDealFiscal to set
	 */
	public void setCodigoDealFiscal(final Long codigoDealFiscal) {
		this.codigoDealFiscal = codigoDealFiscal;
	}

	/**
	 * @return the moeda
	 */
	public Moeda getMoeda() {
		return moeda;
	}

	/**
	 * @param moeda
	 *            the moeda to set
	 */
	public void setMoeda(final Moeda moeda) {
		this.moeda = moeda;
	}

	/**
	 * @return the cliente
	 */
	public Cliente getCliente() {
		return cliente;
	}

	/**
	 * @param cliente
	 *            the cliente to set
	 */
	public void setCliente(final Cliente cliente) {
		this.cliente = cliente;
	}

	/**
	 * @return the msa
	 */
	public Msa getMsa() {
		return msa;
	}

	/**
	 * @param msa
	 *            the msa to set
	 */
	public void setMsa(final Msa msa) {
		this.msa = msa;
	}

	/**
	 * @return the nomeDealFiscal
	 */
	public String getNomeDealFiscal() {
		return nomeDealFiscal;
	}

	/**
	 * @param nomeDealFiscal
	 *            the nomeDealFiscal to set
	 */
	public void setNomeDealFiscal(final String nomeDealFiscal) {
		this.nomeDealFiscal = nomeDealFiscal;
	}

	/**
	 * @return the indicadorIntercompany
	 */
	public Boolean getIndicadorIntercompany() {
		return indicadorIntercompany;
	}

	/**
	 * @param indicadorIntercompany
	 *            the indicadorIntercompany to set
	 */
	public void setIndicadorIntercompany(final Boolean indicadorIntercompany) {
		this.indicadorIntercompany = indicadorIntercompany;
	}

	/**
	 * @return the indicadorTipo
	 */
	public String getIndicadorTipo() {
		return indicadorTipo;
	}

	/**
	 * @param indicadorTipo
	 *            the indicadorTipo to set
	 */
	public void setIndicadorTipo(final String indicadorTipo) {
		this.indicadorTipo = indicadorTipo;
	}

	public String getIndicadorEntrega() {
		return indicadorEntrega;
	}

	public void setIndicadorEntrega(final String indicadorEntrega) {
		this.indicadorEntrega = indicadorEntrega;
	}

	/**
	 * @return the indicadorStatus
	 */
	public String getIndicadorStatus() {
		return indicadorStatus;
	}

	/**
	 * @param indicadorStatus
	 *            the indicadorStatus to set
	 */
	public void setIndicadorStatus(final String indicadorStatus) {
		this.indicadorStatus = indicadorStatus;
	}

	/**
	 * @return the numeroSequencia
	 */
	public Long getNumeroSequencia() {
		return numeroSequencia;
	}

	/**
	 * @param numeroSequencia
	 *            the numeroSequencia to set
	 */
	public void setNumeroSequencia(final Long numeroSequencia) {
		this.numeroSequencia = numeroSequencia;
	}

	/**
	 * @return the valorSaldoInicial
	 */
	public BigDecimal getValorSaldoInicial() {
		return valorSaldoInicial;
	}

	/**
	 * @param valorSaldoInicial
	 *            the valorSaldoInicial to set
	 */
	public void setValorSaldoInicial(final BigDecimal valorSaldoInicial) {
		this.valorSaldoInicial = valorSaldoInicial;
	}

	/**
	 * @return the empresaIntercomp
	 */
	public Empresa getEmpresaIntercomp() {
		return empresaIntercomp;
	}

	/**
	 * @param empresaIntercomp
	 *            the empresaIntercomp to set
	 */
	public void setEmpresaIntercomp(final Empresa empresaIntercomp) {
		this.empresaIntercomp = empresaIntercomp;
	}

	/**
	 * @return the empresa
	 */
	public Empresa getEmpresa() {
		return empresa;
	}

	/**
	 * @param empresa
	 *            the empresa to set
	 */
	public void setEmpresa(final Empresa empresa) {
		this.empresa = empresa;
	}

	/**
	 * Obtem o valor do atributo indicadorDeleteLogico.<BR>
	 * Atributo gerado a partir da coluna DEFI_IN_DELETE_LOGICO.
	 * 
	 * @return Valor do atributo indicadorDeleteLogico.
	 */
	public String getIndicadorDeleteLogico() {
		return this.indicadorDeleteLogico;
	}

	/**
	 * Atualiza o valor do atributo indicadorDeleteLogico.<BR>
	 * Atributo gerado a partir da coluna DEFI_IN_DELETE_LOGICO.
	 * 
	 * @param indicadorDeleteLogico
	 *            Novo valor para o atributo indicadorDeleteLogico.
	 */
	public void setIndicadorDeleteLogico(String indicadorDeleteLogico) {
		this.indicadorDeleteLogico = indicadorDeleteLogico;
	}

	/**
	 * @return the tipoServico
	 */
	public TipoServico getTipoServico() {
		return tipoServico;
	}

	/**
	 * @param tipoServico
	 *            the tipoServico to set
	 */
	public void setTipoServico(TipoServico tipoServico) {
		this.tipoServico = tipoServico;
	}

	public Double getPercentualIntercompanyVigente() {
		for (HistoricoPercentualIntercomp hpi : this.historicoPercentualIntercomps) {
			if (hpi.getDataFim() == null) {
				this.percentualIntercompanyVigente = hpi.getPercentualIntercompany();
				return this.percentualIntercompanyVigente;
			}
		}

		return null;
	}

	public void setPercentualIntercompanyVigente(Double percentual) {
		for (HistoricoPercentualIntercomp hpi : this.historicoPercentualIntercomps) {

			if (hpi.getDataFim() == null && !hpi.getPercentualIntercompany().equals(percentual)) {

				if (hpi.getDataInicio().equals(DateUtil.getDate(new Date()))) {
					hpi.setPercentualIntercompany(percentual);
				} else {
					Calendar cal = Calendar.getInstance(); // locale-specific
					cal.setTime(new Date());
					cal.add(Calendar.MONTH, -1);
					cal.set(Calendar.DAY_OF_MONTH, 1);
					cal.set(Calendar.HOUR_OF_DAY, 0);
					cal.set(Calendar.MINUTE, 0);
					cal.set(Calendar.SECOND, 0);
					cal.set(Calendar.MILLISECOND, 0);
					
					hpi.setDataFim(cal.getTime());

					//this.historicoPercentualIntercomps.add(new HistoricoPercentualIntercomp(percentual, this));
				}
			}
		}
	}

	/**
	 * @return the historicoPercentualIntercomps
	 */
	public Set<HistoricoPercentualIntercomp> getHistoricoPercentualIntercomps() {
		return historicoPercentualIntercomps;
	}

	/**
	 * @param historicoPercentualIntercomps the historicoPercentualIntercomps to set
	 */
	public void setHistoricoPercentualIntercomps(
			Set<HistoricoPercentualIntercomp> historicoPercentualIntercomps) {
		this.historicoPercentualIntercomps = historicoPercentualIntercomps;
	}

	public Double getPercentualIntercompany(){return this.percentualIntercompany;}

	public void setPercentualIntercompany(Double percentualIntercompany){
		this.percentualIntercompany = percentualIntercompany;
	}

	/**
	 * @see Object#toString()
	 * 
	 * @return retorna a entidade no formato de string
	 */
	@Override
	public String toString() {
		StringBuffer buffer = new StringBuffer();

		buffer.append(getClass().getName()).append("@")
				.append(Integer.toHexString(hashCode())).append(" [");
		buffer.append("codigoDealFiscal").append("='")
				.append(getCodigoDealFiscal()).append("' ");
		buffer.append("moeda").append("='").append(getMoeda()).append("' ");
		buffer.append("msa").append("='").append(getMsa()).append("' ");
		buffer.append("nomeDealFiscal").append("='")
				.append(getNomeDealFiscal()).append("' ");
		buffer.append("indicadorIntercompany").append("='")
				.append(getIndicadorIntercompany()).append("' ");
		buffer.append("indicadorTipo").append("='").append(getIndicadorTipo())
				.append("' ");
		buffer.append("indicadorEntrega").append("='").append(getIndicadorEntrega())
				.append("' ");
		buffer.append("indicadorStatus").append("='")
				.append(getIndicadorStatus()).append("' ");
		buffer.append("numeroSequencia").append("='")
				.append(getNumeroSequencia()).append("' ");
		buffer.append("valorSaldoInicial").append("='")
				.append(getValorSaldoInicial()).append("' ");
		buffer.append("indicadorDeleteLogico").append("='")
				.append(getIndicadorDeleteLogico()).append("' ");
		buffer.append("]");

		return buffer.toString();
	}

}